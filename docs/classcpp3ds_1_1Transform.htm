<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>cpp3ds</b></li><li class="navelem"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#related">Related Functions</a> &#124;
<a href="classcpp3ds_1_1Transform-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cpp3ds::Transform Class Reference<div class="ingroups"><a class="el" href="group__graphics.htm">Graphics module</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Define a 3x3 transform matrix.  
 <a href="classcpp3ds_1_1Transform.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Transform_8hpp_source.htm">Transform.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7d2f16868583155c320fb4a2baa5e7b7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#a7d2f16868583155c320fb4a2baa5e7b7">Transform</a> ()</td></tr>
<tr class="memdesc:a7d2f16868583155c320fb4a2baa5e7b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a7d2f16868583155c320fb4a2baa5e7b7">More...</a><br /></td></tr>
<tr class="separator:a7d2f16868583155c320fb4a2baa5e7b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0af1a1b69aaf92df93e84f622cc7f9b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#af0af1a1b69aaf92df93e84f622cc7f9b">Transform</a> (float a00, float a01, float a02, float a10, float a11, float a12, float a20, float a21, float a22)</td></tr>
<tr class="memdesc:af0af1a1b69aaf92df93e84f622cc7f9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a transform from a 3x3 matrix.  <a href="#af0af1a1b69aaf92df93e84f622cc7f9b">More...</a><br /></td></tr>
<tr class="separator:af0af1a1b69aaf92df93e84f622cc7f9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7972cb3b6b2c346661c7d0f241e0e7ca"><td class="memItemLeft" align="right" valign="top">const float *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#a7972cb3b6b2c346661c7d0f241e0e7ca">getMatrix</a> () const </td></tr>
<tr class="memdesc:a7972cb3b6b2c346661c7d0f241e0e7ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the transform as a 4x4 matrix.  <a href="#a7972cb3b6b2c346661c7d0f241e0e7ca">More...</a><br /></td></tr>
<tr class="separator:a7972cb3b6b2c346661c7d0f241e0e7ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad846b699f435e432350138d14e40ddc5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#ad846b699f435e432350138d14e40ddc5">getInverse</a> () const </td></tr>
<tr class="memdesc:ad846b699f435e432350138d14e40ddc5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the inverse of the transform.  <a href="#ad846b699f435e432350138d14e40ddc5">More...</a><br /></td></tr>
<tr class="separator:ad846b699f435e432350138d14e40ddc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbce885237241be86158ba5978144f83"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#acbce885237241be86158ba5978144f83">transformPoint</a> (float x, float y) const </td></tr>
<tr class="memdesc:acbce885237241be86158ba5978144f83"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classcpp3ds_1_1Transform.htm" title="Define a 3x3 transform matrix. ">Transform</a> a 2D point.  <a href="#acbce885237241be86158ba5978144f83">More...</a><br /></td></tr>
<tr class="separator:acbce885237241be86158ba5978144f83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadbb490ec52a9b6ada1108983708652a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#aadbb490ec52a9b6ada1108983708652a">transformPoint</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;point) const </td></tr>
<tr class="memdesc:aadbb490ec52a9b6ada1108983708652a"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classcpp3ds_1_1Transform.htm" title="Define a 3x3 transform matrix. ">Transform</a> a 2D point.  <a href="#aadbb490ec52a9b6ada1108983708652a">More...</a><br /></td></tr>
<tr class="separator:aadbb490ec52a9b6ada1108983708652a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf17ba3a3e526874b9f41b11fd195126"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Rect.htm">FloatRect</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#acf17ba3a3e526874b9f41b11fd195126">transformRect</a> (const <a class="el" href="classcpp3ds_1_1Rect.htm">FloatRect</a> &amp;rectangle) const </td></tr>
<tr class="memdesc:acf17ba3a3e526874b9f41b11fd195126"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classcpp3ds_1_1Transform.htm" title="Define a 3x3 transform matrix. ">Transform</a> a rectangle.  <a href="#acf17ba3a3e526874b9f41b11fd195126">More...</a><br /></td></tr>
<tr class="separator:acf17ba3a3e526874b9f41b11fd195126"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5982cfd4ff0f029fa07dd6fad7e64bbe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#a5982cfd4ff0f029fa07dd6fad7e64bbe">combine</a> (const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;transform)</td></tr>
<tr class="memdesc:a5982cfd4ff0f029fa07dd6fad7e64bbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combine the current transform with another one.  <a href="#a5982cfd4ff0f029fa07dd6fad7e64bbe">More...</a><br /></td></tr>
<tr class="separator:a5982cfd4ff0f029fa07dd6fad7e64bbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1473bf903f2997e1ba79e4bac50e115c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#a1473bf903f2997e1ba79e4bac50e115c">translate</a> (float x, float y)</td></tr>
<tr class="memdesc:a1473bf903f2997e1ba79e4bac50e115c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combine the current transform with a translation.  <a href="#a1473bf903f2997e1ba79e4bac50e115c">More...</a><br /></td></tr>
<tr class="separator:a1473bf903f2997e1ba79e4bac50e115c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bb6f5c612f17ea968ad56f381d7d93f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#a8bb6f5c612f17ea968ad56f381d7d93f">translate</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;offset)</td></tr>
<tr class="memdesc:a8bb6f5c612f17ea968ad56f381d7d93f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combine the current transform with a translation.  <a href="#a8bb6f5c612f17ea968ad56f381d7d93f">More...</a><br /></td></tr>
<tr class="separator:a8bb6f5c612f17ea968ad56f381d7d93f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7b590f07b2e495d050035cfdc7ab4cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc">rotate</a> (float angle)</td></tr>
<tr class="memdesc:af7b590f07b2e495d050035cfdc7ab4cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combine the current transform with a rotation.  <a href="#af7b590f07b2e495d050035cfdc7ab4cc">More...</a><br /></td></tr>
<tr class="separator:af7b590f07b2e495d050035cfdc7ab4cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a268df2a63703d3c3f74e5f9543c17a37"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#a268df2a63703d3c3f74e5f9543c17a37">rotate</a> (float angle, float centerX, float centerY)</td></tr>
<tr class="memdesc:a268df2a63703d3c3f74e5f9543c17a37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combine the current transform with a rotation.  <a href="#a268df2a63703d3c3f74e5f9543c17a37">More...</a><br /></td></tr>
<tr class="separator:a268df2a63703d3c3f74e5f9543c17a37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16ddb1a514341275a2638dbd2144e11c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#a16ddb1a514341275a2638dbd2144e11c">rotate</a> (float angle, const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;center)</td></tr>
<tr class="memdesc:a16ddb1a514341275a2638dbd2144e11c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combine the current transform with a rotation.  <a href="#a16ddb1a514341275a2638dbd2144e11c">More...</a><br /></td></tr>
<tr class="separator:a16ddb1a514341275a2638dbd2144e11c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9569498a21e9b0462699e74a4a4c16b1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#a9569498a21e9b0462699e74a4a4c16b1">scale</a> (float scaleX, float scaleY)</td></tr>
<tr class="memdesc:a9569498a21e9b0462699e74a4a4c16b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combine the current transform with a scaling.  <a href="#a9569498a21e9b0462699e74a4a4c16b1">More...</a><br /></td></tr>
<tr class="separator:a9569498a21e9b0462699e74a4a4c16b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5fce0cb5eadca33cb84d260ff983db9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#ad5fce0cb5eadca33cb84d260ff983db9">scale</a> (float scaleX, float scaleY, float centerX, float centerY)</td></tr>
<tr class="memdesc:ad5fce0cb5eadca33cb84d260ff983db9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combine the current transform with a scaling.  <a href="#ad5fce0cb5eadca33cb84d260ff983db9">More...</a><br /></td></tr>
<tr class="separator:ad5fce0cb5eadca33cb84d260ff983db9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace74be9ed43aa066b189fc7035b06f4a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#ace74be9ed43aa066b189fc7035b06f4a">scale</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;factors)</td></tr>
<tr class="memdesc:ace74be9ed43aa066b189fc7035b06f4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combine the current transform with a scaling.  <a href="#ace74be9ed43aa066b189fc7035b06f4a">More...</a><br /></td></tr>
<tr class="separator:ace74be9ed43aa066b189fc7035b06f4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbf0ded45604f07ced0e9e327ddfdf93"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#adbf0ded45604f07ced0e9e327ddfdf93">scale</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;factors, const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;center)</td></tr>
<tr class="memdesc:adbf0ded45604f07ced0e9e327ddfdf93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combine the current transform with a scaling.  <a href="#adbf0ded45604f07ced0e9e327ddfdf93">More...</a><br /></td></tr>
<tr class="separator:adbf0ded45604f07ced0e9e327ddfdf93"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a294fcbaa222d4fd4acf8a5f8aacc11f9"><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#a294fcbaa222d4fd4acf8a5f8aacc11f9">Identity</a></td></tr>
<tr class="memdesc:a294fcbaa222d4fd4acf8a5f8aacc11f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">The identity transform (does nothing)  <a href="#a294fcbaa222d4fd4acf8a5f8aacc11f9">More...</a><br /></td></tr>
<tr class="separator:a294fcbaa222d4fd4acf8a5f8aacc11f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="related"></a>
Related Functions</h2></td></tr>
<tr><td class="ititle" colspan="2"><p>(Note that these are not member functions.) </p>
</td></tr>
<tr class="memitem:a85ea4e5539795f9b2ceb7d4b06736c8f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#a85ea4e5539795f9b2ceb7d4b06736c8f">operator*</a> (const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;left, const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;right)</td></tr>
<tr class="memdesc:a85ea4e5539795f9b2ceb7d4b06736c8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator * to combine two transforms.  <a href="#a85ea4e5539795f9b2ceb7d4b06736c8f">More...</a><br /></td></tr>
<tr class="separator:a85ea4e5539795f9b2ceb7d4b06736c8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a189899674616490f6250953ac581ac30"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#a189899674616490f6250953ac581ac30">operator*=</a> (<a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;left, const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;right)</td></tr>
<tr class="memdesc:a189899674616490f6250953ac581ac30"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator *= to combine two transforms.  <a href="#a189899674616490f6250953ac581ac30">More...</a><br /></td></tr>
<tr class="separator:a189899674616490f6250953ac581ac30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eeee49125c3c72c250062eef35ceb75"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transform.htm#a4eeee49125c3c72c250062eef35ceb75">operator*</a> (const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;left, const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;right)</td></tr>
<tr class="memdesc:a4eeee49125c3c72c250062eef35ceb75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator * to transform a point.  <a href="#a4eeee49125c3c72c250062eef35ceb75">More...</a><br /></td></tr>
<tr class="separator:a4eeee49125c3c72c250062eef35ceb75"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Define a 3x3 transform matrix. </p>
<p>A <a class="el" href="classcpp3ds_1_1Transform.htm" title="Define a 3x3 transform matrix. ">cpp3ds::Transform</a> specifies how to translate, rotate, scale, shear, project, whatever things.</p>
<p>In mathematical terms, it defines how to transform a coordinate system into another.</p>
<p>For example, if you apply a rotation transform to a sprite, the result will be a rotated sprite. And anything that is transformed by this rotation transform will be rotated the same way, according to its initial position.</p>
<p>Transforms are typically used for drawing. But they can also be used for any computation that requires to transform points between the local and global coordinate systems of an entity (like collision detection).</p>
<p>Example: </p><div class="fragment"><div class="line"><span class="comment">// define a translation transform</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1Transform.htm">cpp3ds::Transform</a> translation;</div>
<div class="line">translation.<a class="code" href="classcpp3ds_1_1Transform.htm#a1473bf903f2997e1ba79e4bac50e115c">translate</a>(20, 50);</div>
<div class="line"></div>
<div class="line"><span class="comment">// define a rotation transform</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1Transform.htm">cpp3ds::Transform</a> rotation;</div>
<div class="line">rotation.<a class="code" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc">rotate</a>(45);</div>
<div class="line"></div>
<div class="line"><span class="comment">// combine them</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1Transform.htm">cpp3ds::Transform</a> transform = translation * rotation;</div>
<div class="line"></div>
<div class="line"><span class="comment">// use the result to transform stuff...</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2f</a> point = transform.<a class="code" href="classcpp3ds_1_1Transform.htm#acbce885237241be86158ba5978144f83">transformPoint</a>(10, 20);</div>
<div class="line"><a class="code" href="classcpp3ds_1_1Rect.htm">cpp3ds::FloatRect</a> rect = transform.<a class="code" href="classcpp3ds_1_1Transform.htm#acf17ba3a3e526874b9f41b11fd195126">transformRect</a>(<a class="code" href="classcpp3ds_1_1Rect.htm">cpp3ds::FloatRect</a>(0, 0, 10, 100));</div>
</div><!-- fragment --><dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale. ">cpp3ds::Transformable</a>, <a class="el" href="classcpp3ds_1_1RenderStates.htm" title="Define the states used for drawing to a RenderTarget. ">cpp3ds::RenderStates</a> </dd></dl>

<p>Definition at line <a class="el" href="Transform_8hpp_source.htm#l00041">41</a> of file <a class="el" href="Transform_8hpp_source.htm">Transform.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a7d2f16868583155c320fb4a2baa5e7b7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::Transform::Transform </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>
<p>Creates an identity transform (a transform that does nothing). </p>

</div>
</div>
<a class="anchor" id="af0af1a1b69aaf92df93e84f622cc7f9b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::Transform::Transform </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a00</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a01</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a02</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a10</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a11</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a12</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a20</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a21</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a22</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct a transform from a 3x3 matrix. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a00</td><td>Element (0, 0) of the matrix </td></tr>
    <tr><td class="paramname">a01</td><td>Element (0, 1) of the matrix </td></tr>
    <tr><td class="paramname">a02</td><td>Element (0, 2) of the matrix </td></tr>
    <tr><td class="paramname">a10</td><td>Element (1, 0) of the matrix </td></tr>
    <tr><td class="paramname">a11</td><td>Element (1, 1) of the matrix </td></tr>
    <tr><td class="paramname">a12</td><td>Element (1, 2) of the matrix </td></tr>
    <tr><td class="paramname">a20</td><td>Element (2, 0) of the matrix </td></tr>
    <tr><td class="paramname">a21</td><td>Element (2, 1) of the matrix </td></tr>
    <tr><td class="paramname">a22</td><td>Element (2, 2) of the matrix </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a5982cfd4ff0f029fa07dd6fad7e64bbe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&amp; cpp3ds::Transform::combine </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td>
          <td class="paramname"><em>transform</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Combine the current transform with another one. </p>
<p>The result is a transform that is equivalent to applying *this followed by <em>transform</em>. Mathematically, it is equivalent to a matrix multiplication.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">transform</td><td><a class="el" href="classcpp3ds_1_1Transform.htm" title="Define a 3x3 transform matrix. ">Transform</a> to combine with this transform</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to *this </dd></dl>

</div>
</div>
<a class="anchor" id="ad846b699f435e432350138d14e40ddc5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> cpp3ds::Transform::getInverse </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the inverse of the transform. </p>
<p>If the inverse cannot be computed, an identity transform is returned.</p>
<dl class="section return"><dt>Returns</dt><dd>A new transform which is the inverse of self </dd></dl>

</div>
</div>
<a class="anchor" id="a7972cb3b6b2c346661c7d0f241e0e7ca"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const float* cpp3ds::Transform::getMatrix </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the transform as a 4x4 matrix. </p>
<p>This function returns a pointer to an array of 16 floats containing the transform elements as a 4x4 matrix, which is directly compatible with OpenGL functions.</p>
<div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1Transform.htm">cpp3ds::Transform</a> transform = ...;</div>
<div class="line">glLoadMatrixf(transform.<a class="code" href="classcpp3ds_1_1Transform.htm#a7972cb3b6b2c346661c7d0f241e0e7ca">getMatrix</a>());</div>
</div><!-- fragment --><dl class="section return"><dt>Returns</dt><dd>Pointer to a 4x4 matrix </dd></dl>

</div>
</div>
<a class="anchor" id="af7b590f07b2e495d050035cfdc7ab4cc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&amp; cpp3ds::Transform::rotate </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>angle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Combine the current transform with a rotation. </p>
<p>This function returns a reference to *this, so that calls can be chained. </p><div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1Transform.htm">cpp3ds::Transform</a> transform;</div>
<div class="line">transform.<a class="code" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc">rotate</a>(90).<a class="code" href="classcpp3ds_1_1Transform.htm#a1473bf903f2997e1ba79e4bac50e115c">translate</a>(50, 20);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">angle</td><td>Rotation angle, in degrees</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to *this</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transform.htm#a1473bf903f2997e1ba79e4bac50e115c" title="Combine the current transform with a translation. ">translate</a>, <a class="el" href="classcpp3ds_1_1Transform.htm#a9569498a21e9b0462699e74a4a4c16b1" title="Combine the current transform with a scaling. ">scale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a268df2a63703d3c3f74e5f9543c17a37"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&amp; cpp3ds::Transform::rotate </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>centerX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>centerY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Combine the current transform with a rotation. </p>
<p>The center of rotation is provided for convenience as a second argument, so that you can build rotations around arbitrary points more easily (and efficiently) than the usual translate(-center).rotate(angle).translate(center).</p>
<p>This function returns a reference to *this, so that calls can be chained. </p><div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1Transform.htm">cpp3ds::Transform</a> transform;</div>
<div class="line">transform.<a class="code" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc">rotate</a>(90, 8, 3).<a class="code" href="classcpp3ds_1_1Transform.htm#a1473bf903f2997e1ba79e4bac50e115c">translate</a>(50, 20);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">angle</td><td>Rotation angle, in degrees </td></tr>
    <tr><td class="paramname">centerX</td><td>X coordinate of the center of rotation </td></tr>
    <tr><td class="paramname">centerY</td><td>Y coordinate of the center of rotation</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to *this</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transform.htm#a1473bf903f2997e1ba79e4bac50e115c" title="Combine the current transform with a translation. ">translate</a>, <a class="el" href="classcpp3ds_1_1Transform.htm#a9569498a21e9b0462699e74a4a4c16b1" title="Combine the current transform with a scaling. ">scale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a16ddb1a514341275a2638dbd2144e11c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&amp; cpp3ds::Transform::rotate </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>center</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Combine the current transform with a rotation. </p>
<p>The center of rotation is provided for convenience as a second argument, so that you can build rotations around arbitrary points more easily (and efficiently) than the usual translate(-center).rotate(angle).translate(center).</p>
<p>This function returns a reference to *this, so that calls can be chained. </p><div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1Transform.htm">cpp3ds::Transform</a> transform;</div>
<div class="line">transform.<a class="code" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc">rotate</a>(90, <a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2f</a>(8, 3)).<a class="code" href="classcpp3ds_1_1Transform.htm#a1473bf903f2997e1ba79e4bac50e115c">translate</a>(<a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2f</a>(50, 20));</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">angle</td><td>Rotation angle, in degrees </td></tr>
    <tr><td class="paramname">center</td><td>Center of rotation</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to *this</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transform.htm#a1473bf903f2997e1ba79e4bac50e115c" title="Combine the current transform with a translation. ">translate</a>, <a class="el" href="classcpp3ds_1_1Transform.htm#a9569498a21e9b0462699e74a4a4c16b1" title="Combine the current transform with a scaling. ">scale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a9569498a21e9b0462699e74a4a4c16b1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&amp; cpp3ds::Transform::scale </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scaleX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scaleY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Combine the current transform with a scaling. </p>
<p>This function returns a reference to *this, so that calls can be chained. </p><div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1Transform.htm">cpp3ds::Transform</a> transform;</div>
<div class="line">transform.<a class="code" href="classcpp3ds_1_1Transform.htm#a9569498a21e9b0462699e74a4a4c16b1">scale</a>(2, 1).<a class="code" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc">rotate</a>(45);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scaleX</td><td>Scaling factor on the X axis </td></tr>
    <tr><td class="paramname">scaleY</td><td>Scaling factor on the Y axis</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to *this</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transform.htm#a1473bf903f2997e1ba79e4bac50e115c" title="Combine the current transform with a translation. ">translate</a>, <a class="el" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc" title="Combine the current transform with a rotation. ">rotate</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad5fce0cb5eadca33cb84d260ff983db9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&amp; cpp3ds::Transform::scale </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scaleX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scaleY</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>centerX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>centerY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Combine the current transform with a scaling. </p>
<p>The center of scaling is provided for convenience as a second argument, so that you can build scaling around arbitrary points more easily (and efficiently) than the usual translate(-center).scale(factors).translate(center).</p>
<p>This function returns a reference to *this, so that calls can be chained. </p><div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1Transform.htm">cpp3ds::Transform</a> transform;</div>
<div class="line">transform.<a class="code" href="classcpp3ds_1_1Transform.htm#a9569498a21e9b0462699e74a4a4c16b1">scale</a>(2, 1, 8, 3).<a class="code" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc">rotate</a>(45);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">scaleX</td><td>Scaling factor on X axis </td></tr>
    <tr><td class="paramname">scaleY</td><td>Scaling factor on Y axis </td></tr>
    <tr><td class="paramname">centerX</td><td>X coordinate of the center of scaling </td></tr>
    <tr><td class="paramname">centerY</td><td>Y coordinate of the center of scaling</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to *this</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transform.htm#a1473bf903f2997e1ba79e4bac50e115c" title="Combine the current transform with a translation. ">translate</a>, <a class="el" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc" title="Combine the current transform with a rotation. ">rotate</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ace74be9ed43aa066b189fc7035b06f4a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&amp; cpp3ds::Transform::scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>factors</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Combine the current transform with a scaling. </p>
<p>This function returns a reference to *this, so that calls can be chained. </p><div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1Transform.htm">cpp3ds::Transform</a> transform;</div>
<div class="line">transform.<a class="code" href="classcpp3ds_1_1Transform.htm#a9569498a21e9b0462699e74a4a4c16b1">scale</a>(<a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2f</a>(2, 1)).<a class="code" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc">rotate</a>(45);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">factors</td><td>Scaling factors</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to *this</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transform.htm#a1473bf903f2997e1ba79e4bac50e115c" title="Combine the current transform with a translation. ">translate</a>, <a class="el" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc" title="Combine the current transform with a rotation. ">rotate</a> </dd></dl>

</div>
</div>
<a class="anchor" id="adbf0ded45604f07ced0e9e327ddfdf93"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&amp; cpp3ds::Transform::scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>factors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>center</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Combine the current transform with a scaling. </p>
<p>The center of scaling is provided for convenience as a second argument, so that you can build scaling around arbitrary points more easily (and efficiently) than the usual translate(-center).scale(factors).translate(center).</p>
<p>This function returns a reference to *this, so that calls can be chained. </p><div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1Transform.htm">cpp3ds::Transform</a> transform;</div>
<div class="line">transform.<a class="code" href="classcpp3ds_1_1Transform.htm#a9569498a21e9b0462699e74a4a4c16b1">scale</a>(<a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2f</a>(2, 1), <a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2f</a>(8, 3)).<a class="code" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc">rotate</a>(45);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">factors</td><td>Scaling factors </td></tr>
    <tr><td class="paramname">center</td><td>Center of scaling</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to *this</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transform.htm#a1473bf903f2997e1ba79e4bac50e115c" title="Combine the current transform with a translation. ">translate</a>, <a class="el" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc" title="Combine the current transform with a rotation. ">rotate</a> </dd></dl>

</div>
</div>
<a class="anchor" id="acbce885237241be86158ba5978144f83"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> cpp3ds::Transform::transformPoint </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="classcpp3ds_1_1Transform.htm" title="Define a 3x3 transform matrix. ">Transform</a> a 2D point. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>X coordinate of the point to transform </td></tr>
    <tr><td class="paramname">y</td><td>Y coordinate of the point to transform</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Transformed point </dd></dl>

</div>
</div>
<a class="anchor" id="aadbb490ec52a9b6ada1108983708652a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> cpp3ds::Transform::transformPoint </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>point</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="classcpp3ds_1_1Transform.htm" title="Define a 3x3 transform matrix. ">Transform</a> a 2D point. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">point</td><td>Point to transform</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Transformed point </dd></dl>

</div>
</div>
<a class="anchor" id="acf17ba3a3e526874b9f41b11fd195126"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Rect.htm">FloatRect</a> cpp3ds::Transform::transformRect </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Rect.htm">FloatRect</a> &amp;&#160;</td>
          <td class="paramname"><em>rectangle</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="classcpp3ds_1_1Transform.htm" title="Define a 3x3 transform matrix. ">Transform</a> a rectangle. </p>
<p>Since SFML doesn't provide support for oriented rectangles, the result of this function is always an axis-aligned rectangle. Which means that if the transform contains a rotation, the bounding rectangle of the transformed rectangle is returned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rectangle</td><td>Rectangle to transform</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Transformed rectangle </dd></dl>

</div>
</div>
<a class="anchor" id="a1473bf903f2997e1ba79e4bac50e115c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&amp; cpp3ds::Transform::translate </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Combine the current transform with a translation. </p>
<p>This function returns a reference to *this, so that calls can be chained. </p><div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1Transform.htm">cpp3ds::Transform</a> transform;</div>
<div class="line">transform.<a class="code" href="classcpp3ds_1_1Transform.htm#a1473bf903f2997e1ba79e4bac50e115c">translate</a>(100, 200).<a class="code" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc">rotate</a>(45);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Offset to apply on X axis </td></tr>
    <tr><td class="paramname">y</td><td>Offset to apply on Y axis</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to *this</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc" title="Combine the current transform with a rotation. ">rotate</a>, <a class="el" href="classcpp3ds_1_1Transform.htm#a9569498a21e9b0462699e74a4a4c16b1" title="Combine the current transform with a scaling. ">scale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a8bb6f5c612f17ea968ad56f381d7d93f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&amp; cpp3ds::Transform::translate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>offset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Combine the current transform with a translation. </p>
<p>This function returns a reference to *this, so that calls can be chained. </p><div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1Transform.htm">cpp3ds::Transform</a> transform;</div>
<div class="line">transform.<a class="code" href="classcpp3ds_1_1Transform.htm#a1473bf903f2997e1ba79e4bac50e115c">translate</a>(<a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2f</a>(100, 200)).<a class="code" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc">rotate</a>(45);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">offset</td><td>Translation offset to apply</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to *this</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transform.htm#af7b590f07b2e495d050035cfdc7ab4cc" title="Combine the current transform with a rotation. ">rotate</a>, <a class="el" href="classcpp3ds_1_1Transform.htm#a9569498a21e9b0462699e74a4a4c16b1" title="Combine the current transform with a scaling. ">scale</a> </dd></dl>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a class="anchor" id="a85ea4e5539795f9b2ceb7d4b06736c8f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of binary operator * to combine two transforms. </p>
<p>This call is equivalent to calling Transform(left).combine(right).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (the first transform) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (the second transform)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>New combined transform </dd></dl>

</div>
</div>
<a class="anchor" id="a4eeee49125c3c72c250062eef35ceb75"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of binary operator * to transform a point. </p>
<p>This call is equivalent to calling left.transformPoint(right).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (the transform) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (the point to transform)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>New transformed point </dd></dl>

</div>
</div>
<a class="anchor" id="a189899674616490f6250953ac581ac30"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of binary operator *= to combine two transforms. </p>
<p>This call is equivalent to calling left.combine(right).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (the first transform) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (the second transform)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The combined transform </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a294fcbaa222d4fd4acf8a5f8aacc11f9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> cpp3ds::Transform::Identity</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The identity transform (does nothing) </p>

<p>Definition at line <a class="el" href="Transform_8hpp_source.htm#l00353">353</a> of file <a class="el" href="Transform_8hpp_source.htm">Transform.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Transform_8hpp_source.htm">Transform.hpp</a></li>
</ul>
</div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
