<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>cpp3ds</b></li><li class="navelem"><a class="el" href="classcpp3ds_1_1UdpSocket.htm">UdpSocket</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-types">Protected Types</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="classcpp3ds_1_1UdpSocket-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cpp3ds::UdpSocket Class Reference<div class="ingroups"><a class="el" href="group__network.htm">Network module</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Specialized socket using the UDP protocol.  
 <a href="classcpp3ds_1_1UdpSocket.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="UdpSocket_8hpp_source.htm">UdpSocket.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for cpp3ds::UdpSocket:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classcpp3ds_1_1UdpSocket.png" usemap="#cpp3ds::UdpSocket_map" alt=""/>
  <map id="cpp3ds::UdpSocket_map" name="cpp3ds::UdpSocket_map">
<area href="classcpp3ds_1_1Socket.htm" title="Base class for all the socket types. " alt="cpp3ds::Socket" shape="rect" coords="0,56,136,80"/>
<area href="classcpp3ds_1_1NonCopyable.htm" title="Utility class that makes any derived class non-copyable. " alt="cpp3ds::NonCopyable" shape="rect" coords="0,0,136,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a0a12711699d84d12f7b3f24484bf5496"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="classcpp3ds_1_1UdpSocket.htm#a0a12711699d84d12f7b3f24484bf5496a25c797fae3883981ad821a25cb480630">MaxDatagramSize</a> = 65507
 }<tr class="separator:a0a12711699d84d12f7b3f24484bf5496"><td class="memSeparator" colspan="2">&#160;</td></tr>
</td></tr>
<tr class="memitem:a601dfefbd970d87e98783aaa86bf1a1b"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1b">Status</a> { <br />
&#160;&#160;<a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1baf2c3bd432315430a33f6ee4dfc222b4d">Done</a>, 
<br />
&#160;&#160;<a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1ba1c15bf0efafddf4ee95a6a2effac0d0d">NotReady</a>, 
<br />
&#160;&#160;<a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1ba2485536d5c972bf419157e06784526bc">Partial</a>, 
<br />
&#160;&#160;<a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1bac282cc23e9d098723b4005a38e1a87e1">Disconnected</a>, 
<br />
&#160;&#160;<a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1baa321a73a60adf5a93387a148c0628c67">Error</a>
<br />
 }<tr class="memdesc:a601dfefbd970d87e98783aaa86bf1a1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Status codes that may be returned by socket functions.  <a href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1b">More...</a><br /></td></tr>
<tr class="separator:a601dfefbd970d87e98783aaa86bf1a1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</td></tr>
<tr class="memitem:a17686eeddd79f5c2205d1df3d10ffc17"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="classcpp3ds_1_1Socket.htm#a17686eeddd79f5c2205d1df3d10ffc17a56f4c21a110ef1ee35dc04621c4af139">AnyPort</a> = 0
 }<tr class="memdesc:a17686eeddd79f5c2205d1df3d10ffc17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Some special values used by sockets.  <a href="classcpp3ds_1_1Socket.htm#a17686eeddd79f5c2205d1df3d10ffc17">More...</a><br /></td></tr>
<tr class="separator:a17686eeddd79f5c2205d1df3d10ffc17"><td class="memSeparator" colspan="2">&#160;</td></tr>
</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a252b60a0f1fca376945af4d115ec92b0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1UdpSocket.htm#a252b60a0f1fca376945af4d115ec92b0">UdpSocket</a> ()</td></tr>
<tr class="memdesc:a252b60a0f1fca376945af4d115ec92b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a252b60a0f1fca376945af4d115ec92b0">More...</a><br /></td></tr>
<tr class="separator:a252b60a0f1fca376945af4d115ec92b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a716333ec77fa1694858a198efe4ef8bc"><td class="memItemLeft" align="right" valign="top">unsigned short&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1UdpSocket.htm#a716333ec77fa1694858a198efe4ef8bc">getLocalPort</a> () const </td></tr>
<tr class="memdesc:a716333ec77fa1694858a198efe4ef8bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the port to which the socket is bound locally.  <a href="#a716333ec77fa1694858a198efe4ef8bc">More...</a><br /></td></tr>
<tr class="separator:a716333ec77fa1694858a198efe4ef8bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3ac92e27cc335d604da7ae5b8f5a46a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1UdpSocket.htm#af3ac92e27cc335d604da7ae5b8f5a46a">bind</a> (unsigned short port)</td></tr>
<tr class="memdesc:af3ac92e27cc335d604da7ae5b8f5a46a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bind the socket to a specific port.  <a href="#af3ac92e27cc335d604da7ae5b8f5a46a">More...</a><br /></td></tr>
<tr class="separator:af3ac92e27cc335d604da7ae5b8f5a46a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a478c0327eb26ace648400d1ab5ac9bc7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1UdpSocket.htm#a478c0327eb26ace648400d1ab5ac9bc7">unbind</a> ()</td></tr>
<tr class="memdesc:a478c0327eb26ace648400d1ab5ac9bc7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unbind the socket from the local port to which it is bound.  <a href="#a478c0327eb26ace648400d1ab5ac9bc7">More...</a><br /></td></tr>
<tr class="separator:a478c0327eb26ace648400d1ab5ac9bc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac5de9f83bd7c3b39255661e31c72d9d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1UdpSocket.htm#aac5de9f83bd7c3b39255661e31c72d9d">send</a> (const void *data, std::size_t size, const <a class="el" href="classcpp3ds_1_1IpAddress.htm">IpAddress</a> &amp;remoteAddress, unsigned short remotePort)</td></tr>
<tr class="memdesc:aac5de9f83bd7c3b39255661e31c72d9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send raw data to a remote peer.  <a href="#aac5de9f83bd7c3b39255661e31c72d9d">More...</a><br /></td></tr>
<tr class="separator:aac5de9f83bd7c3b39255661e31c72d9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fce34b94706598da3b7cf7ad09f1650"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1UdpSocket.htm#a8fce34b94706598da3b7cf7ad09f1650">receive</a> (void *data, std::size_t size, std::size_t &amp;received, <a class="el" href="classcpp3ds_1_1IpAddress.htm">IpAddress</a> &amp;remoteAddress, unsigned short &amp;remotePort)</td></tr>
<tr class="memdesc:a8fce34b94706598da3b7cf7ad09f1650"><td class="mdescLeft">&#160;</td><td class="mdescRight">Receive raw data from a remote peer.  <a href="#a8fce34b94706598da3b7cf7ad09f1650">More...</a><br /></td></tr>
<tr class="separator:a8fce34b94706598da3b7cf7ad09f1650"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04960228ab5b12db2111a0dce57f27aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1UdpSocket.htm#a04960228ab5b12db2111a0dce57f27aa">send</a> (<a class="el" href="classcpp3ds_1_1Packet.htm">Packet</a> &amp;packet, const <a class="el" href="classcpp3ds_1_1IpAddress.htm">IpAddress</a> &amp;remoteAddress, unsigned short remotePort)</td></tr>
<tr class="memdesc:a04960228ab5b12db2111a0dce57f27aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a formatted packet of data to a remote peer.  <a href="#a04960228ab5b12db2111a0dce57f27aa">More...</a><br /></td></tr>
<tr class="separator:a04960228ab5b12db2111a0dce57f27aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65592870ae7ee3a6076bc6d7a46411b0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1UdpSocket.htm#a65592870ae7ee3a6076bc6d7a46411b0">receive</a> (<a class="el" href="classcpp3ds_1_1Packet.htm">Packet</a> &amp;packet, <a class="el" href="classcpp3ds_1_1IpAddress.htm">IpAddress</a> &amp;remoteAddress, unsigned short &amp;remotePort)</td></tr>
<tr class="memdesc:a65592870ae7ee3a6076bc6d7a46411b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Receive a formatted packet of data from a remote peer.  <a href="#a65592870ae7ee3a6076bc6d7a46411b0">More...</a><br /></td></tr>
<tr class="separator:a65592870ae7ee3a6076bc6d7a46411b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3cd80077dd3e1b72494bc4b8e3718285"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Socket.htm#a3cd80077dd3e1b72494bc4b8e3718285">setBlocking</a> (bool blocking)</td></tr>
<tr class="memdesc:a3cd80077dd3e1b72494bc4b8e3718285"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the blocking state of the socket.  <a href="#a3cd80077dd3e1b72494bc4b8e3718285">More...</a><br /></td></tr>
<tr class="separator:a3cd80077dd3e1b72494bc4b8e3718285"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa5a221512a34fd2f98832c3ed5beee6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Socket.htm#aaa5a221512a34fd2f98832c3ed5beee6">isBlocking</a> () const </td></tr>
<tr class="memdesc:aaa5a221512a34fd2f98832c3ed5beee6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell whether the socket is in blocking or non-blocking mode.  <a href="#aaa5a221512a34fd2f98832c3ed5beee6">More...</a><br /></td></tr>
<tr class="separator:aaa5a221512a34fd2f98832c3ed5beee6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-types"></a>
Protected Types</h2></td></tr>
<tr class="memitem:ad5a9f80bc46773627873e1aaaaaab9b8"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Socket.htm#ad5a9f80bc46773627873e1aaaaaab9b8">Type</a> { <br />
&#160;&#160;<a class="el" href="classcpp3ds_1_1Socket.htm#ad5a9f80bc46773627873e1aaaaaab9b8a3a89a166b8a1e48ad1ab31259b612cb1">Tcp</a>, 
<br />
&#160;&#160;<a class="el" href="classcpp3ds_1_1Socket.htm#ad5a9f80bc46773627873e1aaaaaab9b8a85d1f4677baec9091a88106387eb775e">Udp</a>
<br />
 }<tr class="memdesc:ad5a9f80bc46773627873e1aaaaaab9b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Types of protocols that the socket can use.  <a href="classcpp3ds_1_1Socket.htm#ad5a9f80bc46773627873e1aaaaaab9b8">More...</a><br /></td></tr>
<tr class="separator:ad5a9f80bc46773627873e1aaaaaab9b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:af222072b814175f170525b74b61d488b"><td class="memItemLeft" align="right" valign="top">SocketHandle&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Socket.htm#af222072b814175f170525b74b61d488b">getHandle</a> () const </td></tr>
<tr class="memdesc:af222072b814175f170525b74b61d488b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the internal handle of the socket.  <a href="#af222072b814175f170525b74b61d488b">More...</a><br /></td></tr>
<tr class="separator:af222072b814175f170525b74b61d488b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1bd488323f828ba1deb2359e24e3be6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Socket.htm#af1bd488323f828ba1deb2359e24e3be6">create</a> ()</td></tr>
<tr class="memdesc:af1bd488323f828ba1deb2359e24e3be6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the internal representation of the socket.  <a href="#af1bd488323f828ba1deb2359e24e3be6">More...</a><br /></td></tr>
<tr class="separator:af1bd488323f828ba1deb2359e24e3be6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fc86e2d9f31b3332e3a9d3b265c39f9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Socket.htm#a0fc86e2d9f31b3332e3a9d3b265c39f9">create</a> (SocketHandle handle)</td></tr>
<tr class="memdesc:a0fc86e2d9f31b3332e3a9d3b265c39f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the internal representation of the socket from a socket handle.  <a href="#a0fc86e2d9f31b3332e3a9d3b265c39f9">More...</a><br /></td></tr>
<tr class="separator:a0fc86e2d9f31b3332e3a9d3b265c39f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9310bbf627e713f6427809b7527fda1f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Socket.htm#a9310bbf627e713f6427809b7527fda1f">close</a> ()</td></tr>
<tr class="memdesc:a9310bbf627e713f6427809b7527fda1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Close the socket gracefully.  <a href="#a9310bbf627e713f6427809b7527fda1f">More...</a><br /></td></tr>
<tr class="separator:a9310bbf627e713f6427809b7527fda1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Specialized socket using the UDP protocol. </p>
<p>A UDP socket is a connectionless socket.</p>
<p>Instead of connecting once to a remote host, like TCP sockets, it can send to and receive from any host at any time.</p>
<p>It is a datagram protocol: bounded blocks of data (datagrams) are transfered over the network rather than a continuous stream of data (TCP). Therefore, one call to send will always match one call to receive (if the datagram is not lost), with the same data that was sent.</p>
<p>The UDP protocol is lightweight but unreliable. Unreliable means that datagrams may be duplicated, be lost or arrive reordered. However, if a datagram arrives, its data is guaranteed to be valid.</p>
<p>UDP is generally used for real-time communication (audio or video streaming, real-time games, etc.) where speed is crucial and lost data doesn't matter much.</p>
<p>Sending and receiving data can use either the low-level or the high-level functions. The low-level functions process a raw sequence of bytes, whereas the high-level interface uses packets (see <a class="el" href="classcpp3ds_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network. ">cpp3ds::Packet</a>), which are easier to use and provide more safety regarding the data that is exchanged. You can look at the <a class="el" href="classcpp3ds_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network. ">cpp3ds::Packet</a> class to get more details about how they work.</p>
<p>It is important to note that <a class="el" href="classcpp3ds_1_1UdpSocket.htm" title="Specialized socket using the UDP protocol. ">UdpSocket</a> is unable to send datagrams bigger than MaxDatagramSize. In this case, it returns an error and doesn't send anything. This applies to both raw data and packets. Indeed, even packets are unable to split and recompose data, due to the unreliability of the protocol (dropped, mixed or duplicated datagrams may lead to a big mess when trying to recompose a packet).</p>
<p>If the socket is bound to a port, it is automatically unbound from it when the socket is destroyed. However, you can unbind the socket explicitly with the Unbind function if necessary, to stop receiving messages or make the port available for other sockets.</p>
<p>Usage example: </p><div class="fragment"><div class="line"><span class="comment">// ----- The client -----</span></div>
<div class="line"></div>
<div class="line"><span class="comment">// Create a socket and bind it to the port 55001</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1UdpSocket.htm">cpp3ds::UdpSocket</a> socket;</div>
<div class="line">socket.<a class="code" href="classcpp3ds_1_1UdpSocket.htm#af3ac92e27cc335d604da7ae5b8f5a46a">bind</a>(55001);</div>
<div class="line"></div>
<div class="line"><span class="comment">// Send a message to 192.168.1.50 on port 55002</span></div>
<div class="line">std::string message = <span class="stringliteral">&quot;Hi, I am &quot;</span> + <a class="code" href="classcpp3ds_1_1IpAddress.htm#aa8a40578d9de7b05fd441dd5a49c3cc5">cpp3ds::IpAddress::getLocalAddress</a>().<a class="code" href="classcpp3ds_1_1IpAddress.htm#af138a4de0947e66daa45b284ea282cb8">toString</a>();</div>
<div class="line">socket.<a class="code" href="classcpp3ds_1_1UdpSocket.htm#aac5de9f83bd7c3b39255661e31c72d9d">send</a>(message.c_str(), message.size() + 1, <span class="stringliteral">&quot;192.168.1.50&quot;</span>, 55002);</div>
<div class="line"></div>
<div class="line"><span class="comment">// Receive an answer (most likely from 192.168.1.50, but could be anyone else)</span></div>
<div class="line"><span class="keywordtype">char</span> buffer[1024];</div>
<div class="line">std::size_t received = 0;</div>
<div class="line"><a class="code" href="classcpp3ds_1_1IpAddress.htm">cpp3ds::IpAddress</a> sender;</div>
<div class="line"><span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> port;</div>
<div class="line">socket.<a class="code" href="classcpp3ds_1_1UdpSocket.htm#a8fce34b94706598da3b7cf7ad09f1650">receive</a>(buffer, <span class="keyword">sizeof</span>(buffer), received, sender, port);</div>
<div class="line">std::cout &lt;&lt; sender.ToString() &lt;&lt; <span class="stringliteral">&quot; said: &quot;</span> &lt;&lt; buffer &lt;&lt; std::endl;</div>
<div class="line"></div>
<div class="line"><span class="comment">// ----- The server -----</span></div>
<div class="line"></div>
<div class="line"><span class="comment">// Create a socket and bind it to the port 55002</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1UdpSocket.htm">cpp3ds::UdpSocket</a> socket;</div>
<div class="line">socket.<a class="code" href="classcpp3ds_1_1UdpSocket.htm#af3ac92e27cc335d604da7ae5b8f5a46a">bind</a>(55002);</div>
<div class="line"></div>
<div class="line"><span class="comment">// Receive a message from anyone</span></div>
<div class="line"><span class="keywordtype">char</span> buffer[1024];</div>
<div class="line">std::size_t received = 0;</div>
<div class="line"><a class="code" href="classcpp3ds_1_1IpAddress.htm">cpp3ds::IpAddress</a> sender;</div>
<div class="line"><span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> port;</div>
<div class="line">socket.<a class="code" href="classcpp3ds_1_1UdpSocket.htm#a8fce34b94706598da3b7cf7ad09f1650">receive</a>(buffer, <span class="keyword">sizeof</span>(buffer), received, sender, port);</div>
<div class="line">std::cout &lt;&lt; sender.ToString() &lt;&lt; <span class="stringliteral">&quot; said: &quot;</span> &lt;&lt; buffer &lt;&lt; std::endl;</div>
<div class="line"></div>
<div class="line"><span class="comment">// Send an answer</span></div>
<div class="line">std::string message = <span class="stringliteral">&quot;Welcome &quot;</span> + sender.<a class="code" href="classcpp3ds_1_1IpAddress.htm#af138a4de0947e66daa45b284ea282cb8">toString</a>();</div>
<div class="line">socket.<a class="code" href="classcpp3ds_1_1UdpSocket.htm#aac5de9f83bd7c3b39255661e31c72d9d">send</a>(message.c_str(), message.size() + 1, sender, port);</div>
</div><!-- fragment --><dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Socket.htm" title="Base class for all the socket types. ">cpp3ds::Socket</a>, <a class="el" href="classcpp3ds_1_1TcpSocket.htm" title="Specialized socket using the TCP protocol. ">cpp3ds::TcpSocket</a>, <a class="el" href="classcpp3ds_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network. ">cpp3ds::Packet</a> </dd></dl>

<p>Definition at line <a class="el" href="UdpSocket_8hpp_source.htm#l00044">44</a> of file <a class="el" href="UdpSocket_8hpp_source.htm">UdpSocket.hpp</a>.</p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a class="anchor" id="a17686eeddd79f5c2205d1df3d10ffc17"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Some special values used by sockets. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a class="anchor" id="a17686eeddd79f5c2205d1df3d10ffc17a56f4c21a110ef1ee35dc04621c4af139"></a>AnyPort&#160;</td><td class="fielddoc">
<p>Special value that tells the system to pick any available port. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="Socket_8hpp_source.htm#l00065">65</a> of file <a class="el" href="Socket_8hpp_source.htm">Socket.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a0a12711699d84d12f7b3f24484bf5496"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a class="anchor" id="a0a12711699d84d12f7b3f24484bf5496a25c797fae3883981ad821a25cb480630"></a>MaxDatagramSize&#160;</td><td class="fielddoc">
<p>The maximum number of bytes that can be sent in a single UDP datagram. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="UdpSocket_8hpp_source.htm#l00051">51</a> of file <a class="el" href="UdpSocket_8hpp_source.htm">UdpSocket.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a601dfefbd970d87e98783aaa86bf1a1b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1b">cpp3ds::Socket::Status</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Status codes that may be returned by socket functions. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a class="anchor" id="a601dfefbd970d87e98783aaa86bf1a1baf2c3bd432315430a33f6ee4dfc222b4d"></a>Done&#160;</td><td class="fielddoc">
<p>The socket has sent / received the data. </p>
</td></tr>
<tr><td class="fieldname"><a class="anchor" id="a601dfefbd970d87e98783aaa86bf1a1ba1c15bf0efafddf4ee95a6a2effac0d0d"></a>NotReady&#160;</td><td class="fielddoc">
<p>The socket is not ready to send / receive data yet. </p>
</td></tr>
<tr><td class="fieldname"><a class="anchor" id="a601dfefbd970d87e98783aaa86bf1a1ba2485536d5c972bf419157e06784526bc"></a>Partial&#160;</td><td class="fielddoc">
<p>The socket sent a part of the data. </p>
</td></tr>
<tr><td class="fieldname"><a class="anchor" id="a601dfefbd970d87e98783aaa86bf1a1bac282cc23e9d098723b4005a38e1a87e1"></a>Disconnected&#160;</td><td class="fielddoc">
<p>The TCP socket has been disconnected. </p>
</td></tr>
<tr><td class="fieldname"><a class="anchor" id="a601dfefbd970d87e98783aaa86bf1a1baa321a73a60adf5a93387a148c0628c67"></a>Error&#160;</td><td class="fielddoc">
<p>An unexpected error happened. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="Socket_8hpp_source.htm#l00052">52</a> of file <a class="el" href="Socket_8hpp_source.htm">Socket.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="ad5a9f80bc46773627873e1aaaaaab9b8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classcpp3ds_1_1Socket.htm#ad5a9f80bc46773627873e1aaaaaab9b8">cpp3ds::Socket::Type</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Types of protocols that the socket can use. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a class="anchor" id="ad5a9f80bc46773627873e1aaaaaab9b8a3a89a166b8a1e48ad1ab31259b612cb1"></a>Tcp&#160;</td><td class="fielddoc">
<p>TCP protocol. </p>
</td></tr>
<tr><td class="fieldname"><a class="anchor" id="ad5a9f80bc46773627873e1aaaaaab9b8a85d1f4677baec9091a88106387eb775e"></a>Udp&#160;</td><td class="fielddoc">
<p>UDP protocol. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="Socket_8hpp_source.htm#l00113">113</a> of file <a class="el" href="Socket_8hpp_source.htm">Socket.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a252b60a0f1fca376945af4d115ec92b0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::UdpSocket::UdpSocket </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="af3ac92e27cc335d604da7ae5b8f5a46a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1b">Status</a> cpp3ds::UdpSocket::bind </td>
          <td>(</td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>port</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Bind the socket to a specific port. </p>
<p>Binding the socket to a port is necessary for being able to receive data on that port. You can use the special value <a class="el" href="classcpp3ds_1_1Socket.htm#a17686eeddd79f5c2205d1df3d10ffc17a56f4c21a110ef1ee35dc04621c4af139" title="Special value that tells the system to pick any available port. ">Socket::AnyPort</a> to tell the system to automatically pick an available port, and then call getLocalPort to retrieve the chosen port.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>Port to bind the socket to</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Status code</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1UdpSocket.htm#a478c0327eb26ace648400d1ab5ac9bc7" title="Unbind the socket from the local port to which it is bound. ">unbind</a>, <a class="el" href="classcpp3ds_1_1UdpSocket.htm#a716333ec77fa1694858a198efe4ef8bc" title="Get the port to which the socket is bound locally. ">getLocalPort</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a9310bbf627e713f6427809b7527fda1f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Socket::close </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Close the socket gracefully. </p>
<p>This function can only be accessed by derived classes. </p>

</div>
</div>
<a class="anchor" id="af1bd488323f828ba1deb2359e24e3be6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Socket::create </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create the internal representation of the socket. </p>
<p>This function can only be accessed by derived classes. </p>

</div>
</div>
<a class="anchor" id="a0fc86e2d9f31b3332e3a9d3b265c39f9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Socket::create </td>
          <td>(</td>
          <td class="paramtype">SocketHandle&#160;</td>
          <td class="paramname"><em>handle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create the internal representation of the socket from a socket handle. </p>
<p>This function can only be accessed by derived classes.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">handle</td><td>OS-specific handle of the socket to wrap </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af222072b814175f170525b74b61d488b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">SocketHandle cpp3ds::Socket::getHandle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the internal handle of the socket. </p>
<p>The returned handle may be invalid if the socket was not created yet (or already destroyed). This function can only be accessed by derived classes.</p>
<dl class="section return"><dt>Returns</dt><dd>The internal (OS-specific) handle of the socket </dd></dl>

</div>
</div>
<a class="anchor" id="a716333ec77fa1694858a198efe4ef8bc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short cpp3ds::UdpSocket::getLocalPort </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the port to which the socket is bound locally. </p>
<p>If the socket is not bound to a port, this function returns 0.</p>
<dl class="section return"><dt>Returns</dt><dd>Port to which the socket is bound</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1UdpSocket.htm#af3ac92e27cc335d604da7ae5b8f5a46a" title="Bind the socket to a specific port. ">bind</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aaa5a221512a34fd2f98832c3ed5beee6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::Socket::isBlocking </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tell whether the socket is in blocking or non-blocking mode. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the socket is blocking, false otherwise</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Socket.htm#a3cd80077dd3e1b72494bc4b8e3718285" title="Set the blocking state of the socket. ">setBlocking</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a8fce34b94706598da3b7cf7ad09f1650"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1b">Status</a> cpp3ds::UdpSocket::receive </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t &amp;&#160;</td>
          <td class="paramname"><em>received</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1IpAddress.htm">IpAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>remoteAddress</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short &amp;&#160;</td>
          <td class="paramname"><em>remotePort</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Receive raw data from a remote peer. </p>
<p>In blocking mode, this function will wait until some bytes are actually received. Be careful to use a buffer which is large enough for the data that you intend to receive, if it is too small then an error will be returned and <em>all</em> the data will be lost.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>Pointer to the array to fill with the received bytes </td></tr>
    <tr><td class="paramname">size</td><td>Maximum number of bytes that can be received </td></tr>
    <tr><td class="paramname">received</td><td>This variable is filled with the actual number of bytes received </td></tr>
    <tr><td class="paramname">remoteAddress</td><td>Address of the peer that sent the data </td></tr>
    <tr><td class="paramname">remotePort</td><td>Port of the peer that sent the data</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Status code</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1UdpSocket.htm#aac5de9f83bd7c3b39255661e31c72d9d" title="Send raw data to a remote peer. ">send</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a65592870ae7ee3a6076bc6d7a46411b0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1b">Status</a> cpp3ds::UdpSocket::receive </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1Packet.htm">Packet</a> &amp;&#160;</td>
          <td class="paramname"><em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1IpAddress.htm">IpAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>remoteAddress</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short &amp;&#160;</td>
          <td class="paramname"><em>remotePort</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Receive a formatted packet of data from a remote peer. </p>
<p>In blocking mode, this function will wait until the whole packet has been received.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">packet</td><td><a class="el" href="classcpp3ds_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network. ">Packet</a> to fill with the received data </td></tr>
    <tr><td class="paramname">remoteAddress</td><td>Address of the peer that sent the data </td></tr>
    <tr><td class="paramname">remotePort</td><td>Port of the peer that sent the data</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Status code</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1UdpSocket.htm#aac5de9f83bd7c3b39255661e31c72d9d" title="Send raw data to a remote peer. ">send</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aac5de9f83bd7c3b39255661e31c72d9d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1b">Status</a> cpp3ds::UdpSocket::send </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1IpAddress.htm">IpAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>remoteAddress</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>remotePort</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send raw data to a remote peer. </p>
<p>Make sure that <em>size</em> is not greater than <a class="el" href="classcpp3ds_1_1UdpSocket.htm#a0a12711699d84d12f7b3f24484bf5496a25c797fae3883981ad821a25cb480630" title="The maximum number of bytes that can be sent in a single UDP datagram. ">UdpSocket::MaxDatagramSize</a>, otherwise this function will fail and no data will be sent.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>Pointer to the sequence of bytes to send </td></tr>
    <tr><td class="paramname">size</td><td>Number of bytes to send </td></tr>
    <tr><td class="paramname">remoteAddress</td><td>Address of the receiver </td></tr>
    <tr><td class="paramname">remotePort</td><td>Port of the receiver to send the data to</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Status code</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1UdpSocket.htm#a8fce34b94706598da3b7cf7ad09f1650" title="Receive raw data from a remote peer. ">receive</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a04960228ab5b12db2111a0dce57f27aa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1b">Status</a> cpp3ds::UdpSocket::send </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1Packet.htm">Packet</a> &amp;&#160;</td>
          <td class="paramname"><em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1IpAddress.htm">IpAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>remoteAddress</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>remotePort</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a formatted packet of data to a remote peer. </p>
<p>Make sure that the packet size is not greater than <a class="el" href="classcpp3ds_1_1UdpSocket.htm#a0a12711699d84d12f7b3f24484bf5496a25c797fae3883981ad821a25cb480630" title="The maximum number of bytes that can be sent in a single UDP datagram. ">UdpSocket::MaxDatagramSize</a>, otherwise this function will fail and no data will be sent.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">packet</td><td><a class="el" href="classcpp3ds_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network. ">Packet</a> to send </td></tr>
    <tr><td class="paramname">remoteAddress</td><td>Address of the receiver </td></tr>
    <tr><td class="paramname">remotePort</td><td>Port of the receiver to send the data to</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Status code</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1UdpSocket.htm#a8fce34b94706598da3b7cf7ad09f1650" title="Receive raw data from a remote peer. ">receive</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a3cd80077dd3e1b72494bc4b8e3718285"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Socket::setBlocking </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>blocking</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the blocking state of the socket. </p>
<p>In blocking mode, calls will not return until they have completed their task. For example, a call to Receive in blocking mode won't return until some data was actually received. In non-blocking mode, calls will always return immediately, using the return code to signal whether there was data available or not. By default, all sockets are blocking.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">blocking</td><td>True to set the socket as blocking, false for non-blocking</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Socket.htm#aaa5a221512a34fd2f98832c3ed5beee6" title="Tell whether the socket is in blocking or non-blocking mode. ">isBlocking</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a478c0327eb26ace648400d1ab5ac9bc7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::UdpSocket::unbind </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Unbind the socket from the local port to which it is bound. </p>
<p>The port that the socket was previously using is immediately available after this function is called. If the socket is not bound to a port, this function has no effect.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1UdpSocket.htm#af3ac92e27cc335d604da7ae5b8f5a46a" title="Bind the socket to a specific port. ">bind</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="UdpSocket_8hpp_source.htm">UdpSocket.hpp</a></li>
</ul>
</div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
