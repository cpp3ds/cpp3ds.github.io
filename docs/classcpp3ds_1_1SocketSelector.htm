<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>cpp3ds</b></li><li class="navelem"><a class="el" href="classcpp3ds_1_1SocketSelector.htm">SocketSelector</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classcpp3ds_1_1SocketSelector-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cpp3ds::SocketSelector Class Reference<div class="ingroups"><a class="el" href="group__network.htm">Network module</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Multiplexer that allows to read from multiple sockets.  
 <a href="classcpp3ds_1_1SocketSelector.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="SocketSelector_8hpp_source.htm">SocketSelector.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:acf003a955479fc699f4397925b8a3fb6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SocketSelector.htm#acf003a955479fc699f4397925b8a3fb6">SocketSelector</a> ()</td></tr>
<tr class="memdesc:acf003a955479fc699f4397925b8a3fb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#acf003a955479fc699f4397925b8a3fb6">More...</a><br /></td></tr>
<tr class="separator:acf003a955479fc699f4397925b8a3fb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45e3c7dd436248193bd66b386f43c812"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SocketSelector.htm#a45e3c7dd436248193bd66b386f43c812">SocketSelector</a> (const <a class="el" href="classcpp3ds_1_1SocketSelector.htm">SocketSelector</a> &amp;copy)</td></tr>
<tr class="memdesc:a45e3c7dd436248193bd66b386f43c812"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <a href="#a45e3c7dd436248193bd66b386f43c812">More...</a><br /></td></tr>
<tr class="separator:a45e3c7dd436248193bd66b386f43c812"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0784ce5587cb4124c6531e09b4ca629"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SocketSelector.htm#af0784ce5587cb4124c6531e09b4ca629">~SocketSelector</a> ()</td></tr>
<tr class="memdesc:af0784ce5587cb4124c6531e09b4ca629"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#af0784ce5587cb4124c6531e09b4ca629">More...</a><br /></td></tr>
<tr class="separator:af0784ce5587cb4124c6531e09b4ca629"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba595e3c274f2a9c05905c5075cc9b77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SocketSelector.htm#aba595e3c274f2a9c05905c5075cc9b77">add</a> (<a class="el" href="classcpp3ds_1_1Socket.htm">Socket</a> &amp;socket)</td></tr>
<tr class="memdesc:aba595e3c274f2a9c05905c5075cc9b77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a new socket to the selector.  <a href="#aba595e3c274f2a9c05905c5075cc9b77">More...</a><br /></td></tr>
<tr class="separator:aba595e3c274f2a9c05905c5075cc9b77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69b6875f9a0a6543ea3db863d121e6b7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SocketSelector.htm#a69b6875f9a0a6543ea3db863d121e6b7">remove</a> (<a class="el" href="classcpp3ds_1_1Socket.htm">Socket</a> &amp;socket)</td></tr>
<tr class="memdesc:a69b6875f9a0a6543ea3db863d121e6b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove a socket from the selector.  <a href="#a69b6875f9a0a6543ea3db863d121e6b7">More...</a><br /></td></tr>
<tr class="separator:a69b6875f9a0a6543ea3db863d121e6b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6b3d57c2a13c0db1a0bfd25d91615c1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SocketSelector.htm#af6b3d57c2a13c0db1a0bfd25d91615c1">clear</a> ()</td></tr>
<tr class="memdesc:af6b3d57c2a13c0db1a0bfd25d91615c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove all the sockets stored in the selector.  <a href="#af6b3d57c2a13c0db1a0bfd25d91615c1">More...</a><br /></td></tr>
<tr class="separator:af6b3d57c2a13c0db1a0bfd25d91615c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64d003eafbe3a8634a38787f83b335f9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SocketSelector.htm#a64d003eafbe3a8634a38787f83b335f9">wait</a> (<a class="el" href="classcpp3ds_1_1Time.htm">Time</a> timeout=<a class="el" href="classcpp3ds_1_1Time.htm#aa51aba4b5fcb6735dd44042fad1f0a8e">Time::Zero</a>)</td></tr>
<tr class="memdesc:a64d003eafbe3a8634a38787f83b335f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait until one or more sockets are ready to receive.  <a href="#a64d003eafbe3a8634a38787f83b335f9">More...</a><br /></td></tr>
<tr class="separator:a64d003eafbe3a8634a38787f83b335f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8551efea3c19a122f63a1a6597c1dbd1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SocketSelector.htm#a8551efea3c19a122f63a1a6597c1dbd1">isReady</a> (<a class="el" href="classcpp3ds_1_1Socket.htm">Socket</a> &amp;socket) const </td></tr>
<tr class="memdesc:a8551efea3c19a122f63a1a6597c1dbd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test a socket to know if it is ready to receive data.  <a href="#a8551efea3c19a122f63a1a6597c1dbd1">More...</a><br /></td></tr>
<tr class="separator:a8551efea3c19a122f63a1a6597c1dbd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1183a315da05314c6ee7baa4626dceab"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1SocketSelector.htm">SocketSelector</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SocketSelector.htm#a1183a315da05314c6ee7baa4626dceab">operator=</a> (const <a class="el" href="classcpp3ds_1_1SocketSelector.htm">SocketSelector</a> &amp;right)</td></tr>
<tr class="memdesc:a1183a315da05314c6ee7baa4626dceab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of assignment operator.  <a href="#a1183a315da05314c6ee7baa4626dceab">More...</a><br /></td></tr>
<tr class="separator:a1183a315da05314c6ee7baa4626dceab"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Multiplexer that allows to read from multiple sockets. </p>
<p><a class="el" href="classcpp3ds_1_1Socket.htm" title="Base class for all the socket types. ">Socket</a> selectors provide a way to wait until some data is available on a set of sockets, instead of just one.</p>
<p>This is convenient when you have multiple sockets that may possibly receive data, but you don't know which one will be ready first. In particular, it avoids to use a thread for each socket; with selectors, a single thread can handle all the sockets.</p>
<p>All types of sockets can be used in a selector: </p><ul>
<li><a class="el" href="classcpp3ds_1_1TcpListener.htm" title="Socket that listens to new TCP connections. ">cpp3ds::TcpListener</a> </li>
<li><a class="el" href="classcpp3ds_1_1TcpSocket.htm" title="Specialized socket using the TCP protocol. ">cpp3ds::TcpSocket</a> </li>
<li><a class="el" href="classcpp3ds_1_1UdpSocket.htm" title="Specialized socket using the UDP protocol. ">cpp3ds::UdpSocket</a></li>
</ul>
<p>A selector doesn't store its own copies of the sockets (socket classes are not copyable anyway), it simply keeps a reference to the original sockets that you pass to the "add" function. Therefore, you can't use the selector as a socket container, you must store them outside and make sure that they are alive as long as they are used in the selector.</p>
<p>Using a selector is simple: </p><ul>
<li>populate the selector with all the sockets that you want to observe </li>
<li>make it wait until there is data available on any of the sockets </li>
<li>test each socket to find out which ones are ready</li>
</ul>
<p>Usage example: </p><div class="fragment"><div class="line"><span class="comment">// Create a socket to listen to new connections</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1TcpListener.htm">cpp3ds::TcpListener</a> listener;</div>
<div class="line">listener.<a class="code" href="classcpp3ds_1_1TcpListener.htm#a0ca0b4a517e97f695c1c46515ee0dcef">listen</a>(55001);</div>
<div class="line"></div>
<div class="line"><span class="comment">// Create a list to store the future clients</span></div>
<div class="line">std::list&lt;cpp3ds::TcpSocket*&gt; clients;</div>
<div class="line"></div>
<div class="line"><span class="comment">// Create a selector</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1SocketSelector.htm">cpp3ds::SocketSelector</a> selector;</div>
<div class="line"></div>
<div class="line"><span class="comment">// Add the listener to the selector</span></div>
<div class="line">selector.<a class="code" href="classcpp3ds_1_1SocketSelector.htm#aba595e3c274f2a9c05905c5075cc9b77">add</a>(listener);</div>
<div class="line"></div>
<div class="line"><span class="comment">// Endless loop that waits for new connections</span></div>
<div class="line"><span class="keywordflow">while</span> (running)</div>
<div class="line">{</div>
<div class="line">    <span class="comment">// Make the selector wait for data on any socket</span></div>
<div class="line">    <span class="keywordflow">if</span> (selector.<a class="code" href="classcpp3ds_1_1SocketSelector.htm#a64d003eafbe3a8634a38787f83b335f9">wait</a>())</div>
<div class="line">    {</div>
<div class="line">        <span class="comment">// Test the listener</span></div>
<div class="line">        <span class="keywordflow">if</span> (selector.<a class="code" href="classcpp3ds_1_1SocketSelector.htm#a8551efea3c19a122f63a1a6597c1dbd1">isReady</a>(listener))</div>
<div class="line">        {</div>
<div class="line">            <span class="comment">// The listener is ready: there is a pending connection</span></div>
<div class="line">            <a class="code" href="classcpp3ds_1_1TcpSocket.htm">cpp3ds::TcpSocket</a>* client = <span class="keyword">new</span> <a class="code" href="classcpp3ds_1_1TcpSocket.htm">cpp3ds::TcpSocket</a>;</div>
<div class="line">            <span class="keywordflow">if</span> (listener.<a class="code" href="classcpp3ds_1_1TcpListener.htm#aca9456db39f493a14f49245ab941a74c">accept</a>(*client) == <a class="code" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1baf2c3bd432315430a33f6ee4dfc222b4d">cpp3ds::Socket::Done</a>)</div>
<div class="line">            {</div>
<div class="line">                <span class="comment">// Add the new client to the clients list</span></div>
<div class="line">                clients.push_back(client);</div>
<div class="line"></div>
<div class="line">                <span class="comment">// Add the new client to the selector so that we will</span></div>
<div class="line">                <span class="comment">// be notified when he sends something</span></div>
<div class="line">                selector.<a class="code" href="classcpp3ds_1_1SocketSelector.htm#aba595e3c274f2a9c05905c5075cc9b77">add</a>(*client);</div>
<div class="line">            }</div>
<div class="line">            <span class="keywordflow">else</span></div>
<div class="line">            {</div>
<div class="line">                <span class="comment">// Error, we won&#39;t get a new connection, delete the socket</span></div>
<div class="line">                <span class="keyword">delete</span> client;</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line">        <span class="keywordflow">else</span></div>
<div class="line">        {</div>
<div class="line">            <span class="comment">// The listener socket is not ready, test all other sockets (the clients)</span></div>
<div class="line">            <span class="keywordflow">for</span> (std::list&lt;cpp3ds::TcpSocket*&gt;::iterator it = clients.begin(); it != clients.end(); ++it)</div>
<div class="line">            {</div>
<div class="line">                <a class="code" href="classcpp3ds_1_1TcpSocket.htm">cpp3ds::TcpSocket</a>&amp; client = **it;</div>
<div class="line">                <span class="keywordflow">if</span> (selector.<a class="code" href="classcpp3ds_1_1SocketSelector.htm#a8551efea3c19a122f63a1a6597c1dbd1">isReady</a>(client))</div>
<div class="line">                {</div>
<div class="line">                    <span class="comment">// The client has sent some data, we can receive it</span></div>
<div class="line">                    <a class="code" href="classcpp3ds_1_1Packet.htm">cpp3ds::Packet</a> packet;</div>
<div class="line">                    <span class="keywordflow">if</span> (client.<a class="code" href="classcpp3ds_1_1TcpSocket.htm#a0000c0e9e8d686787ea0c5e71f8b4729">receive</a>(packet) == <a class="code" href="classcpp3ds_1_1Socket.htm#a601dfefbd970d87e98783aaa86bf1a1baf2c3bd432315430a33f6ee4dfc222b4d">cpp3ds::Socket::Done</a>)</div>
<div class="line">                    {</div>
<div class="line">                        ...</div>
<div class="line">                    }</div>
<div class="line">                }</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line">}</div>
</div><!-- fragment --><dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Socket.htm" title="Base class for all the socket types. ">cpp3ds::Socket</a> </dd></dl>

<p>Definition at line <a class="el" href="SocketSelector_8hpp_source.htm#l00042">42</a> of file <a class="el" href="SocketSelector_8hpp_source.htm">SocketSelector.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="acf003a955479fc699f4397925b8a3fb6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::SocketSelector::SocketSelector </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a class="anchor" id="a45e3c7dd436248193bd66b386f43c812"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::SocketSelector::SocketSelector </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1SocketSelector.htm">SocketSelector</a> &amp;&#160;</td>
          <td class="paramname"><em>copy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">copy</td><td>Instance to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af0784ce5587cb4124c6531e09b4ca629"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::SocketSelector::~SocketSelector </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="aba595e3c274f2a9c05905c5075cc9b77"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SocketSelector::add </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1Socket.htm">Socket</a> &amp;&#160;</td>
          <td class="paramname"><em>socket</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a new socket to the selector. </p>
<p>This function keeps a weak reference to the socket, so you have to make sure that the socket is not destroyed while it is stored in the selector. This function does nothing if the socket is not valid.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">socket</td><td>Reference to the socket to add</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SocketSelector.htm#a69b6875f9a0a6543ea3db863d121e6b7" title="Remove a socket from the selector. ">remove</a>, <a class="el" href="classcpp3ds_1_1SocketSelector.htm#af6b3d57c2a13c0db1a0bfd25d91615c1" title="Remove all the sockets stored in the selector. ">clear</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af6b3d57c2a13c0db1a0bfd25d91615c1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SocketSelector::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove all the sockets stored in the selector. </p>
<p>This function doesn't destroy any instance, it simply removes all the references that the selector has to external sockets.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SocketSelector.htm#aba595e3c274f2a9c05905c5075cc9b77" title="Add a new socket to the selector. ">add</a>, <a class="el" href="classcpp3ds_1_1SocketSelector.htm#a69b6875f9a0a6543ea3db863d121e6b7" title="Remove a socket from the selector. ">remove</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a8551efea3c19a122f63a1a6597c1dbd1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::SocketSelector::isReady </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1Socket.htm">Socket</a> &amp;&#160;</td>
          <td class="paramname"><em>socket</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Test a socket to know if it is ready to receive data. </p>
<p>This function must be used after a call to Wait, to know which sockets are ready to receive data. If a socket is ready, a call to receive will never block because we know that there is data available to read. Note that if this function returns true for a <a class="el" href="classcpp3ds_1_1TcpListener.htm" title="Socket that listens to new TCP connections. ">TcpListener</a>, this means that it is ready to accept a new connection.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">socket</td><td><a class="el" href="classcpp3ds_1_1Socket.htm" title="Base class for all the socket types. ">Socket</a> to test</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the socket is ready to read, false otherwise</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SocketSelector.htm#a8551efea3c19a122f63a1a6597c1dbd1" title="Test a socket to know if it is ready to receive data. ">isReady</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a1183a315da05314c6ee7baa4626dceab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1SocketSelector.htm">SocketSelector</a>&amp; cpp3ds::SocketSelector::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1SocketSelector.htm">SocketSelector</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Overload of assignment operator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">right</td><td>Instance to assign</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to self </dd></dl>

</div>
</div>
<a class="anchor" id="a69b6875f9a0a6543ea3db863d121e6b7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SocketSelector::remove </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1Socket.htm">Socket</a> &amp;&#160;</td>
          <td class="paramname"><em>socket</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove a socket from the selector. </p>
<p>This function doesn't destroy the socket, it simply removes the reference that the selector has to it.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">socket</td><td>Reference to the socket to remove</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SocketSelector.htm#aba595e3c274f2a9c05905c5075cc9b77" title="Add a new socket to the selector. ">add</a>, <a class="el" href="classcpp3ds_1_1SocketSelector.htm#af6b3d57c2a13c0db1a0bfd25d91615c1" title="Remove all the sockets stored in the selector. ">clear</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a64d003eafbe3a8634a38787f83b335f9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::SocketSelector::wait </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>timeout</em> = <code><a class="el" href="classcpp3ds_1_1Time.htm#aa51aba4b5fcb6735dd44042fad1f0a8e">Time::Zero</a></code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait until one or more sockets are ready to receive. </p>
<p>This function returns as soon as at least one socket has some data available to be received. To know which sockets are ready, use the isReady function. If you use a timeout and no socket is ready before the timeout is over, the function returns false.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">timeout</td><td>Maximum time to wait, (use <a class="el" href="classcpp3ds_1_1Time.htm#aa51aba4b5fcb6735dd44042fad1f0a8e" title="Predefined &quot;zero&quot; time value. ">Time::Zero</a> for infinity)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if there are sockets ready, false otherwise</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SocketSelector.htm#a8551efea3c19a122f63a1a6597c1dbd1" title="Test a socket to know if it is ready to receive data. ">isReady</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="SocketSelector_8hpp_source.htm">SocketSelector.hpp</a></li>
</ul>
</div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
