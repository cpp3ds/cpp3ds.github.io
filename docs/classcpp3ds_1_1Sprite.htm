<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>cpp3ds</b></li><li class="navelem"><a class="el" href="classcpp3ds_1_1Sprite.htm">Sprite</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classcpp3ds_1_1Sprite-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cpp3ds::Sprite Class Reference<div class="ingroups"><a class="el" href="group__graphics.htm">Graphics module</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classcpp3ds_1_1Drawable.htm" title="Abstract base class for objects that can be drawn to a render target. ">Drawable</a> representation of a texture, with its own transformations, color, etc.  
 <a href="classcpp3ds_1_1Sprite.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Sprite_8hpp_source.htm">Sprite.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for cpp3ds::Sprite:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classcpp3ds_1_1Sprite.png" usemap="#cpp3ds::Sprite_map" alt=""/>
  <map id="cpp3ds::Sprite_map" name="cpp3ds::Sprite_map">
<area href="classcpp3ds_1_1Drawable.htm" title="Abstract base class for objects that can be drawn to a render target. " alt="cpp3ds::Drawable" shape="rect" coords="0,0,140,24"/>
<area href="classcpp3ds_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale. " alt="cpp3ds::Transformable" shape="rect" coords="150,0,290,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae76f165197c61a19d2841be043c8f45f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Sprite.htm#ae76f165197c61a19d2841be043c8f45f">Sprite</a> ()</td></tr>
<tr class="memdesc:ae76f165197c61a19d2841be043c8f45f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#ae76f165197c61a19d2841be043c8f45f">More...</a><br /></td></tr>
<tr class="separator:ae76f165197c61a19d2841be043c8f45f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c86a70289a1769da5fb86bf40d47d15"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Sprite.htm#a9c86a70289a1769da5fb86bf40d47d15">Sprite</a> (const <a class="el" href="classcpp3ds_1_1Texture.htm">Texture</a> &amp;texture)</td></tr>
<tr class="memdesc:a9c86a70289a1769da5fb86bf40d47d15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the sprite from a source texture.  <a href="#a9c86a70289a1769da5fb86bf40d47d15">More...</a><br /></td></tr>
<tr class="separator:a9c86a70289a1769da5fb86bf40d47d15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcf6b496d4643d516b013e5f60b0ed8d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Sprite.htm#adcf6b496d4643d516b013e5f60b0ed8d">Sprite</a> (const <a class="el" href="classcpp3ds_1_1Texture.htm">Texture</a> &amp;texture, const <a class="el" href="classcpp3ds_1_1Rect.htm">IntRect</a> &amp;rectangle)</td></tr>
<tr class="memdesc:adcf6b496d4643d516b013e5f60b0ed8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the sprite from a sub-rectangle of a source texture.  <a href="#adcf6b496d4643d516b013e5f60b0ed8d">More...</a><br /></td></tr>
<tr class="separator:adcf6b496d4643d516b013e5f60b0ed8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a042e6e2bfdebc9dc3f6aee971adee71f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Sprite.htm#a042e6e2bfdebc9dc3f6aee971adee71f">setTexture</a> (const <a class="el" href="classcpp3ds_1_1Texture.htm">Texture</a> &amp;texture, bool resetRect=false)</td></tr>
<tr class="memdesc:a042e6e2bfdebc9dc3f6aee971adee71f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the source texture of the sprite.  <a href="#a042e6e2bfdebc9dc3f6aee971adee71f">More...</a><br /></td></tr>
<tr class="separator:a042e6e2bfdebc9dc3f6aee971adee71f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad01054886d7fa50427fda4d851a021eb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Sprite.htm#ad01054886d7fa50427fda4d851a021eb">setTextureRect</a> (const <a class="el" href="classcpp3ds_1_1Rect.htm">IntRect</a> &amp;rectangle)</td></tr>
<tr class="memdesc:ad01054886d7fa50427fda4d851a021eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the sub-rectangle of the texture that the sprite will display.  <a href="#ad01054886d7fa50427fda4d851a021eb">More...</a><br /></td></tr>
<tr class="separator:ad01054886d7fa50427fda4d851a021eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a276c595e227455cf4ba13c1ac639c357"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Sprite.htm#a276c595e227455cf4ba13c1ac639c357">setColor</a> (const <a class="el" href="classcpp3ds_1_1Color.htm">Color</a> &amp;color)</td></tr>
<tr class="memdesc:a276c595e227455cf4ba13c1ac639c357"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the global color of the sprite.  <a href="#a276c595e227455cf4ba13c1ac639c357">More...</a><br /></td></tr>
<tr class="separator:a276c595e227455cf4ba13c1ac639c357"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ecb506159be70154b3912ec6a75bc78"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classcpp3ds_1_1Texture.htm">Texture</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Sprite.htm#a9ecb506159be70154b3912ec6a75bc78">getTexture</a> () const </td></tr>
<tr class="memdesc:a9ecb506159be70154b3912ec6a75bc78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the source texture of the sprite.  <a href="#a9ecb506159be70154b3912ec6a75bc78">More...</a><br /></td></tr>
<tr class="separator:a9ecb506159be70154b3912ec6a75bc78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a535c64cbd4fba6579e3864817b431eac"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classcpp3ds_1_1Rect.htm">IntRect</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Sprite.htm#a535c64cbd4fba6579e3864817b431eac">getTextureRect</a> () const </td></tr>
<tr class="memdesc:a535c64cbd4fba6579e3864817b431eac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the sub-rectangle of the texture displayed by the sprite.  <a href="#a535c64cbd4fba6579e3864817b431eac">More...</a><br /></td></tr>
<tr class="separator:a535c64cbd4fba6579e3864817b431eac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f10f92599bbdef578f468e0037a00d4"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classcpp3ds_1_1Color.htm">Color</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Sprite.htm#a0f10f92599bbdef578f468e0037a00d4">getColor</a> () const </td></tr>
<tr class="memdesc:a0f10f92599bbdef578f468e0037a00d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the global color of the sprite.  <a href="#a0f10f92599bbdef578f468e0037a00d4">More...</a><br /></td></tr>
<tr class="separator:a0f10f92599bbdef578f468e0037a00d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d6532bd7c836e9227bfd79ef6f012b5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Rect.htm">FloatRect</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Sprite.htm#a9d6532bd7c836e9227bfd79ef6f012b5">getLocalBounds</a> () const </td></tr>
<tr class="memdesc:a9d6532bd7c836e9227bfd79ef6f012b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the local bounding rectangle of the entity.  <a href="#a9d6532bd7c836e9227bfd79ef6f012b5">More...</a><br /></td></tr>
<tr class="separator:a9d6532bd7c836e9227bfd79ef6f012b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a65facdeab1ca27fc374a9319fe3023"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Rect.htm">FloatRect</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Sprite.htm#a2a65facdeab1ca27fc374a9319fe3023">getGlobalBounds</a> () const </td></tr>
<tr class="memdesc:a2a65facdeab1ca27fc374a9319fe3023"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the global bounding rectangle of the entity.  <a href="#a2a65facdeab1ca27fc374a9319fe3023">More...</a><br /></td></tr>
<tr class="separator:a2a65facdeab1ca27fc374a9319fe3023"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0df8bfd22ab55cfdfab9770bcffadfe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#af0df8bfd22ab55cfdfab9770bcffadfe">setPosition</a> (float x, float y)</td></tr>
<tr class="memdesc:af0df8bfd22ab55cfdfab9770bcffadfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">set the position of the object  <a href="#af0df8bfd22ab55cfdfab9770bcffadfe">More...</a><br /></td></tr>
<tr class="separator:af0df8bfd22ab55cfdfab9770bcffadfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afea4746f8d78e80cad0f8e04e6b495cc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#afea4746f8d78e80cad0f8e04e6b495cc">setPosition</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;position)</td></tr>
<tr class="memdesc:afea4746f8d78e80cad0f8e04e6b495cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">set the position of the object  <a href="#afea4746f8d78e80cad0f8e04e6b495cc">More...</a><br /></td></tr>
<tr class="separator:afea4746f8d78e80cad0f8e04e6b495cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bee0e07dcb3e14e242ef1b97e65676f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#a0bee0e07dcb3e14e242ef1b97e65676f">setRotation</a> (float angle)</td></tr>
<tr class="memdesc:a0bee0e07dcb3e14e242ef1b97e65676f"><td class="mdescLeft">&#160;</td><td class="mdescRight">set the orientation of the object  <a href="#a0bee0e07dcb3e14e242ef1b97e65676f">More...</a><br /></td></tr>
<tr class="separator:a0bee0e07dcb3e14e242ef1b97e65676f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96d70580c2a948bd37f1dc24434a7ffa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#a96d70580c2a948bd37f1dc24434a7ffa">setScale</a> (float factorX, float factorY)</td></tr>
<tr class="memdesc:a96d70580c2a948bd37f1dc24434a7ffa"><td class="mdescLeft">&#160;</td><td class="mdescRight">set the scale factors of the object  <a href="#a96d70580c2a948bd37f1dc24434a7ffa">More...</a><br /></td></tr>
<tr class="separator:a96d70580c2a948bd37f1dc24434a7ffa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a976d27019193ab8bdbdfe3b56bcfc44b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#a976d27019193ab8bdbdfe3b56bcfc44b">setScale</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;factors)</td></tr>
<tr class="memdesc:a976d27019193ab8bdbdfe3b56bcfc44b"><td class="mdescLeft">&#160;</td><td class="mdescRight">set the scale factors of the object  <a href="#a976d27019193ab8bdbdfe3b56bcfc44b">More...</a><br /></td></tr>
<tr class="separator:a976d27019193ab8bdbdfe3b56bcfc44b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad07559681311bcb866b1f18af3a5a678"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#ad07559681311bcb866b1f18af3a5a678">setOrigin</a> (float x, float y)</td></tr>
<tr class="memdesc:ad07559681311bcb866b1f18af3a5a678"><td class="mdescLeft">&#160;</td><td class="mdescRight">set the local origin of the object  <a href="#ad07559681311bcb866b1f18af3a5a678">More...</a><br /></td></tr>
<tr class="separator:ad07559681311bcb866b1f18af3a5a678"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace3177585f4945c98cadc44c88b6707c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#ace3177585f4945c98cadc44c88b6707c">setOrigin</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;origin)</td></tr>
<tr class="memdesc:ace3177585f4945c98cadc44c88b6707c"><td class="mdescLeft">&#160;</td><td class="mdescRight">set the local origin of the object  <a href="#ace3177585f4945c98cadc44c88b6707c">More...</a><br /></td></tr>
<tr class="separator:ace3177585f4945c98cadc44c88b6707c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab091488ce1efde6e23f7d0cc6d22ad93"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#ab091488ce1efde6e23f7d0cc6d22ad93">getPosition</a> () const </td></tr>
<tr class="memdesc:ab091488ce1efde6e23f7d0cc6d22ad93"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the position of the object  <a href="#ab091488ce1efde6e23f7d0cc6d22ad93">More...</a><br /></td></tr>
<tr class="separator:ab091488ce1efde6e23f7d0cc6d22ad93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f209775ef8aa1e5a97c7a2e8573d4e7"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#a7f209775ef8aa1e5a97c7a2e8573d4e7">getRotation</a> () const </td></tr>
<tr class="memdesc:a7f209775ef8aa1e5a97c7a2e8573d4e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the orientation of the object  <a href="#a7f209775ef8aa1e5a97c7a2e8573d4e7">More...</a><br /></td></tr>
<tr class="separator:a7f209775ef8aa1e5a97c7a2e8573d4e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7258282e8cfda64a391a183a3030f5e4"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#a7258282e8cfda64a391a183a3030f5e4">getScale</a> () const </td></tr>
<tr class="memdesc:a7258282e8cfda64a391a183a3030f5e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the current scale of the object  <a href="#a7258282e8cfda64a391a183a3030f5e4">More...</a><br /></td></tr>
<tr class="separator:a7258282e8cfda64a391a183a3030f5e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab52a4361b7aabbb3c2579e587447e323"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#ab52a4361b7aabbb3c2579e587447e323">getOrigin</a> () const </td></tr>
<tr class="memdesc:ab52a4361b7aabbb3c2579e587447e323"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the local origin of the object  <a href="#ab52a4361b7aabbb3c2579e587447e323">More...</a><br /></td></tr>
<tr class="separator:ab52a4361b7aabbb3c2579e587447e323"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d11e8eba5f5ab6a862c542286c8a623"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#a5d11e8eba5f5ab6a862c542286c8a623">move</a> (float offsetX, float offsetY)</td></tr>
<tr class="memdesc:a5d11e8eba5f5ab6a862c542286c8a623"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move the object by a given offset.  <a href="#a5d11e8eba5f5ab6a862c542286c8a623">More...</a><br /></td></tr>
<tr class="separator:a5d11e8eba5f5ab6a862c542286c8a623"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32e6c710f1433f2fc999d0d36ffc8a60"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#a32e6c710f1433f2fc999d0d36ffc8a60">move</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;offset)</td></tr>
<tr class="memdesc:a32e6c710f1433f2fc999d0d36ffc8a60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move the object by a given offset.  <a href="#a32e6c710f1433f2fc999d0d36ffc8a60">More...</a><br /></td></tr>
<tr class="separator:a32e6c710f1433f2fc999d0d36ffc8a60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d6dda7157fc97c44977a36027183d19"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#a8d6dda7157fc97c44977a36027183d19">rotate</a> (float angle)</td></tr>
<tr class="memdesc:a8d6dda7157fc97c44977a36027183d19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate the object.  <a href="#a8d6dda7157fc97c44977a36027183d19">More...</a><br /></td></tr>
<tr class="separator:a8d6dda7157fc97c44977a36027183d19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a880a2992760790f5b7805eab2aab7429"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#a880a2992760790f5b7805eab2aab7429">scale</a> (float factorX, float factorY)</td></tr>
<tr class="memdesc:a880a2992760790f5b7805eab2aab7429"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale the object.  <a href="#a880a2992760790f5b7805eab2aab7429">More...</a><br /></td></tr>
<tr class="separator:a880a2992760790f5b7805eab2aab7429"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ca6457f41e3c113c64ac2e52897a3cb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#a2ca6457f41e3c113c64ac2e52897a3cb">scale</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;factor)</td></tr>
<tr class="memdesc:a2ca6457f41e3c113c64ac2e52897a3cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale the object.  <a href="#a2ca6457f41e3c113c64ac2e52897a3cb">More...</a><br /></td></tr>
<tr class="separator:a2ca6457f41e3c113c64ac2e52897a3cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acffcfee14fd56f58527284b1776f2bdd"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#acffcfee14fd56f58527284b1776f2bdd">getTransform</a> () const </td></tr>
<tr class="memdesc:acffcfee14fd56f58527284b1776f2bdd"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the combined transform of the object  <a href="#acffcfee14fd56f58527284b1776f2bdd">More...</a><br /></td></tr>
<tr class="separator:acffcfee14fd56f58527284b1776f2bdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4dee1e0678514e3bfd79654dbccf614"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Transformable.htm#aa4dee1e0678514e3bfd79654dbccf614">getInverseTransform</a> () const </td></tr>
<tr class="memdesc:aa4dee1e0678514e3bfd79654dbccf614"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the inverse of the combined transform of the object  <a href="#aa4dee1e0678514e3bfd79654dbccf614">More...</a><br /></td></tr>
<tr class="separator:aa4dee1e0678514e3bfd79654dbccf614"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classcpp3ds_1_1Drawable.htm" title="Abstract base class for objects that can be drawn to a render target. ">Drawable</a> representation of a texture, with its own transformations, color, etc. </p>
<p><a class="el" href="classcpp3ds_1_1Sprite.htm" title="Drawable representation of a texture, with its own transformations, color, etc. ">cpp3ds::Sprite</a> is a drawable class that allows to easily display a texture (or a part of it) on a render target.</p>
<p>It inherits all the functions from <a class="el" href="classcpp3ds_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale. ">cpp3ds::Transformable</a>: position, rotation, scale, origin. It also adds sprite-specific properties such as the texture to use, the part of it to display, and some convenience functions to change the overall color of the sprite, or to get its bounding rectangle.</p>
<p><a class="el" href="classcpp3ds_1_1Sprite.htm" title="Drawable representation of a texture, with its own transformations, color, etc. ">cpp3ds::Sprite</a> works in combination with the <a class="el" href="classcpp3ds_1_1Texture.htm" title="some things could easily be broken/////// ">cpp3ds::Texture</a> class, which loads and provides the pixel data of a given texture.</p>
<p>The separation of <a class="el" href="classcpp3ds_1_1Sprite.htm" title="Drawable representation of a texture, with its own transformations, color, etc. ">cpp3ds::Sprite</a> and <a class="el" href="classcpp3ds_1_1Texture.htm" title="some things could easily be broken/////// ">cpp3ds::Texture</a> allows more flexibility and better performances: indeed a <a class="el" href="classcpp3ds_1_1Texture.htm" title="some things could easily be broken/////// ">cpp3ds::Texture</a> is a heavy resource, and any operation on it is slow (often too slow for real-time applications). On the other side, a <a class="el" href="classcpp3ds_1_1Sprite.htm" title="Drawable representation of a texture, with its own transformations, color, etc. ">cpp3ds::Sprite</a> is a lightweight object which can use the pixel data of a <a class="el" href="classcpp3ds_1_1Texture.htm" title="some things could easily be broken/////// ">cpp3ds::Texture</a> and draw it with its own transformation/color/blending attributes.</p>
<p>It is important to note that the <a class="el" href="classcpp3ds_1_1Sprite.htm" title="Drawable representation of a texture, with its own transformations, color, etc. ">cpp3ds::Sprite</a> instance doesn't copy the texture that it uses, it only keeps a reference to it. Thus, a <a class="el" href="classcpp3ds_1_1Texture.htm" title="some things could easily be broken/////// ">cpp3ds::Texture</a> must not be destroyed while it is used by a <a class="el" href="classcpp3ds_1_1Sprite.htm" title="Drawable representation of a texture, with its own transformations, color, etc. ">cpp3ds::Sprite</a> (i.e. never write a function that uses a local <a class="el" href="classcpp3ds_1_1Texture.htm" title="some things could easily be broken/////// ">cpp3ds::Texture</a> instance for creating a sprite).</p>
<p>See also the note on coordinates and undistorted rendering in <a class="el" href="classcpp3ds_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale. ">cpp3ds::Transformable</a>.</p>
<p>Usage example: </p><div class="fragment"><div class="line"><span class="comment">// Declare and load a texture</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1Texture.htm">cpp3ds::Texture</a> texture;</div>
<div class="line">texture.<a class="code" href="classcpp3ds_1_1Texture.htm#ad0bfd0212c8372ea062716ff8f1ba5f4">loadFromFile</a>(<span class="stringliteral">&quot;texture.png&quot;</span>);</div>
<div class="line"></div>
<div class="line"><span class="comment">// Create a sprite</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1Sprite.htm">cpp3ds::Sprite</a> sprite;</div>
<div class="line">sprite.<a class="code" href="classcpp3ds_1_1Sprite.htm#a042e6e2bfdebc9dc3f6aee971adee71f">setTexture</a>(texture);</div>
<div class="line">sprite.<a class="code" href="classcpp3ds_1_1Sprite.htm#ad01054886d7fa50427fda4d851a021eb">setTextureRect</a>(<a class="code" href="classcpp3ds_1_1Rect.htm">cpp3ds::IntRect</a>(10, 10, 50, 30));</div>
<div class="line">sprite.<a class="code" href="classcpp3ds_1_1Sprite.htm#a276c595e227455cf4ba13c1ac639c357">setColor</a>(<a class="code" href="classcpp3ds_1_1Color.htm">cpp3ds::Color</a>(255, 255, 255, 200));</div>
<div class="line">sprite.<a class="code" href="classcpp3ds_1_1Transformable.htm#af0df8bfd22ab55cfdfab9770bcffadfe">setPosition</a>(100, 25);</div>
<div class="line"></div>
<div class="line"><span class="comment">// Draw it</span></div>
<div class="line">window.draw(sprite);</div>
</div><!-- fragment --><dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Texture.htm" title="some things could easily be broken/////// ">cpp3ds::Texture</a>, <a class="el" href="classcpp3ds_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale. ">cpp3ds::Transformable</a> </dd></dl>

<p>Definition at line <a class="el" href="Sprite_8hpp_source.htm#l00046">46</a> of file <a class="el" href="Sprite_8hpp_source.htm">Sprite.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ae76f165197c61a19d2841be043c8f45f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::Sprite::Sprite </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>
<p>Creates an empty sprite with no source texture. </p>

</div>
</div>
<a class="anchor" id="a9c86a70289a1769da5fb86bf40d47d15"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::Sprite::Sprite </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Texture.htm">Texture</a> &amp;&#160;</td>
          <td class="paramname"><em>texture</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Construct the sprite from a source texture. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">texture</td><td>Source texture</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Sprite.htm#a042e6e2bfdebc9dc3f6aee971adee71f" title="Change the source texture of the sprite. ">setTexture</a> </dd></dl>

</div>
</div>
<a class="anchor" id="adcf6b496d4643d516b013e5f60b0ed8d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::Sprite::Sprite </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Texture.htm">Texture</a> &amp;&#160;</td>
          <td class="paramname"><em>texture</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Rect.htm">IntRect</a> &amp;&#160;</td>
          <td class="paramname"><em>rectangle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct the sprite from a sub-rectangle of a source texture. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">texture</td><td>Source texture </td></tr>
    <tr><td class="paramname">rectangle</td><td>Sub-rectangle of the texture to assign to the sprite</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Sprite.htm#a042e6e2bfdebc9dc3f6aee971adee71f" title="Change the source texture of the sprite. ">setTexture</a>, <a class="el" href="classcpp3ds_1_1Sprite.htm#ad01054886d7fa50427fda4d851a021eb" title="Set the sub-rectangle of the texture that the sprite will display. ">setTextureRect</a> </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a0f10f92599bbdef578f468e0037a00d4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classcpp3ds_1_1Color.htm">Color</a>&amp; cpp3ds::Sprite::getColor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the global color of the sprite. </p>
<dl class="section return"><dt>Returns</dt><dd>Global color of the sprite</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Sprite.htm#a276c595e227455cf4ba13c1ac639c357" title="Set the global color of the sprite. ">setColor</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a2a65facdeab1ca27fc374a9319fe3023"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Rect.htm">FloatRect</a> cpp3ds::Sprite::getGlobalBounds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the global bounding rectangle of the entity. </p>
<p>The returned rectangle is in global coordinates, which means that it takes in account the transformations (translation, rotation, scale, ...) that are applied to the entity. In other words, this function returns the bounds of the sprite in the global 2D world's coordinate system.</p>
<dl class="section return"><dt>Returns</dt><dd>Global bounding rectangle of the entity </dd></dl>

</div>
</div>
<a class="anchor" id="aa4dee1e0678514e3bfd79654dbccf614"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&amp; cpp3ds::Transformable::getInverseTransform </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get the inverse of the combined transform of the object </p>
<dl class="section return"><dt>Returns</dt><dd>Inverse of the combined transformations applied to the object</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#acffcfee14fd56f58527284b1776f2bdd" title="get the combined transform of the object ">getTransform</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a9d6532bd7c836e9227bfd79ef6f012b5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Rect.htm">FloatRect</a> cpp3ds::Sprite::getLocalBounds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the local bounding rectangle of the entity. </p>
<p>The returned rectangle is in local coordinates, which means that it ignores the transformations (translation, rotation, scale, ...) that are applied to the entity. In other words, this function returns the bounds of the entity in the entity's coordinate system.</p>
<dl class="section return"><dt>Returns</dt><dd>Local bounding rectangle of the entity </dd></dl>

</div>
</div>
<a class="anchor" id="ab52a4361b7aabbb3c2579e587447e323"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a>&amp; cpp3ds::Transformable::getOrigin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get the local origin of the object </p>
<dl class="section return"><dt>Returns</dt><dd>Current origin</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#ad07559681311bcb866b1f18af3a5a678" title="set the local origin of the object ">setOrigin</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab091488ce1efde6e23f7d0cc6d22ad93"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a>&amp; cpp3ds::Transformable::getPosition </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get the position of the object </p>
<dl class="section return"><dt>Returns</dt><dd>Current position</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#af0df8bfd22ab55cfdfab9770bcffadfe" title="set the position of the object ">setPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a7f209775ef8aa1e5a97c7a2e8573d4e7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float cpp3ds::Transformable::getRotation </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get the orientation of the object </p>
<p>The rotation is always in the range [0, 360].</p>
<dl class="section return"><dt>Returns</dt><dd>Current rotation, in degrees</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#a0bee0e07dcb3e14e242ef1b97e65676f" title="set the orientation of the object ">setRotation</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a7258282e8cfda64a391a183a3030f5e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a>&amp; cpp3ds::Transformable::getScale </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get the current scale of the object </p>
<dl class="section return"><dt>Returns</dt><dd>Current scale factors</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#a96d70580c2a948bd37f1dc24434a7ffa" title="set the scale factors of the object ">setScale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a9ecb506159be70154b3912ec6a75bc78"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classcpp3ds_1_1Texture.htm">Texture</a>* cpp3ds::Sprite::getTexture </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the source texture of the sprite. </p>
<p>If the sprite has no source texture, a NULL pointer is returned. The returned pointer is const, which means that you can't modify the texture when you retrieve it with this function.</p>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the sprite's texture</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Sprite.htm#a042e6e2bfdebc9dc3f6aee971adee71f" title="Change the source texture of the sprite. ">setTexture</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a535c64cbd4fba6579e3864817b431eac"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classcpp3ds_1_1Rect.htm">IntRect</a>&amp; cpp3ds::Sprite::getTextureRect </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the sub-rectangle of the texture displayed by the sprite. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classcpp3ds_1_1Texture.htm" title="some things could easily be broken/////// ">Texture</a> rectangle of the sprite</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Sprite.htm#ad01054886d7fa50427fda4d851a021eb" title="Set the sub-rectangle of the texture that the sprite will display. ">setTextureRect</a> </dd></dl>

</div>
</div>
<a class="anchor" id="acffcfee14fd56f58527284b1776f2bdd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classcpp3ds_1_1Transform.htm">Transform</a>&amp; cpp3ds::Transformable::getTransform </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get the combined transform of the object </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classcpp3ds_1_1Transform.htm" title="Define a 3x3 transform matrix. ">Transform</a> combining the position/rotation/scale/origin of the object</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#aa4dee1e0678514e3bfd79654dbccf614" title="get the inverse of the combined transform of the object ">getInverseTransform</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a5d11e8eba5f5ab6a862c542286c8a623"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Transformable::move </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>offsetX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>offsetY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move the object by a given offset. </p>
<p>This function adds to the current position of the object, unlike setPosition which overwrites it. Thus, it is equivalent to the following code: </p><div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2f</a> pos = <span class="keywordtype">object</span>.getPosition();</div>
<div class="line"><span class="keywordtype">object</span>.setPosition(pos.<a class="code" href="classcpp3ds_1_1Vector2.htm#a885e90c72a635e737d15161a09990bda">x</a> + offsetX, pos.<a class="code" href="classcpp3ds_1_1Vector2.htm#ab7aad1adb2634e43c06996a4b5e27074">y</a> + offsetY);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">offsetX</td><td>X offset </td></tr>
    <tr><td class="paramname">offsetY</td><td>Y offset</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#af0df8bfd22ab55cfdfab9770bcffadfe" title="set the position of the object ">setPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a32e6c710f1433f2fc999d0d36ffc8a60"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Transformable::move </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>offset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move the object by a given offset. </p>
<p>This function adds to the current position of the object, unlike setPosition which overwrites it. Thus, it is equivalent to the following code: </p><div class="fragment"><div class="line"><span class="keywordtype">object</span>.setPosition(<span class="keywordtype">object</span>.<a class="code" href="classcpp3ds_1_1Transformable.htm#ab091488ce1efde6e23f7d0cc6d22ad93">getPosition</a>() + offset);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">offset</td><td>Offset</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#af0df8bfd22ab55cfdfab9770bcffadfe" title="set the position of the object ">setPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a8d6dda7157fc97c44977a36027183d19"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Transformable::rotate </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>angle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rotate the object. </p>
<p>This function adds to the current rotation of the object, unlike setRotation which overwrites it. Thus, it is equivalent to the following code: </p><div class="fragment"><div class="line"><span class="keywordtype">object</span>.setRotation(<span class="keywordtype">object</span>.<a class="code" href="classcpp3ds_1_1Transformable.htm#a7f209775ef8aa1e5a97c7a2e8573d4e7">getRotation</a>() + angle);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">angle</td><td>Angle of rotation, in degrees </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a880a2992760790f5b7805eab2aab7429"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Transformable::scale </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>factorX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>factorY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Scale the object. </p>
<p>This function multiplies the current scale of the object, unlike setScale which overwrites it. Thus, it is equivalent to the following code: </p><div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2f</a> scale = <span class="keywordtype">object</span>.getScale();</div>
<div class="line"><span class="keywordtype">object</span>.setScale(scale.<a class="code" href="classcpp3ds_1_1Vector2.htm#a885e90c72a635e737d15161a09990bda">x</a> * factorX, scale.<a class="code" href="classcpp3ds_1_1Vector2.htm#ab7aad1adb2634e43c06996a4b5e27074">y</a> * factorY);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">factorX</td><td>Horizontal scale factor </td></tr>
    <tr><td class="paramname">factorY</td><td>Vertical scale factor</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#a96d70580c2a948bd37f1dc24434a7ffa" title="set the scale factors of the object ">setScale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a2ca6457f41e3c113c64ac2e52897a3cb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Transformable::scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>factor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Scale the object. </p>
<p>This function multiplies the current scale of the object, unlike setScale which overwrites it. Thus, it is equivalent to the following code: </p><div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2f</a> scale = <span class="keywordtype">object</span>.getScale();</div>
<div class="line"><span class="keywordtype">object</span>.setScale(scale.<a class="code" href="classcpp3ds_1_1Vector2.htm#a885e90c72a635e737d15161a09990bda">x</a> * factor.x, scale.<a class="code" href="classcpp3ds_1_1Vector2.htm#ab7aad1adb2634e43c06996a4b5e27074">y</a> * factor.y);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">factor</td><td>Scale factors</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#a96d70580c2a948bd37f1dc24434a7ffa" title="set the scale factors of the object ">setScale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a276c595e227455cf4ba13c1ac639c357"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Sprite::setColor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>color</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the global color of the sprite. </p>
<p>This color is modulated (multiplied) with the sprite's texture. It can be used to colorize the sprite, or change its global opacity. By default, the sprite's color is opaque white.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">color</td><td>New color of the sprite</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Sprite.htm#a0f10f92599bbdef578f468e0037a00d4" title="Get the global color of the sprite. ">getColor</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad07559681311bcb866b1f18af3a5a678"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Transformable::setOrigin </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>set the local origin of the object </p>
<p>The origin of an object defines the center point for all transformations (position, scale, rotation). The coordinates of this point must be relative to the top-left corner of the object, and ignore all transformations (position, scale, rotation). The default origin of a transformable object is (0, 0).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>X coordinate of the new origin </td></tr>
    <tr><td class="paramname">y</td><td>Y coordinate of the new origin</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#ab52a4361b7aabbb3c2579e587447e323" title="get the local origin of the object ">getOrigin</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ace3177585f4945c98cadc44c88b6707c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Transformable::setOrigin </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>origin</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>set the local origin of the object </p>
<p>The origin of an object defines the center point for all transformations (position, scale, rotation). The coordinates of this point must be relative to the top-left corner of the object, and ignore all transformations (position, scale, rotation). The default origin of a transformable object is (0, 0).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">origin</td><td>New origin</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#ab52a4361b7aabbb3c2579e587447e323" title="get the local origin of the object ">getOrigin</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af0df8bfd22ab55cfdfab9770bcffadfe"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Transformable::setPosition </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>set the position of the object </p>
<p>This function completely overwrites the previous position. See the move function to apply an offset based on the previous position instead. The default position of a transformable object is (0, 0).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>X coordinate of the new position </td></tr>
    <tr><td class="paramname">y</td><td>Y coordinate of the new position</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#a5d11e8eba5f5ab6a862c542286c8a623" title="Move the object by a given offset. ">move</a>, <a class="el" href="classcpp3ds_1_1Transformable.htm#ab091488ce1efde6e23f7d0cc6d22ad93" title="get the position of the object ">getPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="afea4746f8d78e80cad0f8e04e6b495cc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Transformable::setPosition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>position</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>set the position of the object </p>
<p>This function completely overwrites the previous position. See the move function to apply an offset based on the previous position instead. The default position of a transformable object is (0, 0).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>New position</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#a5d11e8eba5f5ab6a862c542286c8a623" title="Move the object by a given offset. ">move</a>, <a class="el" href="classcpp3ds_1_1Transformable.htm#ab091488ce1efde6e23f7d0cc6d22ad93" title="get the position of the object ">getPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0bee0e07dcb3e14e242ef1b97e65676f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Transformable::setRotation </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>angle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>set the orientation of the object </p>
<p>This function completely overwrites the previous rotation. See the rotate function to add an angle based on the previous rotation instead. The default rotation of a transformable object is 0.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">angle</td><td>New rotation, in degrees</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#a8d6dda7157fc97c44977a36027183d19" title="Rotate the object. ">rotate</a>, <a class="el" href="classcpp3ds_1_1Transformable.htm#a7f209775ef8aa1e5a97c7a2e8573d4e7" title="get the orientation of the object ">getRotation</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a96d70580c2a948bd37f1dc24434a7ffa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Transformable::setScale </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>factorX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>factorY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>set the scale factors of the object </p>
<p>This function completely overwrites the previous scale. See the scale function to add a factor based on the previous scale instead. The default scale of a transformable object is (1, 1).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">factorX</td><td>New horizontal scale factor </td></tr>
    <tr><td class="paramname">factorY</td><td>New vertical scale factor</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#a880a2992760790f5b7805eab2aab7429" title="Scale the object. ">scale</a>, <a class="el" href="classcpp3ds_1_1Transformable.htm#a7258282e8cfda64a391a183a3030f5e4" title="get the current scale of the object ">getScale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a976d27019193ab8bdbdfe3b56bcfc44b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Transformable::setScale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>factors</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>set the scale factors of the object </p>
<p>This function completely overwrites the previous scale. See the scale function to add a factor based on the previous scale instead. The default scale of a transformable object is (1, 1).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">factors</td><td>New scale factors</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Transformable.htm#a880a2992760790f5b7805eab2aab7429" title="Scale the object. ">scale</a>, <a class="el" href="classcpp3ds_1_1Transformable.htm#a7258282e8cfda64a391a183a3030f5e4" title="get the current scale of the object ">getScale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a042e6e2bfdebc9dc3f6aee971adee71f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Sprite::setTexture </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Texture.htm">Texture</a> &amp;&#160;</td>
          <td class="paramname"><em>texture</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>resetRect</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change the source texture of the sprite. </p>
<p>The <em>texture</em> argument refers to a texture that must exist as long as the sprite uses it. Indeed, the sprite doesn't store its own copy of the texture, but rather keeps a pointer to the one that you passed to this function. If the source texture is destroyed and the sprite tries to use it, the behaviour is undefined. If <em>resetRect</em> is true, the TextureRect property of the sprite is automatically adjusted to the size of the new texture. If it is false, the texture rect is left unchanged.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">texture</td><td>New texture </td></tr>
    <tr><td class="paramname">resetRect</td><td>Should the texture rect be reset to the size of the new texture?</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Sprite.htm#a9ecb506159be70154b3912ec6a75bc78" title="Get the source texture of the sprite. ">getTexture</a>, <a class="el" href="classcpp3ds_1_1Sprite.htm#ad01054886d7fa50427fda4d851a021eb" title="Set the sub-rectangle of the texture that the sprite will display. ">setTextureRect</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad01054886d7fa50427fda4d851a021eb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Sprite::setTextureRect </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Rect.htm">IntRect</a> &amp;&#160;</td>
          <td class="paramname"><em>rectangle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the sub-rectangle of the texture that the sprite will display. </p>
<p>The texture rect is useful when you don't want to display the whole texture, but rather a part of it. By default, the texture rect covers the entire texture.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rectangle</td><td>Rectangle defining the region of the texture to display</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Sprite.htm#a535c64cbd4fba6579e3864817b431eac" title="Get the sub-rectangle of the texture displayed by the sprite. ">getTextureRect</a>, <a class="el" href="classcpp3ds_1_1Sprite.htm#a042e6e2bfdebc9dc3f6aee971adee71f" title="Change the source texture of the sprite. ">setTexture</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Sprite_8hpp_source.htm">Sprite.hpp</a></li>
</ul>
</div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
