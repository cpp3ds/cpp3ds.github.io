<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_0b93ed46ee854382aab85c778b89946e.htm">include</a></li><li class="navelem"><a class="el" href="dir_18d409fe281a3b15bd325ab753ead42a.htm">cpp3ds</a></li><li class="navelem"><a class="el" href="dir_c5c778fd8c9c629bd120f7f9ff00b45a.htm">System</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">LinearAllocator.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#ifndef CPP3DS_LINEARALLOCATOR_HPP</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#define CPP3DS_LINEARALLOCATOR_HPP</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;3ds.h&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;bits/c++allocator.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#if __cplusplus &gt;= 201103L</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacecpp3ds.htm">cpp3ds</a> {</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00013"></a><span class="lineno"><a class="line" href="classcpp3ds_1_1LinearAllocator.htm">   13</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classcpp3ds_1_1LinearAllocator.htm">LinearAllocator</a>: <span class="keyword">public</span> std::__allocator_base&lt;T&gt;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    {</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;        <span class="keyword">typedef</span> <span class="keywordtype">size_t</span>     size_type;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;        <span class="keyword">typedef</span> ptrdiff_t  difference_type;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        <span class="keyword">typedef</span> T*         pointer;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        <span class="keyword">typedef</span> <span class="keyword">const</span> T*   const_pointer;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        <span class="keyword">typedef</span> T&amp;         reference;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        <span class="keyword">typedef</span> <span class="keyword">const</span> T&amp;   const_reference;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keyword">typedef</span> T          value_type;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1&gt;</div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="structcpp3ds_1_1LinearAllocator_1_1rebind.htm">   25</a></span>&#160;        <span class="keyword">struct </span><a class="code" href="structcpp3ds_1_1LinearAllocator_1_1rebind.htm">rebind</a></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        { <span class="keyword">typedef</span> <a class="code" href="classcpp3ds_1_1LinearAllocator.htm">LinearAllocator&lt;T1&gt;</a> <a class="code" href="classcpp3ds_1_1LinearAllocator.htm">other</a>; };</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">    #if __cplusplus &gt;= 201103L</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="comment">// 2103. std::allocator propagate_on_container_move_assignment</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keyword">typedef</span> std::true_type propagate_on_container_move_assignment;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <a class="code" href="classcpp3ds_1_1LinearAllocator.htm">LinearAllocator</a>() throw() { }</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <a class="code" href="classcpp3ds_1_1LinearAllocator.htm">LinearAllocator</a>(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1LinearAllocator.htm">LinearAllocator</a>&amp; __a) <span class="keywordflow">throw</span>()</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                : std::__allocator_base&lt;T&gt;(__a) { }</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1&gt;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        LinearAllocator(<span class="keyword">const</span> LinearAllocator&lt;T1&gt;&amp;) throw() { }</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        ~LinearAllocator() throw() { }</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="comment">// NB: __n is permitted to be 0.  The C++ standard says nothing</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="comment">// about what the return value is when __n == 0.</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        pointer</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        allocate(size_type __n, <span class="keyword">const</span> <span class="keywordtype">void</span>* = 0)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <span class="keywordflow">if</span> (__n &gt; this-&gt;max_size())</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                std::__throw_bad_alloc();</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(linearAlloc(__n * <span class="keyword">sizeof</span>(T)));</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        }</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="comment">// __p is not permitted to be a null pointer.</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordtype">void</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        deallocate(pointer __p, size_type)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        {</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            linearFree(__p);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        }</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        size_type</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        max_size()<span class="keyword"> const</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">return</span> size_t(-1) / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="comment">// Inherit everything else.</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    };</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;} <span class="comment">// namespace cpp3ds</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#endif // CPP3DS_LINEARALLOCATOR_HPP</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">////////////////////////////////////////////////////////////</span></div>
<div class="ttc" id="classcpp3ds_1_1LinearAllocator_htm"><div class="ttname"><a href="classcpp3ds_1_1LinearAllocator.htm">cpp3ds::LinearAllocator</a></div><div class="ttdoc">This allocator class is useful for when you want to use a STL container (e.g. </div><div class="ttdef"><b>Definition:</b> <a href="LinearAllocator_8hpp_source.htm#l00013">LinearAllocator.hpp:13</a></div></div>
<div class="ttc" id="namespacecpp3ds_htm"><div class="ttname"><a href="namespacecpp3ds.htm">cpp3ds</a></div><div class="ttdef"><b>Definition:</b> <a href="AlResource_8hpp_source.htm#l00033">AlResource.hpp:33</a></div></div>
<div class="ttc" id="structcpp3ds_1_1LinearAllocator_1_1rebind_htm"><div class="ttname"><a href="structcpp3ds_1_1LinearAllocator_1_1rebind.htm">cpp3ds::LinearAllocator::rebind</a></div><div class="ttdef"><b>Definition:</b> <a href="LinearAllocator_8hpp_source.htm#l00025">LinearAllocator.hpp:25</a></div></div>
</div><!-- fragment --></div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
