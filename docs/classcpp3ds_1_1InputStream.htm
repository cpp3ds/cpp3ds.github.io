<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>cpp3ds</b></li><li class="navelem"><a class="el" href="classcpp3ds_1_1InputStream.htm">InputStream</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classcpp3ds_1_1InputStream-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cpp3ds::InputStream Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span><div class="ingroups"><a class="el" href="group__system.htm">System module</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Abstract class for custom file input streams.  
 <a href="classcpp3ds_1_1InputStream.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="InputStream_8hpp_source.htm">InputStream.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for cpp3ds::InputStream:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classcpp3ds_1_1InputStream.png" usemap="#cpp3ds::InputStream_map" alt=""/>
  <map id="cpp3ds::InputStream_map" name="cpp3ds::InputStream_map">
<area href="classcpp3ds_1_1FileInputStream.htm" title="Implementation of input stream based on a file. " alt="cpp3ds::FileInputStream" shape="rect" coords="0,56,171,80"/>
<area href="classcpp3ds_1_1MemoryInputStream.htm" title="Implementation of input stream based on a memory chunk. " alt="cpp3ds::MemoryInputStream" shape="rect" coords="181,56,352,80"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a15d2fed1c4f2053c6e1e80ee13194bbf"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputStream.htm#a15d2fed1c4f2053c6e1e80ee13194bbf">~InputStream</a> ()</td></tr>
<tr class="memdesc:a15d2fed1c4f2053c6e1e80ee13194bbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual destructor.  <a href="#a15d2fed1c4f2053c6e1e80ee13194bbf">More...</a><br /></td></tr>
<tr class="separator:a15d2fed1c4f2053c6e1e80ee13194bbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a813223838cc08f0cd65c31c5ae153748"><td class="memItemLeft" align="right" valign="top">virtual Int64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputStream.htm#a813223838cc08f0cd65c31c5ae153748">read</a> (void *data, Int64 size)=0</td></tr>
<tr class="memdesc:a813223838cc08f0cd65c31c5ae153748"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read data from the stream.  <a href="#a813223838cc08f0cd65c31c5ae153748">More...</a><br /></td></tr>
<tr class="separator:a813223838cc08f0cd65c31c5ae153748"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab56a8e6d98f16dd1060b7ee088471f7"><td class="memItemLeft" align="right" valign="top">virtual Int64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputStream.htm#aab56a8e6d98f16dd1060b7ee088471f7">seek</a> (Int64 position)=0</td></tr>
<tr class="memdesc:aab56a8e6d98f16dd1060b7ee088471f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the current reading position.  <a href="#aab56a8e6d98f16dd1060b7ee088471f7">More...</a><br /></td></tr>
<tr class="separator:aab56a8e6d98f16dd1060b7ee088471f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed246796119954becf0acb2290adf571"><td class="memItemLeft" align="right" valign="top">virtual Int64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputStream.htm#aed246796119954becf0acb2290adf571">tell</a> ()=0</td></tr>
<tr class="memdesc:aed246796119954becf0acb2290adf571"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current reading position in the stream.  <a href="#aed246796119954becf0acb2290adf571">More...</a><br /></td></tr>
<tr class="separator:aed246796119954becf0acb2290adf571"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61f36bef9dc1cc54f823b1582da802d3"><td class="memItemLeft" align="right" valign="top">virtual Int64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputStream.htm#a61f36bef9dc1cc54f823b1582da802d3">getSize</a> ()=0</td></tr>
<tr class="memdesc:a61f36bef9dc1cc54f823b1582da802d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the size of the stream.  <a href="#a61f36bef9dc1cc54f823b1582da802d3">More...</a><br /></td></tr>
<tr class="separator:a61f36bef9dc1cc54f823b1582da802d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Abstract class for custom file input streams. </p>
<p>This class allows users to define their own file input sources from which SFML can load resources.</p>
<p>SFML resource classes like <a class="el" href="classcpp3ds_1_1Texture.htm" title="some things could easily be broken/////// ">cpp3ds::Texture</a> and <a class="el" href="classcpp3ds_1_1SoundBuffer.htm" title="Storage for audio samples defining a sound. ">cpp3ds::SoundBuffer</a> provide loadFromFile and loadFromMemory functions, which read data from conventional sources. However, if you have data coming from a different source (over a network, embedded, encrypted, compressed, etc) you can derive your own class from <a class="el" href="classcpp3ds_1_1InputStream.htm" title="Abstract class for custom file input streams. ">cpp3ds::InputStream</a> and load SFML resources with their loadFromStream function.</p>
<p>Usage example: </p><div class="fragment"><div class="line"><span class="comment">// custom stream class that reads from inside a zip file</span></div>
<div class="line"><span class="keyword">class </span>ZipStream : <span class="keyword">public</span> <a class="code" href="classcpp3ds_1_1InputStream.htm">cpp3ds::InputStream</a></div>
<div class="line">{</div>
<div class="line"><span class="keyword">public</span> :</div>
<div class="line"></div>
<div class="line">    ZipStream(std::string archive);</div>
<div class="line"></div>
<div class="line">    <span class="keywordtype">bool</span> open(std::string filename);</div>
<div class="line"></div>
<div class="line">    Int64 <a class="code" href="classcpp3ds_1_1InputStream.htm#a813223838cc08f0cd65c31c5ae153748">read</a>(<span class="keywordtype">void</span>* data, Int64 size);</div>
<div class="line"></div>
<div class="line">    Int64 <a class="code" href="classcpp3ds_1_1InputStream.htm#aab56a8e6d98f16dd1060b7ee088471f7">seek</a>(Int64 position);</div>
<div class="line">    </div>
<div class="line">    Int64 <a class="code" href="classcpp3ds_1_1InputStream.htm#aed246796119954becf0acb2290adf571">tell</a>();</div>
<div class="line"></div>
<div class="line">    Int64 <a class="code" href="classcpp3ds_1_1InputStream.htm#a61f36bef9dc1cc54f823b1582da802d3">getSize</a>();</div>
<div class="line"></div>
<div class="line"><span class="keyword">private</span> :</div>
<div class="line"></div>
<div class="line">    ...</div>
<div class="line">};</div>
<div class="line"></div>
<div class="line"><span class="comment">// now you can load textures...</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1Texture.htm">cpp3ds::Texture</a> texture;</div>
<div class="line">ZipStream stream(<span class="stringliteral">&quot;resources.zip&quot;</span>);</div>
<div class="line">stream.open(<span class="stringliteral">&quot;images/img.png&quot;</span>);</div>
<div class="line">texture.<a class="code" href="classcpp3ds_1_1Texture.htm#ab09ab75dd5c829c299c1cb23a9413b82">loadFromStream</a>(stream);</div>
<div class="line"></div>
<div class="line"><span class="comment">// musics...</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1Music.htm">cpp3ds::Music</a> music;</div>
<div class="line">ZipStream stream(<span class="stringliteral">&quot;resources.zip&quot;</span>);</div>
<div class="line">stream.open(<span class="stringliteral">&quot;musics/msc.ogg&quot;</span>);</div>
<div class="line">music.<a class="code" href="classcpp3ds_1_1Music.htm#ace5c8ae6d93c86b835f9d820060dcfcf">openFromStream</a>(stream);</div>
<div class="line"></div>
<div class="line"><span class="comment">// etc.</span></div>
</div><!-- fragment --> 
<p>Definition at line <a class="el" href="InputStream_8hpp_source.htm#l00040">40</a> of file <a class="el" href="InputStream_8hpp_source.htm">InputStream.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a15d2fed1c4f2053c6e1e80ee13194bbf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual cpp3ds::InputStream::~InputStream </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Virtual destructor. </p>

<p>Definition at line <a class="el" href="InputStream_8hpp_source.htm#l00048">48</a> of file <a class="el" href="InputStream_8hpp_source.htm">InputStream.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a61f36bef9dc1cc54f823b1582da802d3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Int64 cpp3ds::InputStream::getSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the size of the stream. </p>
<dl class="section return"><dt>Returns</dt><dd>The total number of bytes available in the stream, or -1 on error </dd></dl>

<p>Implemented in <a class="el" href="classcpp3ds_1_1FileInputStream.htm#a524bc5773c0928ad0782c794a9190251">cpp3ds::FileInputStream</a>, and <a class="el" href="classcpp3ds_1_1MemoryInputStream.htm#a1782ed9555ec127325f13ec629be2ecb">cpp3ds::MemoryInputStream</a>.</p>

</div>
</div>
<a class="anchor" id="a813223838cc08f0cd65c31c5ae153748"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Int64 cpp3ds::InputStream::read </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Int64&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read data from the stream. </p>
<p>After reading, the stream's reading position must be advanced by the amount of bytes read.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>Buffer where to copy the read data </td></tr>
    <tr><td class="paramname">size</td><td>Desired number of bytes to read</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of bytes actually read, or -1 on error </dd></dl>

<p>Implemented in <a class="el" href="classcpp3ds_1_1FileInputStream.htm#a8b896cd680f7b494fb6f61672f0976a2">cpp3ds::FileInputStream</a>, and <a class="el" href="classcpp3ds_1_1MemoryInputStream.htm#a0054fa8c5c6bf1946b35760e8cdcfb85">cpp3ds::MemoryInputStream</a>.</p>

</div>
</div>
<a class="anchor" id="aab56a8e6d98f16dd1060b7ee088471f7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Int64 cpp3ds::InputStream::seek </td>
          <td>(</td>
          <td class="paramtype">Int64&#160;</td>
          <td class="paramname"><em>position</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Change the current reading position. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>The position to seek to, from the beginning</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The position actually sought to, or -1 on error </dd></dl>

<p>Implemented in <a class="el" href="classcpp3ds_1_1FileInputStream.htm#a4c08a96a5c851bf55a7b7ad413848e13">cpp3ds::FileInputStream</a>, and <a class="el" href="classcpp3ds_1_1MemoryInputStream.htm#ae267389ac76de5a034700ce0c40e839a">cpp3ds::MemoryInputStream</a>.</p>

</div>
</div>
<a class="anchor" id="aed246796119954becf0acb2290adf571"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Int64 cpp3ds::InputStream::tell </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the current reading position in the stream. </p>
<dl class="section return"><dt>Returns</dt><dd>The current position, or -1 on error. </dd></dl>

<p>Implemented in <a class="el" href="classcpp3ds_1_1FileInputStream.htm#a8c2e7e9d4d22660f1da6b71dffa68dae">cpp3ds::FileInputStream</a>, and <a class="el" href="classcpp3ds_1_1MemoryInputStream.htm#ac459ace2b51719c881c749d57322fef0">cpp3ds::MemoryInputStream</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="InputStream_8hpp_source.htm">InputStream.hpp</a></li>
</ul>
</div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
