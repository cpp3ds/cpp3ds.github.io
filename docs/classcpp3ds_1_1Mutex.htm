<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>cpp3ds</b></li><li class="navelem"><a class="el" href="classcpp3ds_1_1Mutex.htm">Mutex</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classcpp3ds_1_1Mutex-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cpp3ds::Mutex Class Reference<div class="ingroups"><a class="el" href="group__system.htm">System module</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Blocks concurrent access to shared resources from multiple threads.  
 <a href="classcpp3ds_1_1Mutex.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Mutex_8hpp_source.htm">Mutex.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for cpp3ds::Mutex:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classcpp3ds_1_1Mutex.png" usemap="#cpp3ds::Mutex_map" alt=""/>
  <map id="cpp3ds::Mutex_map" name="cpp3ds::Mutex_map">
<area href="classcpp3ds_1_1NonCopyable.htm" title="Utility class that makes any derived class non-copyable. " alt="cpp3ds::NonCopyable" shape="rect" coords="0,0,136,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a0e5faf1d6d891fe30dac06a418937cbe"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Mutex.htm#a0e5faf1d6d891fe30dac06a418937cbe">Mutex</a> ()</td></tr>
<tr class="memdesc:a0e5faf1d6d891fe30dac06a418937cbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a0e5faf1d6d891fe30dac06a418937cbe">More...</a><br /></td></tr>
<tr class="separator:a0e5faf1d6d891fe30dac06a418937cbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9cb379de5dff423596e3a80f378c77f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Mutex.htm#ae9cb379de5dff423596e3a80f378c77f">~Mutex</a> ()</td></tr>
<tr class="memdesc:ae9cb379de5dff423596e3a80f378c77f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#ae9cb379de5dff423596e3a80f378c77f">More...</a><br /></td></tr>
<tr class="separator:ae9cb379de5dff423596e3a80f378c77f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7f1347010b7c021e15888679c90d19b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Mutex.htm#ae7f1347010b7c021e15888679c90d19b">lock</a> ()</td></tr>
<tr class="memdesc:ae7f1347010b7c021e15888679c90d19b"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classcpp3ds_1_1Lock.htm" title="Automatic wrapper for locking and unlocking mutexes. ">Lock</a> the mutex.  <a href="#ae7f1347010b7c021e15888679c90d19b">More...</a><br /></td></tr>
<tr class="separator:ae7f1347010b7c021e15888679c90d19b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6778c694765a440a88cbfa3080e5b64"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Mutex.htm#ac6778c694765a440a88cbfa3080e5b64">unlock</a> ()</td></tr>
<tr class="memdesc:ac6778c694765a440a88cbfa3080e5b64"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unlock the mutex.  <a href="#ac6778c694765a440a88cbfa3080e5b64">More...</a><br /></td></tr>
<tr class="separator:ac6778c694765a440a88cbfa3080e5b64"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Blocks concurrent access to shared resources from multiple threads. </p>
<p><a class="el" href="classcpp3ds_1_1Mutex.htm" title="Blocks concurrent access to shared resources from multiple threads. ">Mutex</a> stands for "MUTual EXclusion".</p>
<p>A mutex is a synchronization object, used when multiple threads are involved.</p>
<p>When you want to protect a part of the code from being accessed simultaneously by multiple threads, you typically use a mutex. When a thread is locked by a mutex, any other thread trying to lock it will be blocked until the mutex is released by the thread that locked it. This way, you can allow only one thread at a time to access a critical region of your code.</p>
<p>Usage example: </p><div class="fragment"><div class="line">Database database; <span class="comment">// this is a critical resource that needs some protection</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1Mutex.htm">cpp3ds::Mutex</a> mutex;</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">void</span> thread1()</div>
<div class="line">{</div>
<div class="line">    mutex.<a class="code" href="classcpp3ds_1_1Mutex.htm#ae7f1347010b7c021e15888679c90d19b">lock</a>(); <span class="comment">// this call will block the thread if the mutex is already locked by thread2</span></div>
<div class="line">    database.write(...);</div>
<div class="line">    mutex.<a class="code" href="classcpp3ds_1_1Mutex.htm#ac6778c694765a440a88cbfa3080e5b64">unlock</a>(); <span class="comment">// if thread2 was waiting, it will now be unblocked</span></div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">void</span> thread2()</div>
<div class="line">{</div>
<div class="line">    mutex.<a class="code" href="classcpp3ds_1_1Mutex.htm#ae7f1347010b7c021e15888679c90d19b">lock</a>(); <span class="comment">// this call will block the thread if the mutex is already locked by thread1</span></div>
<div class="line">    database.write(...);</div>
<div class="line">    mutex.<a class="code" href="classcpp3ds_1_1Mutex.htm#ac6778c694765a440a88cbfa3080e5b64">unlock</a>(); <span class="comment">// if thread1 was waiting, it will now be unblocked</span></div>
<div class="line">}</div>
</div><!-- fragment --><p>Be very careful with mutexes. A bad usage can lead to bad problems, like deadlocks (two threads are waiting for each other and the application is globally stuck).</p>
<p>To make the usage of mutexes more robust, particularly in environments where exceptions can be thrown, you should use the helper class <a class="el" href="classcpp3ds_1_1Lock.htm" title="Automatic wrapper for locking and unlocking mutexes. ">cpp3ds::Lock</a> to lock/unlock mutexes.</p>
<p>SFML mutexes are recursive, which means that you can lock a mutex multiple times in the same thread without creating a deadlock. In this case, the first call to <a class="el" href="classcpp3ds_1_1Mutex.htm#ae7f1347010b7c021e15888679c90d19b" title="Lock the mutex. ">lock()</a> behaves as usual, and the following ones have no effect. However, you must call <a class="el" href="classcpp3ds_1_1Mutex.htm#ac6778c694765a440a88cbfa3080e5b64" title="Unlock the mutex. ">unlock()</a> exactly as many times as you called <a class="el" href="classcpp3ds_1_1Mutex.htm#ae7f1347010b7c021e15888679c90d19b" title="Lock the mutex. ">lock()</a>. If you don't, the mutex won't be released.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Lock.htm" title="Automatic wrapper for locking and unlocking mutexes. ">cpp3ds::Lock</a> </dd></dl>

<p>Definition at line <a class="el" href="Mutex_8hpp_source.htm#l00044">44</a> of file <a class="el" href="Mutex_8hpp_source.htm">Mutex.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a0e5faf1d6d891fe30dac06a418937cbe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::Mutex::Mutex </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a class="anchor" id="ae9cb379de5dff423596e3a80f378c77f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::Mutex::~Mutex </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ae7f1347010b7c021e15888679c90d19b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Mutex::lock </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="classcpp3ds_1_1Lock.htm" title="Automatic wrapper for locking and unlocking mutexes. ">Lock</a> the mutex. </p>
<p>If the mutex is already locked in another thread, this call will block the execution until the mutex is released.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Mutex.htm#ac6778c694765a440a88cbfa3080e5b64" title="Unlock the mutex. ">unlock</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ac6778c694765a440a88cbfa3080e5b64"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Mutex::unlock </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Unlock the mutex. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Mutex.htm#ae7f1347010b7c021e15888679c90d19b" title="Lock the mutex. ">lock</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Mutex_8hpp_source.htm">Mutex.hpp</a></li>
</ul>
</div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
