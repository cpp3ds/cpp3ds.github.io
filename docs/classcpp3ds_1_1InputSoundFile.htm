<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>cpp3ds</b></li><li class="navelem"><a class="el" href="classcpp3ds_1_1InputSoundFile.htm">InputSoundFile</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classcpp3ds_1_1InputSoundFile-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cpp3ds::InputSoundFile Class Reference<div class="ingroups"><a class="el" href="group__audio.htm">Audio module</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Provide read access to sound files.  
 <a href="classcpp3ds_1_1InputSoundFile.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="InputSoundFile_8hpp_source.htm">InputSoundFile.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for cpp3ds::InputSoundFile:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classcpp3ds_1_1InputSoundFile.png" usemap="#cpp3ds::InputSoundFile_map" alt=""/>
  <map id="cpp3ds::InputSoundFile_map" name="cpp3ds::InputSoundFile_map">
<area href="classcpp3ds_1_1NonCopyable.htm" title="Utility class that makes any derived class non-copyable. " alt="cpp3ds::NonCopyable" shape="rect" coords="0,0,143,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ac0a2d7706c6dc0c2042fff882d40c5c2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputSoundFile.htm#ac0a2d7706c6dc0c2042fff882d40c5c2">InputSoundFile</a> ()</td></tr>
<tr class="memdesc:ac0a2d7706c6dc0c2042fff882d40c5c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#ac0a2d7706c6dc0c2042fff882d40c5c2">More...</a><br /></td></tr>
<tr class="separator:ac0a2d7706c6dc0c2042fff882d40c5c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2254ef59168e905fda64e01cea5e33c3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputSoundFile.htm#a2254ef59168e905fda64e01cea5e33c3">~InputSoundFile</a> ()</td></tr>
<tr class="memdesc:a2254ef59168e905fda64e01cea5e33c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a2254ef59168e905fda64e01cea5e33c3">More...</a><br /></td></tr>
<tr class="separator:a2254ef59168e905fda64e01cea5e33c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01ec1f76ae4326761e602f9170d16444"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputSoundFile.htm#a01ec1f76ae4326761e602f9170d16444">openFromFile</a> (const std::string &amp;filename)</td></tr>
<tr class="memdesc:a01ec1f76ae4326761e602f9170d16444"><td class="mdescLeft">&#160;</td><td class="mdescRight">Open a sound file from the disk for reading.  <a href="#a01ec1f76ae4326761e602f9170d16444">More...</a><br /></td></tr>
<tr class="separator:a01ec1f76ae4326761e602f9170d16444"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abde77c1ebfabffc4fe90e74ebd83645e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputSoundFile.htm#abde77c1ebfabffc4fe90e74ebd83645e">openFromMemory</a> (const void *data, std::size_t sizeInBytes)</td></tr>
<tr class="memdesc:abde77c1ebfabffc4fe90e74ebd83645e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Open a sound file in memory for reading.  <a href="#abde77c1ebfabffc4fe90e74ebd83645e">More...</a><br /></td></tr>
<tr class="separator:abde77c1ebfabffc4fe90e74ebd83645e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a221f9a7f7d4d24a4977f6f76d5840f11"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputSoundFile.htm#a221f9a7f7d4d24a4977f6f76d5840f11">openFromStream</a> (<a class="el" href="classcpp3ds_1_1InputStream.htm">InputStream</a> &amp;stream)</td></tr>
<tr class="memdesc:a221f9a7f7d4d24a4977f6f76d5840f11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Open a sound file from a custom stream for reading.  <a href="#a221f9a7f7d4d24a4977f6f76d5840f11">More...</a><br /></td></tr>
<tr class="separator:a221f9a7f7d4d24a4977f6f76d5840f11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbedac3524e8b2b318a3b632b07a232f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputSoundFile.htm#afbedac3524e8b2b318a3b632b07a232f">openForWriting</a> (const std::string &amp;filename, unsigned int channelCount, unsigned int sampleRate)</td></tr>
<tr class="memdesc:afbedac3524e8b2b318a3b632b07a232f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Open the sound file from the disk for writing.  <a href="#afbedac3524e8b2b318a3b632b07a232f">More...</a><br /></td></tr>
<tr class="separator:afbedac3524e8b2b318a3b632b07a232f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e4d921cbb7bec2c5352219554f8ee90"><td class="memItemLeft" align="right" valign="top">Uint64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputSoundFile.htm#a9e4d921cbb7bec2c5352219554f8ee90">getSampleCount</a> () const </td></tr>
<tr class="memdesc:a9e4d921cbb7bec2c5352219554f8ee90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the total number of audio samples in the file.  <a href="#a9e4d921cbb7bec2c5352219554f8ee90">More...</a><br /></td></tr>
<tr class="separator:a9e4d921cbb7bec2c5352219554f8ee90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a268df900934f2b886cf4a871700bc0c3"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputSoundFile.htm#a268df900934f2b886cf4a871700bc0c3">getChannelCount</a> () const </td></tr>
<tr class="memdesc:a268df900934f2b886cf4a871700bc0c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of channels used by the sound.  <a href="#a268df900934f2b886cf4a871700bc0c3">More...</a><br /></td></tr>
<tr class="separator:a268df900934f2b886cf4a871700bc0c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0009db474420f8ee2faf167b12c68758"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputSoundFile.htm#a0009db474420f8ee2faf167b12c68758">getSampleRate</a> () const </td></tr>
<tr class="memdesc:a0009db474420f8ee2faf167b12c68758"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the sample rate of the sound.  <a href="#a0009db474420f8ee2faf167b12c68758">More...</a><br /></td></tr>
<tr class="separator:a0009db474420f8ee2faf167b12c68758"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad87170912e6575f4efd907a038de3524"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputSoundFile.htm#ad87170912e6575f4efd907a038de3524">getDuration</a> () const </td></tr>
<tr class="memdesc:ad87170912e6575f4efd907a038de3524"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the total duration of the sound file.  <a href="#ad87170912e6575f4efd907a038de3524">More...</a><br /></td></tr>
<tr class="separator:ad87170912e6575f4efd907a038de3524"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a470bf2e4f55a7b368053f689af4193"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputSoundFile.htm#a8a470bf2e4f55a7b368053f689af4193">seek</a> (Uint64 sampleOffset)</td></tr>
<tr class="memdesc:a8a470bf2e4f55a7b368053f689af4193"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the current read position to the given sample offset.  <a href="#a8a470bf2e4f55a7b368053f689af4193">More...</a><br /></td></tr>
<tr class="separator:a8a470bf2e4f55a7b368053f689af4193"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3dd613a0e2d13701f9f4aa0e504dffd2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputSoundFile.htm#a3dd613a0e2d13701f9f4aa0e504dffd2">seek</a> (<a class="el" href="classcpp3ds_1_1Time.htm">Time</a> timeOffset)</td></tr>
<tr class="memdesc:a3dd613a0e2d13701f9f4aa0e504dffd2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the current read position to the given time offset.  <a href="#a3dd613a0e2d13701f9f4aa0e504dffd2">More...</a><br /></td></tr>
<tr class="separator:a3dd613a0e2d13701f9f4aa0e504dffd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf872958bdfd9dc4793645b6500d9082"><td class="memItemLeft" align="right" valign="top">Uint64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1InputSoundFile.htm#abf872958bdfd9dc4793645b6500d9082">read</a> (Int16 *samples, Uint64 maxCount)</td></tr>
<tr class="memdesc:abf872958bdfd9dc4793645b6500d9082"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read audio samples from the open file.  <a href="#abf872958bdfd9dc4793645b6500d9082">More...</a><br /></td></tr>
<tr class="separator:abf872958bdfd9dc4793645b6500d9082"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Provide read access to sound files. </p>
<p>This class decodes audio samples from a sound file.</p>
<p>It is used internally by higher-level classes such as <a class="el" href="classcpp3ds_1_1SoundBuffer.htm" title="Storage for audio samples defining a sound. ">cpp3ds::SoundBuffer</a> and <a class="el" href="classcpp3ds_1_1Music.htm" title="Streamed music played from an audio file. ">cpp3ds::Music</a>, but can also be useful if you want to process or analyze audio files without playing them, or if you want to implement your own version of <a class="el" href="classcpp3ds_1_1Music.htm" title="Streamed music played from an audio file. ">cpp3ds::Music</a> with more specific features.</p>
<p>Usage example: </p><div class="fragment"><div class="line"><span class="comment">// Open a sound file</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1InputSoundFile.htm">cpp3ds::InputSoundFile</a> file;</div>
<div class="line"><span class="keywordflow">if</span> (!file.<a class="code" href="classcpp3ds_1_1InputSoundFile.htm#a01ec1f76ae4326761e602f9170d16444">openFromFile</a>(<span class="stringliteral">&quot;music.ogg&quot;</span>))</div>
<div class="line">    <span class="comment">/* error */</span>;</div>
<div class="line"></div>
<div class="line"><span class="comment">// Print the sound attributes</span></div>
<div class="line">std::cout &lt;&lt; <span class="stringliteral">&quot;duration: &quot;</span> &lt;&lt; file.<a class="code" href="classcpp3ds_1_1InputSoundFile.htm#ad87170912e6575f4efd907a038de3524">getDuration</a>().<a class="code" href="classcpp3ds_1_1Time.htm#a7a3adf3276385962a90cda196aae2c01">asSeconds</a>() &lt;&lt; std::endl;</div>
<div class="line">std::cout &lt;&lt; <span class="stringliteral">&quot;channels: &quot;</span> &lt;&lt; file.<a class="code" href="classcpp3ds_1_1InputSoundFile.htm#a268df900934f2b886cf4a871700bc0c3">getChannelCount</a>() &lt;&lt; std::endl;</div>
<div class="line">std::cout &lt;&lt; <span class="stringliteral">&quot;sample rate: &quot;</span> &lt;&lt; file.<a class="code" href="classcpp3ds_1_1InputSoundFile.htm#a0009db474420f8ee2faf167b12c68758">getSampleRate</a>() &lt;&lt; std::endl;</div>
<div class="line">std::cout &lt;&lt; <span class="stringliteral">&quot;sample count: &quot;</span> &lt;&lt; file.<a class="code" href="classcpp3ds_1_1InputSoundFile.htm#a9e4d921cbb7bec2c5352219554f8ee90">getSampleCount</a>() &lt;&lt; std::endl;</div>
<div class="line"></div>
<div class="line"><span class="comment">// Read and process batches of samples until the end of file is reached</span></div>
<div class="line">cpp3ds::Int16 samples[1024];</div>
<div class="line">cpp3ds::Uint64 count;</div>
<div class="line"><span class="keywordflow">do</span></div>
<div class="line">{</div>
<div class="line">    count = file.<a class="code" href="classcpp3ds_1_1InputSoundFile.htm#abf872958bdfd9dc4793645b6500d9082">read</a>(samples, 1024);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// process, analyze, play, convert, or whatever</span></div>
<div class="line">    <span class="comment">// you want to do with the samples...</span></div>
<div class="line">}</div>
<div class="line"><span class="keywordflow">while</span> (count &gt; 0);</div>
</div><!-- fragment --><dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundFileReader.htm" title="Abstract base class for sound file decoding. ">cpp3ds::SoundFileReader</a>, <a class="el" href="classcpp3ds_1_1OutputSoundFile.htm" title="Provide write access to sound files. ">cpp3ds::OutputSoundFile</a> </dd></dl>

<p>Definition at line <a class="el" href="InputSoundFile_8hpp_source.htm#l00045">45</a> of file <a class="el" href="InputSoundFile_8hpp_source.htm">InputSoundFile.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ac0a2d7706c6dc0c2042fff882d40c5c2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::InputSoundFile::InputSoundFile </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a class="anchor" id="a2254ef59168e905fda64e01cea5e33c3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::InputSoundFile::~InputSoundFile </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a268df900934f2b886cf4a871700bc0c3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int cpp3ds::InputSoundFile::getChannelCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the number of channels used by the sound. </p>
<dl class="section return"><dt>Returns</dt><dd>Number of channels (1 = mono, 2 = stereo) </dd></dl>

</div>
</div>
<a class="anchor" id="ad87170912e6575f4efd907a038de3524"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Time.htm">Time</a> cpp3ds::InputSoundFile::getDuration </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the total duration of the sound file. </p>
<p>This function is provided for convenience, the duration is deduced from the other sound file attributes.</p>
<dl class="section return"><dt>Returns</dt><dd>Duration of the sound file </dd></dl>

</div>
</div>
<a class="anchor" id="a9e4d921cbb7bec2c5352219554f8ee90"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Uint64 cpp3ds::InputSoundFile::getSampleCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the total number of audio samples in the file. </p>
<dl class="section return"><dt>Returns</dt><dd>Number of samples </dd></dl>

</div>
</div>
<a class="anchor" id="a0009db474420f8ee2faf167b12c68758"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int cpp3ds::InputSoundFile::getSampleRate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the sample rate of the sound. </p>
<dl class="section return"><dt>Returns</dt><dd>Sample rate, in samples per second </dd></dl>

</div>
</div>
<a class="anchor" id="afbedac3524e8b2b318a3b632b07a232f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::InputSoundFile::openForWriting </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>channelCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>sampleRate</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Open the sound file from the disk for writing. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>Path of the sound file to write </td></tr>
    <tr><td class="paramname">channelCount</td><td>Number of channels in the sound </td></tr>
    <tr><td class="paramname">sampleRate</td><td>Sample rate of the sound</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the file was successfully opened </dd></dl>

</div>
</div>
<a class="anchor" id="a01ec1f76ae4326761e602f9170d16444"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::InputSoundFile::openFromFile </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Open a sound file from the disk for reading. </p>
<p>The supported audio formats are: WAV, OGG/Vorbis, FLAC.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>Path of the sound file to load</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the file was successfully opened </dd></dl>

</div>
</div>
<a class="anchor" id="abde77c1ebfabffc4fe90e74ebd83645e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::InputSoundFile::openFromMemory </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>sizeInBytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Open a sound file in memory for reading. </p>
<p>The supported audio formats are: WAV, OGG/Vorbis, FLAC.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>Pointer to the file data in memory </td></tr>
    <tr><td class="paramname">sizeInBytes</td><td>Size of the data to load, in bytes</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the file was successfully opened </dd></dl>

</div>
</div>
<a class="anchor" id="a221f9a7f7d4d24a4977f6f76d5840f11"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::InputSoundFile::openFromStream </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1InputStream.htm">InputStream</a> &amp;&#160;</td>
          <td class="paramname"><em>stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Open a sound file from a custom stream for reading. </p>
<p>The supported audio formats are: WAV, OGG/Vorbis, FLAC.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">stream</td><td>Source stream to read from</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the file was successfully opened </dd></dl>

</div>
</div>
<a class="anchor" id="abf872958bdfd9dc4793645b6500d9082"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Uint64 cpp3ds::InputSoundFile::read </td>
          <td>(</td>
          <td class="paramtype">Int16 *&#160;</td>
          <td class="paramname"><em>samples</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint64&#160;</td>
          <td class="paramname"><em>maxCount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Read audio samples from the open file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">samples</td><td>Pointer to the sample array to fill </td></tr>
    <tr><td class="paramname">maxCount</td><td>Maximum number of samples to read</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Number of samples actually read (may be less than <em>maxCount</em>) </dd></dl>

</div>
</div>
<a class="anchor" id="a8a470bf2e4f55a7b368053f689af4193"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::InputSoundFile::seek </td>
          <td>(</td>
          <td class="paramtype">Uint64&#160;</td>
          <td class="paramname"><em>sampleOffset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change the current read position to the given sample offset. </p>
<p>This function takes a sample offset to provide maximum precision. If you need to jump to a given time, use the other overload.</p>
<p>If the given offset exceeds to total number of samples, this function jumps to the end of the sound file.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sampleOffset</td><td>Index of the sample to jump to, relative to the beginning </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3dd613a0e2d13701f9f4aa0e504dffd2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::InputSoundFile::seek </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>timeOffset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change the current read position to the given time offset. </p>
<p>Using a time offset is handy but imprecise. If you need an accurate result, consider using the overload which takes a sample offset.</p>
<p>If the given time exceeds to total duration, this function jumps to the end of the sound file.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">timeOffset</td><td><a class="el" href="classcpp3ds_1_1Time.htm" title="Represents a time value. ">Time</a> to jump to, relative to the beginning </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="InputSoundFile_8hpp_source.htm">InputSoundFile.hpp</a></li>
</ul>
</div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
