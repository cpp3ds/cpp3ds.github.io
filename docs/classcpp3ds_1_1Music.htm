<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>cpp3ds</b></li><li class="navelem"><a class="el" href="classcpp3ds_1_1Music.htm">Music</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classcpp3ds_1_1Music-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cpp3ds::Music Class Reference<div class="ingroups"><a class="el" href="group__audio.htm">Audio module</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Streamed music played from an audio file.  
 <a href="classcpp3ds_1_1Music.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Music_8hpp_source.htm">Music.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for cpp3ds::Music:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classcpp3ds_1_1Music.png" usemap="#cpp3ds::Music_map" alt=""/>
  <map id="cpp3ds::Music_map" name="cpp3ds::Music_map">
<area href="classcpp3ds_1_1SoundStream.htm" title="Abstract base class for streamed audio sources. " alt="cpp3ds::SoundStream" shape="rect" coords="0,112,136,136"/>
<area href="classcpp3ds_1_1SoundSource.htm" title="Base class defining a sound&#39;s properties. " alt="cpp3ds::SoundSource" shape="rect" coords="0,56,136,80"/>
<area href="classcpp3ds_1_1AlResource.htm" title="Base class for classes that require an OpenAL context. " alt="cpp3ds::AlResource" shape="rect" coords="0,0,136,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a5029e5d31339974f94ec277c9cb8a58e"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#a5029e5d31339974f94ec277c9cb8a58e">Status</a> { <br />
&#160;&#160;<a class="el" href="classcpp3ds_1_1SoundSource.htm#a5029e5d31339974f94ec277c9cb8a58ea9f5bcd1fed93b987ff37f9b9a705b1fb">Stopped</a>, 
<br />
&#160;&#160;<a class="el" href="classcpp3ds_1_1SoundSource.htm#a5029e5d31339974f94ec277c9cb8a58ea7a7cdd5373f8aa6db677f60d957c6a3e">Paused</a>, 
<br />
&#160;&#160;<a class="el" href="classcpp3ds_1_1SoundSource.htm#a5029e5d31339974f94ec277c9cb8a58eae6a60835a56a9b9755c3b55dad874100">Playing</a>
<br />
 }<tr class="memdesc:a5029e5d31339974f94ec277c9cb8a58e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enumeration of the sound source states.  <a href="classcpp3ds_1_1SoundSource.htm#a5029e5d31339974f94ec277c9cb8a58e">More...</a><br /></td></tr>
<tr class="separator:a5029e5d31339974f94ec277c9cb8a58e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a278aa01820432d5481d62b6c2d3396ec"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Music.htm#a278aa01820432d5481d62b6c2d3396ec">Music</a> ()</td></tr>
<tr class="memdesc:a278aa01820432d5481d62b6c2d3396ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a278aa01820432d5481d62b6c2d3396ec">More...</a><br /></td></tr>
<tr class="separator:a278aa01820432d5481d62b6c2d3396ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae882608075ba0ac0c6083f6880ff6d0a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Music.htm#ae882608075ba0ac0c6083f6880ff6d0a">~Music</a> ()</td></tr>
<tr class="memdesc:ae882608075ba0ac0c6083f6880ff6d0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#ae882608075ba0ac0c6083f6880ff6d0a">More...</a><br /></td></tr>
<tr class="separator:ae882608075ba0ac0c6083f6880ff6d0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed102982d9e2096381fcce2673774eb6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Music.htm#aed102982d9e2096381fcce2673774eb6">openFromFile</a> (const std::string &amp;filename)</td></tr>
<tr class="memdesc:aed102982d9e2096381fcce2673774eb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Open a music from an audio file.  <a href="#aed102982d9e2096381fcce2673774eb6">More...</a><br /></td></tr>
<tr class="separator:aed102982d9e2096381fcce2673774eb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae75b0a494371f104cb8cd020e77359f8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Music.htm#ae75b0a494371f104cb8cd020e77359f8">openFromMemory</a> (const void *data, std::size_t sizeInBytes)</td></tr>
<tr class="memdesc:ae75b0a494371f104cb8cd020e77359f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Open a music from an audio file in memory.  <a href="#ae75b0a494371f104cb8cd020e77359f8">More...</a><br /></td></tr>
<tr class="separator:ae75b0a494371f104cb8cd020e77359f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace5c8ae6d93c86b835f9d820060dcfcf"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Music.htm#ace5c8ae6d93c86b835f9d820060dcfcf">openFromStream</a> (<a class="el" href="classcpp3ds_1_1InputStream.htm">InputStream</a> &amp;stream)</td></tr>
<tr class="memdesc:ace5c8ae6d93c86b835f9d820060dcfcf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Open a music from an audio file in a custom stream.  <a href="#ace5c8ae6d93c86b835f9d820060dcfcf">More...</a><br /></td></tr>
<tr class="separator:ace5c8ae6d93c86b835f9d820060dcfcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1188c6f56264086e3eb9aadf0576f4e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Music.htm#ab1188c6f56264086e3eb9aadf0576f4e">getDuration</a> () const </td></tr>
<tr class="memdesc:ab1188c6f56264086e3eb9aadf0576f4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the total duration of the music.  <a href="#ab1188c6f56264086e3eb9aadf0576f4e">More...</a><br /></td></tr>
<tr class="separator:ab1188c6f56264086e3eb9aadf0576f4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af494f6df7f6befc7834047b032103cec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundStream.htm#af494f6df7f6befc7834047b032103cec">play</a> ()</td></tr>
<tr class="memdesc:af494f6df7f6befc7834047b032103cec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start or resume playing the audio stream.  <a href="#af494f6df7f6befc7834047b032103cec">More...</a><br /></td></tr>
<tr class="separator:af494f6df7f6befc7834047b032103cec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79180089b5054a47a4fbb1d1dc2eec54"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundStream.htm#a79180089b5054a47a4fbb1d1dc2eec54">pause</a> ()</td></tr>
<tr class="memdesc:a79180089b5054a47a4fbb1d1dc2eec54"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pause the audio stream.  <a href="#a79180089b5054a47a4fbb1d1dc2eec54">More...</a><br /></td></tr>
<tr class="separator:a79180089b5054a47a4fbb1d1dc2eec54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7918cfc8d39f3a8f639f0c906ac65342"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundStream.htm#a7918cfc8d39f3a8f639f0c906ac65342">stop</a> ()</td></tr>
<tr class="memdesc:a7918cfc8d39f3a8f639f0c906ac65342"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stop playing the audio stream.  <a href="#a7918cfc8d39f3a8f639f0c906ac65342">More...</a><br /></td></tr>
<tr class="separator:a7918cfc8d39f3a8f639f0c906ac65342"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40283bd5461e0997ddc5cdb5c7f354a9"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundStream.htm#a40283bd5461e0997ddc5cdb5c7f354a9">getChannelCount</a> () const </td></tr>
<tr class="memdesc:a40283bd5461e0997ddc5cdb5c7f354a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of channels of the stream.  <a href="#a40283bd5461e0997ddc5cdb5c7f354a9">More...</a><br /></td></tr>
<tr class="separator:a40283bd5461e0997ddc5cdb5c7f354a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaabe638bf23dcd54d414062d7868e5ed"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundStream.htm#aaabe638bf23dcd54d414062d7868e5ed">getSampleRate</a> () const </td></tr>
<tr class="memdesc:aaabe638bf23dcd54d414062d7868e5ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the stream sample rate of the stream.  <a href="#aaabe638bf23dcd54d414062d7868e5ed">More...</a><br /></td></tr>
<tr class="separator:aaabe638bf23dcd54d414062d7868e5ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5ea04dfa017646e165a0b13bd8eb7a5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1SoundSource.htm#a5029e5d31339974f94ec277c9cb8a58e">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundStream.htm#aa5ea04dfa017646e165a0b13bd8eb7a5">getStatus</a> () const </td></tr>
<tr class="memdesc:aa5ea04dfa017646e165a0b13bd8eb7a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current status of the stream (stopped, paused, playing)  <a href="#aa5ea04dfa017646e165a0b13bd8eb7a5">More...</a><br /></td></tr>
<tr class="separator:aa5ea04dfa017646e165a0b13bd8eb7a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ceb60edc662177f62e28f9d9ad0d86a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundStream.htm#a4ceb60edc662177f62e28f9d9ad0d86a">setPlayingOffset</a> (<a class="el" href="classcpp3ds_1_1Time.htm">Time</a> timeOffset)</td></tr>
<tr class="memdesc:a4ceb60edc662177f62e28f9d9ad0d86a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the current playing position of the stream.  <a href="#a4ceb60edc662177f62e28f9d9ad0d86a">More...</a><br /></td></tr>
<tr class="separator:a4ceb60edc662177f62e28f9d9ad0d86a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae28c37c4a18ac3ac0facb5b513bf1275"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundStream.htm#ae28c37c4a18ac3ac0facb5b513bf1275">getPlayingOffset</a> () const </td></tr>
<tr class="memdesc:ae28c37c4a18ac3ac0facb5b513bf1275"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current playing position of the stream.  <a href="#ae28c37c4a18ac3ac0facb5b513bf1275">More...</a><br /></td></tr>
<tr class="separator:ae28c37c4a18ac3ac0facb5b513bf1275"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a210ea66d280ddbcc216d0ece080ef8be"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundStream.htm#a210ea66d280ddbcc216d0ece080ef8be">setLoop</a> (bool loop)</td></tr>
<tr class="memdesc:a210ea66d280ddbcc216d0ece080ef8be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set whether or not the stream should loop after reaching the end.  <a href="#a210ea66d280ddbcc216d0ece080ef8be">More...</a><br /></td></tr>
<tr class="separator:a210ea66d280ddbcc216d0ece080ef8be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a581ae520c4d7d6e33ff084ab4f7c6848"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundStream.htm#a581ae520c4d7d6e33ff084ab4f7c6848">getLoop</a> () const </td></tr>
<tr class="memdesc:a581ae520c4d7d6e33ff084ab4f7c6848"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell whether or not the stream is in loop mode.  <a href="#a581ae520c4d7d6e33ff084ab4f7c6848">More...</a><br /></td></tr>
<tr class="separator:a581ae520c4d7d6e33ff084ab4f7c6848"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacab7398c55dedf6259f3b32861a0561"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#aacab7398c55dedf6259f3b32861a0561">setPitch</a> (float pitch)</td></tr>
<tr class="memdesc:aacab7398c55dedf6259f3b32861a0561"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the pitch of the sound.  <a href="#aacab7398c55dedf6259f3b32861a0561">More...</a><br /></td></tr>
<tr class="separator:aacab7398c55dedf6259f3b32861a0561"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12e6b3e21005e9a1e0afa9fdb7a004a7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#a12e6b3e21005e9a1e0afa9fdb7a004a7">setVolume</a> (float volume)</td></tr>
<tr class="memdesc:a12e6b3e21005e9a1e0afa9fdb7a004a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the volume of the sound.  <a href="#a12e6b3e21005e9a1e0afa9fdb7a004a7">More...</a><br /></td></tr>
<tr class="separator:a12e6b3e21005e9a1e0afa9fdb7a004a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb36a5f7041940a5368926f3c307b670"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#aeb36a5f7041940a5368926f3c307b670">setPosition</a> (float x, float y, float z)</td></tr>
<tr class="memdesc:aeb36a5f7041940a5368926f3c307b670"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the 3D position of the sound in the audio scene.  <a href="#aeb36a5f7041940a5368926f3c307b670">More...</a><br /></td></tr>
<tr class="separator:aeb36a5f7041940a5368926f3c307b670"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae13dbe38a55e55185493a5ba1c6191c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#ae13dbe38a55e55185493a5ba1c6191c7">setPosition</a> (const <a class="el" href="classcpp3ds_1_1Vector3.htm">Vector3f</a> &amp;position)</td></tr>
<tr class="memdesc:ae13dbe38a55e55185493a5ba1c6191c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the 3D position of the sound in the audio scene.  <a href="#ae13dbe38a55e55185493a5ba1c6191c7">More...</a><br /></td></tr>
<tr class="separator:ae13dbe38a55e55185493a5ba1c6191c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e8d21c6bda6df48d56df5f43d4368c8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#a0e8d21c6bda6df48d56df5f43d4368c8">setRelativeToListener</a> (bool relative)</td></tr>
<tr class="memdesc:a0e8d21c6bda6df48d56df5f43d4368c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Make the sound's position relative to the listener or absolute.  <a href="#a0e8d21c6bda6df48d56df5f43d4368c8">More...</a><br /></td></tr>
<tr class="separator:a0e8d21c6bda6df48d56df5f43d4368c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7805eb05609658dc7e9f4675c73f004c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#a7805eb05609658dc7e9f4675c73f004c">setMinDistance</a> (float distance)</td></tr>
<tr class="memdesc:a7805eb05609658dc7e9f4675c73f004c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the minimum distance of the sound.  <a href="#a7805eb05609658dc7e9f4675c73f004c">More...</a><br /></td></tr>
<tr class="separator:a7805eb05609658dc7e9f4675c73f004c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac01e82f6e269eeff37dea25263f66ca3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#ac01e82f6e269eeff37dea25263f66ca3">setAttenuation</a> (float attenuation)</td></tr>
<tr class="memdesc:ac01e82f6e269eeff37dea25263f66ca3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the attenuation factor of the sound.  <a href="#ac01e82f6e269eeff37dea25263f66ca3">More...</a><br /></td></tr>
<tr class="separator:ac01e82f6e269eeff37dea25263f66ca3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae258126876de67e2021eafeb474bdb3c"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#ae258126876de67e2021eafeb474bdb3c">getPitch</a> () const </td></tr>
<tr class="memdesc:ae258126876de67e2021eafeb474bdb3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the pitch of the sound.  <a href="#ae258126876de67e2021eafeb474bdb3c">More...</a><br /></td></tr>
<tr class="separator:ae258126876de67e2021eafeb474bdb3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47684e8724f86702ab0f0461f0a9d771"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#a47684e8724f86702ab0f0461f0a9d771">getVolume</a> () const </td></tr>
<tr class="memdesc:a47684e8724f86702ab0f0461f0a9d771"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the volume of the sound.  <a href="#a47684e8724f86702ab0f0461f0a9d771">More...</a><br /></td></tr>
<tr class="separator:a47684e8724f86702ab0f0461f0a9d771"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a441d4a883bf8e5faa7aab20b22b3c51f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Vector3.htm">Vector3f</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#a441d4a883bf8e5faa7aab20b22b3c51f">getPosition</a> () const </td></tr>
<tr class="memdesc:a441d4a883bf8e5faa7aab20b22b3c51f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the 3D position of the sound in the audio scene.  <a href="#a441d4a883bf8e5faa7aab20b22b3c51f">More...</a><br /></td></tr>
<tr class="separator:a441d4a883bf8e5faa7aab20b22b3c51f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92e108dd49572c34620145af569116ea"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#a92e108dd49572c34620145af569116ea">isRelativeToListener</a> () const </td></tr>
<tr class="memdesc:a92e108dd49572c34620145af569116ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell whether the sound's position is relative to the listener or is absolute.  <a href="#a92e108dd49572c34620145af569116ea">More...</a><br /></td></tr>
<tr class="separator:a92e108dd49572c34620145af569116ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4751a0c7e3039eaa8fcbd54fcf41cc4"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#ab4751a0c7e3039eaa8fcbd54fcf41cc4">getMinDistance</a> () const </td></tr>
<tr class="memdesc:ab4751a0c7e3039eaa8fcbd54fcf41cc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the minimum distance of the sound.  <a href="#ab4751a0c7e3039eaa8fcbd54fcf41cc4">More...</a><br /></td></tr>
<tr class="separator:ab4751a0c7e3039eaa8fcbd54fcf41cc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52c2f61d356f5fa0c15baf76ef4b6657"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#a52c2f61d356f5fa0c15baf76ef4b6657">getAttenuation</a> () const </td></tr>
<tr class="memdesc:a52c2f61d356f5fa0c15baf76ef4b6657"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the attenuation factor of the sound.  <a href="#a52c2f61d356f5fa0c15baf76ef4b6657">More...</a><br /></td></tr>
<tr class="separator:a52c2f61d356f5fa0c15baf76ef4b6657"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a4916f58e056628b45e9f8278303e6383"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Music.htm#a4916f58e056628b45e9f8278303e6383">onGetData</a> (<a class="el" href="structcpp3ds_1_1SoundStream_1_1Chunk.htm">Chunk</a> &amp;data)</td></tr>
<tr class="memdesc:a4916f58e056628b45e9f8278303e6383"><td class="mdescLeft">&#160;</td><td class="mdescRight">Request a new chunk of audio samples from the stream source.  <a href="#a4916f58e056628b45e9f8278303e6383">More...</a><br /></td></tr>
<tr class="separator:a4916f58e056628b45e9f8278303e6383"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9865ef468e13df9011e4162065df702"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Music.htm#af9865ef468e13df9011e4162065df702">onSeek</a> (<a class="el" href="classcpp3ds_1_1Time.htm">Time</a> timeOffset)</td></tr>
<tr class="memdesc:af9865ef468e13df9011e4162065df702"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the current playing position in the stream source.  <a href="#af9865ef468e13df9011e4162065df702">More...</a><br /></td></tr>
<tr class="separator:af9865ef468e13df9011e4162065df702"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc4ce7f5aac074c59af6af0e974810e1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundStream.htm#acc4ce7f5aac074c59af6af0e974810e1">initialize</a> (unsigned int channelCount, unsigned int sampleRate)</td></tr>
<tr class="memdesc:acc4ce7f5aac074c59af6af0e974810e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Define the audio stream parameters.  <a href="#acc4ce7f5aac074c59af6af0e974810e1">More...</a><br /></td></tr>
<tr class="separator:acc4ce7f5aac074c59af6af0e974810e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a745798991223d16b56817903a12713fb"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#a745798991223d16b56817903a12713fb">m_source</a></td></tr>
<tr class="memdesc:a745798991223d16b56817903a12713fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenAL source identifier.  <a href="#a745798991223d16b56817903a12713fb">More...</a><br /></td></tr>
<tr class="separator:a745798991223d16b56817903a12713fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb0174254aa25eadd9737a2a31395c1b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1SoundSource.htm#abb0174254aa25eadd9737a2a31395c1b">m_channel</a></td></tr>
<tr class="memdesc:abb0174254aa25eadd9737a2a31395c1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Current DSP channel for this sound source.  <a href="#abb0174254aa25eadd9737a2a31395c1b">More...</a><br /></td></tr>
<tr class="separator:abb0174254aa25eadd9737a2a31395c1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ff0415d1e8042cfa8bf49d3017a2a45"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4ff0415d1e8042cfa8bf49d3017a2a45"></a>
<a class="el" href="classcpp3ds_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_playOffset</b></td></tr>
<tr class="separator:a4ff0415d1e8042cfa8bf49d3017a2a45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef25ea949665b36055954a91537a69e3"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aef25ea949665b36055954a91537a69e3"></a>
<a class="el" href="classcpp3ds_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_pauseOffset</b></td></tr>
<tr class="separator:aef25ea949665b36055954a91537a69e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a598204aa34b43848163d29f045dcbb13"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a598204aa34b43848163d29f045dcbb13"></a>
ndspWaveBuf&#160;</td><td class="memItemRight" valign="bottom"><b>m_ndspWaveBuf</b></td></tr>
<tr class="separator:a598204aa34b43848163d29f045dcbb13"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Streamed music played from an audio file. </p>
<p>Musics are sounds that are streamed rather than completely loaded in memory.</p>
<p>This is especially useful for compressed musics that usually take hundreds of MB when they are uncompressed: by streaming it instead of loading it entirely, you avoid saturating the memory and have almost no loading delay.</p>
<p>Apart from that, a <a class="el" href="classcpp3ds_1_1Music.htm" title="Streamed music played from an audio file. ">cpp3ds::Music</a> has almost the same features as the <a class="el" href="classcpp3ds_1_1SoundBuffer.htm" title="Storage for audio samples defining a sound. ">cpp3ds::SoundBuffer</a> / <a class="el" href="classcpp3ds_1_1Sound.htm" title="Regular sound that can be played in the audio environment. ">cpp3ds::Sound</a> pair: you can play/pause/stop it, request its parameters (channels, sample rate), change the way it is played (pitch, volume, 3D position, ...), etc.</p>
<p>As a sound stream, a music is played in its own thread in order not to block the rest of the program. This means that you can leave the music alone after calling <a class="el" href="classcpp3ds_1_1SoundStream.htm#af494f6df7f6befc7834047b032103cec" title="Start or resume playing the audio stream. ">play()</a>, it will manage itself very well.</p>
<p>Usage example: </p><div class="fragment"><div class="line"><span class="comment">// Declare a new music</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1Music.htm">cpp3ds::Music</a> music;</div>
<div class="line"></div>
<div class="line"><span class="comment">// Open it from an audio file</span></div>
<div class="line"><span class="keywordflow">if</span> (!music.<a class="code" href="classcpp3ds_1_1Music.htm#aed102982d9e2096381fcce2673774eb6">openFromFile</a>(<span class="stringliteral">&quot;music.ogg&quot;</span>))</div>
<div class="line">{</div>
<div class="line">    <span class="comment">// error...</span></div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"><span class="comment">// Change some parameters</span></div>
<div class="line">music.<a class="code" href="classcpp3ds_1_1SoundSource.htm#aeb36a5f7041940a5368926f3c307b670">setPosition</a>(0, 1, 10); <span class="comment">// change its 3D position</span></div>
<div class="line">music.<a class="code" href="classcpp3ds_1_1SoundSource.htm#aacab7398c55dedf6259f3b32861a0561">setPitch</a>(2);           <span class="comment">// increase the pitch</span></div>
<div class="line">music.<a class="code" href="classcpp3ds_1_1SoundSource.htm#a12e6b3e21005e9a1e0afa9fdb7a004a7">setVolume</a>(50);         <span class="comment">// reduce the volume</span></div>
<div class="line">music.<a class="code" href="classcpp3ds_1_1SoundStream.htm#a210ea66d280ddbcc216d0ece080ef8be">setLoop</a>(<span class="keyword">true</span>);         <span class="comment">// make it loop</span></div>
<div class="line"></div>
<div class="line"><span class="comment">// Play it</span></div>
<div class="line">music.<a class="code" href="classcpp3ds_1_1SoundStream.htm#af494f6df7f6befc7834047b032103cec">play</a>();</div>
</div><!-- fragment --><dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Sound.htm" title="Regular sound that can be played in the audio environment. ">cpp3ds::Sound</a>, <a class="el" href="classcpp3ds_1_1SoundStream.htm" title="Abstract base class for streamed audio sources. ">cpp3ds::SoundStream</a> </dd></dl>

<p>Definition at line <a class="el" href="Music_8hpp_source.htm#l00047">47</a> of file <a class="el" href="Music_8hpp_source.htm">Music.hpp</a>.</p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a class="anchor" id="a5029e5d31339974f94ec277c9cb8a58e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classcpp3ds_1_1SoundSource.htm#a5029e5d31339974f94ec277c9cb8a58e">cpp3ds::SoundSource::Status</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enumeration of the sound source states. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a class="anchor" id="a5029e5d31339974f94ec277c9cb8a58ea9f5bcd1fed93b987ff37f9b9a705b1fb"></a>Stopped&#160;</td><td class="fielddoc">
<p><a class="el" href="classcpp3ds_1_1Sound.htm" title="Regular sound that can be played in the audio environment. ">Sound</a> is not playing. </p>
</td></tr>
<tr><td class="fieldname"><a class="anchor" id="a5029e5d31339974f94ec277c9cb8a58ea7a7cdd5373f8aa6db677f60d957c6a3e"></a>Paused&#160;</td><td class="fielddoc">
<p><a class="el" href="classcpp3ds_1_1Sound.htm" title="Regular sound that can be played in the audio environment. ">Sound</a> is paused. </p>
</td></tr>
<tr><td class="fieldname"><a class="anchor" id="a5029e5d31339974f94ec277c9cb8a58eae6a60835a56a9b9755c3b55dad874100"></a>Playing&#160;</td><td class="fielddoc">
<p><a class="el" href="classcpp3ds_1_1Sound.htm" title="Regular sound that can be played in the audio environment. ">Sound</a> is playing. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="SoundSource_8hpp_source.htm#l00052">52</a> of file <a class="el" href="SoundSource_8hpp_source.htm">SoundSource.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a278aa01820432d5481d62b6c2d3396ec"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::Music::Music </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a class="anchor" id="ae882608075ba0ac0c6083f6880ff6d0a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::Music::~Music </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a52c2f61d356f5fa0c15baf76ef4b6657"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float cpp3ds::SoundSource::getAttenuation </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the attenuation factor of the sound. </p>
<dl class="section return"><dt>Returns</dt><dd>Attenuation factor of the sound</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundSource.htm#ac01e82f6e269eeff37dea25263f66ca3" title="Set the attenuation factor of the sound. ">setAttenuation</a>, <a class="el" href="classcpp3ds_1_1SoundSource.htm#ab4751a0c7e3039eaa8fcbd54fcf41cc4" title="Get the minimum distance of the sound. ">getMinDistance</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a40283bd5461e0997ddc5cdb5c7f354a9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int cpp3ds::SoundStream::getChannelCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the number of channels of the stream. </p>
<p>1 channel means a mono sound, 2 means stereo, etc.</p>
<dl class="section return"><dt>Returns</dt><dd>Number of channels </dd></dl>

</div>
</div>
<a class="anchor" id="ab1188c6f56264086e3eb9aadf0576f4e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Time.htm">Time</a> cpp3ds::Music::getDuration </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the total duration of the music. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classcpp3ds_1_1Music.htm" title="Streamed music played from an audio file. ">Music</a> duration </dd></dl>

</div>
</div>
<a class="anchor" id="a581ae520c4d7d6e33ff084ab4f7c6848"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::SoundStream::getLoop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tell whether or not the stream is in loop mode. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the stream is looping, false otherwise</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundStream.htm#a210ea66d280ddbcc216d0ece080ef8be" title="Set whether or not the stream should loop after reaching the end. ">setLoop</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab4751a0c7e3039eaa8fcbd54fcf41cc4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float cpp3ds::SoundSource::getMinDistance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the minimum distance of the sound. </p>
<dl class="section return"><dt>Returns</dt><dd>Minimum distance of the sound</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundSource.htm#a7805eb05609658dc7e9f4675c73f004c" title="Set the minimum distance of the sound. ">setMinDistance</a>, <a class="el" href="classcpp3ds_1_1SoundSource.htm#a52c2f61d356f5fa0c15baf76ef4b6657" title="Get the attenuation factor of the sound. ">getAttenuation</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ae258126876de67e2021eafeb474bdb3c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float cpp3ds::SoundSource::getPitch </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the pitch of the sound. </p>
<dl class="section return"><dt>Returns</dt><dd>Pitch of the sound</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundSource.htm#aacab7398c55dedf6259f3b32861a0561" title="Set the pitch of the sound. ">setPitch</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ae28c37c4a18ac3ac0facb5b513bf1275"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Time.htm">Time</a> cpp3ds::SoundStream::getPlayingOffset </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the current playing position of the stream. </p>
<dl class="section return"><dt>Returns</dt><dd>Current playing position, from the beginning of the stream</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundStream.htm#a4ceb60edc662177f62e28f9d9ad0d86a" title="Change the current playing position of the stream. ">setPlayingOffset</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a441d4a883bf8e5faa7aab20b22b3c51f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Vector3.htm">Vector3f</a> cpp3ds::SoundSource::getPosition </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the 3D position of the sound in the audio scene. </p>
<dl class="section return"><dt>Returns</dt><dd>Position of the sound</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundSource.htm#aeb36a5f7041940a5368926f3c307b670" title="Set the 3D position of the sound in the audio scene. ">setPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aaabe638bf23dcd54d414062d7868e5ed"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int cpp3ds::SoundStream::getSampleRate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the stream sample rate of the stream. </p>
<p>The sample rate is the number of audio samples played per second. The higher, the better the quality.</p>
<dl class="section return"><dt>Returns</dt><dd>Sample rate, in number of samples per second </dd></dl>

</div>
</div>
<a class="anchor" id="aa5ea04dfa017646e165a0b13bd8eb7a5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1SoundSource.htm#a5029e5d31339974f94ec277c9cb8a58e">Status</a> cpp3ds::SoundStream::getStatus </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the current status of the stream (stopped, paused, playing) </p>
<dl class="section return"><dt>Returns</dt><dd>Current status </dd></dl>

</div>
</div>
<a class="anchor" id="a47684e8724f86702ab0f0461f0a9d771"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float cpp3ds::SoundSource::getVolume </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the volume of the sound. </p>
<dl class="section return"><dt>Returns</dt><dd>Volume of the sound, in the range [0, 100]</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundSource.htm#a12e6b3e21005e9a1e0afa9fdb7a004a7" title="Set the volume of the sound. ">setVolume</a> </dd></dl>

</div>
</div>
<a class="anchor" id="acc4ce7f5aac074c59af6af0e974810e1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SoundStream::initialize </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>channelCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>sampleRate</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Define the audio stream parameters. </p>
<p>This function must be called by derived classes as soon as they know the audio settings of the stream to play. Any attempt to manipulate the stream (<a class="el" href="classcpp3ds_1_1SoundStream.htm#af494f6df7f6befc7834047b032103cec" title="Start or resume playing the audio stream. ">play()</a>, ...) before calling this function will fail. It can be called multiple times if the settings of the audio stream change, but only when the stream is stopped.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channelCount</td><td>Number of channels of the stream </td></tr>
    <tr><td class="paramname">sampleRate</td><td>Sample rate, in samples per second </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a92e108dd49572c34620145af569116ea"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::SoundSource::isRelativeToListener </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tell whether the sound's position is relative to the listener or is absolute. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the position is relative, false if it's absolute</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundSource.htm#a0e8d21c6bda6df48d56df5f43d4368c8" title="Make the sound&#39;s position relative to the listener or absolute. ">setRelativeToListener</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a4916f58e056628b45e9f8278303e6383"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool cpp3ds::Music::onGetData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structcpp3ds_1_1SoundStream_1_1Chunk.htm">Chunk</a> &amp;&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Request a new chunk of audio samples from the stream source. </p>
<p>This function fills the chunk from the next samples to read from the audio file.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>Chunk of data to fill</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True to continue playback, false to stop </dd></dl>

<p>Implements <a class="el" href="classcpp3ds_1_1SoundStream.htm#a2dabc24a038f9341fc85c50b46ab527f">cpp3ds::SoundStream</a>.</p>

</div>
</div>
<a class="anchor" id="af9865ef468e13df9011e4162065df702"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void cpp3ds::Music::onSeek </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>timeOffset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Change the current playing position in the stream source. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">timeOffset</td><td>New playing position, from the beginning of the music </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classcpp3ds_1_1SoundStream.htm#abcf9e8b6879ee6580ac946a1c697700d">cpp3ds::SoundStream</a>.</p>

</div>
</div>
<a class="anchor" id="aed102982d9e2096381fcce2673774eb6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::Music::openFromFile </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Open a music from an audio file. </p>
<p>This function doesn't start playing the music (call <a class="el" href="classcpp3ds_1_1SoundStream.htm#af494f6df7f6befc7834047b032103cec" title="Start or resume playing the audio stream. ">play()</a> to do so). See the documentation of <a class="el" href="classcpp3ds_1_1InputSoundFile.htm" title="Provide read access to sound files. ">cpp3ds::InputSoundFile</a> for the list of supported formats.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>Path of the music file to open</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if loading succeeded, false if it failed</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Music.htm#ae75b0a494371f104cb8cd020e77359f8" title="Open a music from an audio file in memory. ">openFromMemory</a>, <a class="el" href="classcpp3ds_1_1Music.htm#ace5c8ae6d93c86b835f9d820060dcfcf" title="Open a music from an audio file in a custom stream. ">openFromStream</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ae75b0a494371f104cb8cd020e77359f8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::Music::openFromMemory </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>sizeInBytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Open a music from an audio file in memory. </p>
<p>This function doesn't start playing the music (call <a class="el" href="classcpp3ds_1_1SoundStream.htm#af494f6df7f6befc7834047b032103cec" title="Start or resume playing the audio stream. ">play()</a> to do so). See the documentation of <a class="el" href="classcpp3ds_1_1InputSoundFile.htm" title="Provide read access to sound files. ">cpp3ds::InputSoundFile</a> for the list of supported formats. Since the music is not loaded completely but rather streamed continuously, the <em>data</em> must remain available as long as the music is playing (i.e. you can't deallocate it right after calling this function).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>Pointer to the file data in memory </td></tr>
    <tr><td class="paramname">sizeInBytes</td><td>Size of the data to load, in bytes</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if loading succeeded, false if it failed</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Music.htm#aed102982d9e2096381fcce2673774eb6" title="Open a music from an audio file. ">openFromFile</a>, <a class="el" href="classcpp3ds_1_1Music.htm#ace5c8ae6d93c86b835f9d820060dcfcf" title="Open a music from an audio file in a custom stream. ">openFromStream</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ace5c8ae6d93c86b835f9d820060dcfcf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::Music::openFromStream </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1InputStream.htm">InputStream</a> &amp;&#160;</td>
          <td class="paramname"><em>stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Open a music from an audio file in a custom stream. </p>
<p>This function doesn't start playing the music (call <a class="el" href="classcpp3ds_1_1SoundStream.htm#af494f6df7f6befc7834047b032103cec" title="Start or resume playing the audio stream. ">play()</a> to do so). See the documentation of <a class="el" href="classcpp3ds_1_1InputSoundFile.htm" title="Provide read access to sound files. ">cpp3ds::InputSoundFile</a> for the list of supported formats. Since the music is not loaded completely but rather streamed continuously, the <em>stream</em> must remain alive as long as the music is playing (i.e. you can't destroy it right after calling this function).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">stream</td><td>Source stream to read from</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if loading succeeded, false if it failed</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Music.htm#aed102982d9e2096381fcce2673774eb6" title="Open a music from an audio file. ">openFromFile</a>, <a class="el" href="classcpp3ds_1_1Music.htm#ae75b0a494371f104cb8cd020e77359f8" title="Open a music from an audio file in memory. ">openFromMemory</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a79180089b5054a47a4fbb1d1dc2eec54"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SoundStream::pause </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Pause the audio stream. </p>
<p>This function pauses the stream if it was playing, otherwise (stream already paused or stopped) it has no effect.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundStream.htm#af494f6df7f6befc7834047b032103cec" title="Start or resume playing the audio stream. ">play</a>, <a class="el" href="classcpp3ds_1_1SoundStream.htm#a7918cfc8d39f3a8f639f0c906ac65342" title="Stop playing the audio stream. ">stop</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af494f6df7f6befc7834047b032103cec"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SoundStream::play </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Start or resume playing the audio stream. </p>
<p>This function starts the stream if it was stopped, resumes it if it was paused, and restarts it from the beginning if it was already playing. This function uses its own thread so that it doesn't block the rest of the program while the stream is played.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundStream.htm#a79180089b5054a47a4fbb1d1dc2eec54" title="Pause the audio stream. ">pause</a>, <a class="el" href="classcpp3ds_1_1SoundStream.htm#a7918cfc8d39f3a8f639f0c906ac65342" title="Stop playing the audio stream. ">stop</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ac01e82f6e269eeff37dea25263f66ca3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SoundSource::setAttenuation </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>attenuation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the attenuation factor of the sound. </p>
<p>The attenuation is a multiplicative factor which makes the sound more or less loud according to its distance from the listener. An attenuation of 0 will produce a non-attenuated sound, i.e. its volume will always be the same whether it is heard from near or from far. On the other hand, an attenuation value such as 100 will make the sound fade out very quickly as it gets further from the listener. The default value of the attenuation is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">attenuation</td><td>New attenuation factor of the sound</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundSource.htm#a52c2f61d356f5fa0c15baf76ef4b6657" title="Get the attenuation factor of the sound. ">getAttenuation</a>, <a class="el" href="classcpp3ds_1_1SoundSource.htm#a7805eb05609658dc7e9f4675c73f004c" title="Set the minimum distance of the sound. ">setMinDistance</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a210ea66d280ddbcc216d0ece080ef8be"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SoundStream::setLoop </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>loop</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set whether or not the stream should loop after reaching the end. </p>
<p>If set, the stream will restart from beginning after reaching the end and so on, until it is stopped or setLoop(false) is called. The default looping state for streams is false.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">loop</td><td>True to play in loop, false to play once</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundStream.htm#a581ae520c4d7d6e33ff084ab4f7c6848" title="Tell whether or not the stream is in loop mode. ">getLoop</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a7805eb05609658dc7e9f4675c73f004c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SoundSource::setMinDistance </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>distance</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the minimum distance of the sound. </p>
<p>The "minimum distance" of a sound is the maximum distance at which it is heard at its maximum volume. Further than the minimum distance, it will start to fade out according to its attenuation factor. A value of 0 ("inside the head
of the listener") is an invalid value and is forbidden. The default value of the minimum distance is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">distance</td><td>New minimum distance of the sound</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundSource.htm#ab4751a0c7e3039eaa8fcbd54fcf41cc4" title="Get the minimum distance of the sound. ">getMinDistance</a>, <a class="el" href="classcpp3ds_1_1SoundSource.htm#ac01e82f6e269eeff37dea25263f66ca3" title="Set the attenuation factor of the sound. ">setAttenuation</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aacab7398c55dedf6259f3b32861a0561"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SoundSource::setPitch </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>pitch</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the pitch of the sound. </p>
<p>The pitch represents the perceived fundamental frequency of a sound; thus you can make a sound more acute or grave by changing its pitch. A side effect of changing the pitch is to modify the playing speed of the sound as well. The default value for the pitch is 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pitch</td><td>New pitch to apply to the sound</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundSource.htm#ae258126876de67e2021eafeb474bdb3c" title="Get the pitch of the sound. ">getPitch</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a4ceb60edc662177f62e28f9d9ad0d86a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SoundStream::setPlayingOffset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>timeOffset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Change the current playing position of the stream. </p>
<p>The playing position can be changed when the stream is either paused or playing. Changing the playing position when the stream is stopped has no effect, since playing the stream would reset its position.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">timeOffset</td><td>New playing position, from the beginning of the stream</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundStream.htm#ae28c37c4a18ac3ac0facb5b513bf1275" title="Get the current playing position of the stream. ">getPlayingOffset</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aeb36a5f7041940a5368926f3c307b670"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SoundSource::setPosition </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the 3D position of the sound in the audio scene. </p>
<p>Only sounds with one channel (mono sounds) can be spatialized. The default position of a sound is (0, 0, 0).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>X coordinate of the position of the sound in the scene </td></tr>
    <tr><td class="paramname">y</td><td>Y coordinate of the position of the sound in the scene </td></tr>
    <tr><td class="paramname">z</td><td>Z coordinate of the position of the sound in the scene</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundSource.htm#a441d4a883bf8e5faa7aab20b22b3c51f" title="Get the 3D position of the sound in the audio scene. ">getPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ae13dbe38a55e55185493a5ba1c6191c7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SoundSource::setPosition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector3.htm">Vector3f</a> &amp;&#160;</td>
          <td class="paramname"><em>position</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the 3D position of the sound in the audio scene. </p>
<p>Only sounds with one channel (mono sounds) can be spatialized. The default position of a sound is (0, 0, 0).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>Position of the sound in the scene</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundSource.htm#a441d4a883bf8e5faa7aab20b22b3c51f" title="Get the 3D position of the sound in the audio scene. ">getPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0e8d21c6bda6df48d56df5f43d4368c8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SoundSource::setRelativeToListener </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>relative</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Make the sound's position relative to the listener or absolute. </p>
<p>Making a sound relative to the listener will ensure that it will always be played the same way regardless the position of the listener. This can be useful for non-spatialized sounds, sounds that are produced by the listener, or sounds attached to it. The default value is false (position is absolute).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">relative</td><td>True to set the position relative, false to set it absolute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundSource.htm#a92e108dd49572c34620145af569116ea" title="Tell whether the sound&#39;s position is relative to the listener or is absolute. ">isRelativeToListener</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a12e6b3e21005e9a1e0afa9fdb7a004a7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SoundSource::setVolume </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>volume</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the volume of the sound. </p>
<p>The volume is a value between 0 (mute) and 100 (full volume). The default value for the volume is 100.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">volume</td><td>Volume of the sound</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundSource.htm#a47684e8724f86702ab0f0461f0a9d771" title="Get the volume of the sound. ">getVolume</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a7918cfc8d39f3a8f639f0c906ac65342"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::SoundStream::stop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Stop playing the audio stream. </p>
<p>This function stops the stream if it was playing or paused, and does nothing if it was already stopped. It also resets the playing position (unlike <a class="el" href="classcpp3ds_1_1SoundStream.htm#a79180089b5054a47a4fbb1d1dc2eec54" title="Pause the audio stream. ">pause()</a>).</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1SoundStream.htm#af494f6df7f6befc7834047b032103cec" title="Start or resume playing the audio stream. ">play</a>, <a class="el" href="classcpp3ds_1_1SoundStream.htm#a79180089b5054a47a4fbb1d1dc2eec54" title="Pause the audio stream. ">pause</a> </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="abb0174254aa25eadd9737a2a31395c1b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int cpp3ds::SoundSource::m_channel</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Current DSP channel for this sound source. </p>

<p>Definition at line <a class="el" href="SoundSource_8hpp_source.htm#l00277">277</a> of file <a class="el" href="SoundSource_8hpp_source.htm">SoundSource.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a745798991223d16b56817903a12713fb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int cpp3ds::SoundSource::m_source</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>OpenAL source identifier. </p>

<p>Definition at line <a class="el" href="SoundSource_8hpp_source.htm#l00276">276</a> of file <a class="el" href="SoundSource_8hpp_source.htm">SoundSource.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Music_8hpp_source.htm">Music.hpp</a></li>
</ul>
</div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
