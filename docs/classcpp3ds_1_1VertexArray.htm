<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>cpp3ds</b></li><li class="navelem"><a class="el" href="classcpp3ds_1_1VertexArray.htm">VertexArray</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classcpp3ds_1_1VertexArray-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cpp3ds::VertexArray Class Reference<div class="ingroups"><a class="el" href="group__graphics.htm">Graphics module</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Define a set of one or more 2D primitives.  
 <a href="classcpp3ds_1_1VertexArray.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="VertexArray_8hpp_source.htm">VertexArray.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for cpp3ds::VertexArray:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classcpp3ds_1_1VertexArray.png" usemap="#cpp3ds::VertexArray_map" alt=""/>
  <map id="cpp3ds::VertexArray_map" name="cpp3ds::VertexArray_map">
<area href="classcpp3ds_1_1Drawable.htm" title="Abstract base class for objects that can be drawn to a render target. " alt="cpp3ds::Drawable" shape="rect" coords="0,0,129,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ab0d848848a9b0dd88f6f12e429caba12"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1VertexArray.htm#ab0d848848a9b0dd88f6f12e429caba12">VertexArray</a> ()</td></tr>
<tr class="memdesc:ab0d848848a9b0dd88f6f12e429caba12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#ab0d848848a9b0dd88f6f12e429caba12">More...</a><br /></td></tr>
<tr class="separator:ab0d848848a9b0dd88f6f12e429caba12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab648325b01ca3c242c97e4da3ad289ef"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1VertexArray.htm#ab648325b01ca3c242c97e4da3ad289ef">VertexArray</a> (<a class="el" href="group__graphics.htm#ga387343a4508f0646a1948d7121df3b65">PrimitiveType</a> type, unsigned int vertexCount=0)</td></tr>
<tr class="memdesc:ab648325b01ca3c242c97e4da3ad289ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the vertex array with a type and an initial number of vertices.  <a href="#ab648325b01ca3c242c97e4da3ad289ef">More...</a><br /></td></tr>
<tr class="separator:ab648325b01ca3c242c97e4da3ad289ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4fc679056b0b602710f3b0b926a807f"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1VertexArray.htm#ae4fc679056b0b602710f3b0b926a807f">getVertexCount</a> () const </td></tr>
<tr class="memdesc:ae4fc679056b0b602710f3b0b926a807f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the vertex count.  <a href="#ae4fc679056b0b602710f3b0b926a807f">More...</a><br /></td></tr>
<tr class="separator:ae4fc679056b0b602710f3b0b926a807f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11f904c836e0fee7fe2888f314f18cc1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Vertex.htm">Vertex</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1VertexArray.htm#a11f904c836e0fee7fe2888f314f18cc1">operator[]</a> (unsigned int index)</td></tr>
<tr class="memdesc:a11f904c836e0fee7fe2888f314f18cc1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a read-write access to a vertex by its index.  <a href="#a11f904c836e0fee7fe2888f314f18cc1">More...</a><br /></td></tr>
<tr class="separator:a11f904c836e0fee7fe2888f314f18cc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d3b91e1673ad70c53d91e9fa29b5581"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classcpp3ds_1_1Vertex.htm">Vertex</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1VertexArray.htm#a5d3b91e1673ad70c53d91e9fa29b5581">operator[]</a> (unsigned int index) const </td></tr>
<tr class="memdesc:a5d3b91e1673ad70c53d91e9fa29b5581"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a read-only access to a vertex by its index.  <a href="#a5d3b91e1673ad70c53d91e9fa29b5581">More...</a><br /></td></tr>
<tr class="separator:a5d3b91e1673ad70c53d91e9fa29b5581"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b6f4fcc4dd3c3e1f30b70e371fb09fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1VertexArray.htm#a3b6f4fcc4dd3c3e1f30b70e371fb09fb">clear</a> ()</td></tr>
<tr class="memdesc:a3b6f4fcc4dd3c3e1f30b70e371fb09fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the vertex array.  <a href="#a3b6f4fcc4dd3c3e1f30b70e371fb09fb">More...</a><br /></td></tr>
<tr class="separator:a3b6f4fcc4dd3c3e1f30b70e371fb09fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65c9e115acd9e7b6177240b58be075f5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1VertexArray.htm#a65c9e115acd9e7b6177240b58be075f5">resize</a> (unsigned int vertexCount)</td></tr>
<tr class="memdesc:a65c9e115acd9e7b6177240b58be075f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resize the vertex array.  <a href="#a65c9e115acd9e7b6177240b58be075f5">More...</a><br /></td></tr>
<tr class="separator:a65c9e115acd9e7b6177240b58be075f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b902690af08cf08be59e603529c0e8f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1VertexArray.htm#a1b902690af08cf08be59e603529c0e8f">append</a> (const <a class="el" href="classcpp3ds_1_1Vertex.htm">Vertex</a> &amp;vertex)</td></tr>
<tr class="memdesc:a1b902690af08cf08be59e603529c0e8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a vertex to the array.  <a href="#a1b902690af08cf08be59e603529c0e8f">More...</a><br /></td></tr>
<tr class="separator:a1b902690af08cf08be59e603529c0e8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcab4be8498587e4f529155331fb8ad6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1VertexArray.htm#afcab4be8498587e4f529155331fb8ad6">setPrimitiveType</a> (<a class="el" href="group__graphics.htm#ga387343a4508f0646a1948d7121df3b65">PrimitiveType</a> type)</td></tr>
<tr class="memdesc:afcab4be8498587e4f529155331fb8ad6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the type of primitives to draw.  <a href="#afcab4be8498587e4f529155331fb8ad6">More...</a><br /></td></tr>
<tr class="separator:afcab4be8498587e4f529155331fb8ad6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac87e02e5461b70df50e922774cb6fbe1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__graphics.htm#ga387343a4508f0646a1948d7121df3b65">PrimitiveType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1VertexArray.htm#ac87e02e5461b70df50e922774cb6fbe1">getPrimitiveType</a> () const </td></tr>
<tr class="memdesc:ac87e02e5461b70df50e922774cb6fbe1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the type of primitives drawn by the vertex array.  <a href="#ac87e02e5461b70df50e922774cb6fbe1">More...</a><br /></td></tr>
<tr class="separator:ac87e02e5461b70df50e922774cb6fbe1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31daaa516a3a8eadca2dc44d0aa25c4f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Rect.htm">FloatRect</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1VertexArray.htm#a31daaa516a3a8eadca2dc44d0aa25c4f">getBounds</a> () const </td></tr>
<tr class="memdesc:a31daaa516a3a8eadca2dc44d0aa25c4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the bounding rectangle of the vertex array.  <a href="#a31daaa516a3a8eadca2dc44d0aa25c4f">More...</a><br /></td></tr>
<tr class="separator:a31daaa516a3a8eadca2dc44d0aa25c4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Define a set of one or more 2D primitives. </p>
<p><a class="el" href="classcpp3ds_1_1VertexArray.htm" title="Define a set of one or more 2D primitives. ">cpp3ds::VertexArray</a> is a very simple wrapper around a dynamic array of vertices and a primitives type.</p>
<p>It inherits <a class="el" href="classcpp3ds_1_1Drawable.htm" title="Abstract base class for objects that can be drawn to a render target. ">cpp3ds::Drawable</a>, but unlike other drawables it is not transformable.</p>
<p>Example: </p><div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1VertexArray.htm">cpp3ds::VertexArray</a> lines(<a class="code" href="group__graphics.htm#gga387343a4508f0646a1948d7121df3b65a05ca7ce56b0a1c82be00037570f8a758">cpp3ds::LinesStrip</a>, 4);</div>
<div class="line">lines[0].position = <a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2f</a>(10, 0);</div>
<div class="line">lines[1].position = <a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2f</a>(20, 0);</div>
<div class="line">lines[2].position = <a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2f</a>(30, 5);</div>
<div class="line">lines[3].position = <a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2f</a>(40, 2);</div>
<div class="line"></div>
<div class="line">window.draw(lines);</div>
</div><!-- fragment --><dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Vertex.htm" title="Define a point with color and texture coordinates. ">cpp3ds::Vertex</a> </dd></dl>

<p>Definition at line <a class="el" href="VertexArray_8hpp_source.htm#l00047">47</a> of file <a class="el" href="VertexArray_8hpp_source.htm">VertexArray.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ab0d848848a9b0dd88f6f12e429caba12"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::VertexArray::VertexArray </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>
<p>Creates an empty vertex array. </p>

</div>
</div>
<a class="anchor" id="ab648325b01ca3c242c97e4da3ad289ef"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::VertexArray::VertexArray </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__graphics.htm#ga387343a4508f0646a1948d7121df3b65">PrimitiveType</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>vertexCount</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Construct the vertex array with a type and an initial number of vertices. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">type</td><td>Type of primitives </td></tr>
    <tr><td class="paramname">vertexCount</td><td>Initial number of vertices in the array </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a1b902690af08cf08be59e603529c0e8f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::VertexArray::append </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vertex.htm">Vertex</a> &amp;&#160;</td>
          <td class="paramname"><em>vertex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a vertex to the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vertex</td><td><a class="el" href="classcpp3ds_1_1Vertex.htm" title="Define a point with color and texture coordinates. ">Vertex</a> to add </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3b6f4fcc4dd3c3e1f30b70e371fb09fb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::VertexArray::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Clear the vertex array. </p>
<p>This function removes all the vertices from the array. It doesn't deallocate the corresponding memory, so that adding new vertices after clearing doesn't involve reallocating all the memory. </p>

</div>
</div>
<a class="anchor" id="a31daaa516a3a8eadca2dc44d0aa25c4f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Rect.htm">FloatRect</a> cpp3ds::VertexArray::getBounds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute the bounding rectangle of the vertex array. </p>
<p>This function returns the axis-aligned rectangle that contains all the vertices of the array.</p>
<dl class="section return"><dt>Returns</dt><dd>Bounding rectangle of the vertex array </dd></dl>

</div>
</div>
<a class="anchor" id="ac87e02e5461b70df50e922774cb6fbe1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__graphics.htm#ga387343a4508f0646a1948d7121df3b65">PrimitiveType</a> cpp3ds::VertexArray::getPrimitiveType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the type of primitives drawn by the vertex array. </p>
<dl class="section return"><dt>Returns</dt><dd>Primitive type </dd></dl>

</div>
</div>
<a class="anchor" id="ae4fc679056b0b602710f3b0b926a807f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int cpp3ds::VertexArray::getVertexCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the vertex count. </p>
<dl class="section return"><dt>Returns</dt><dd>Number of vertices in the array </dd></dl>

</div>
</div>
<a class="anchor" id="a11f904c836e0fee7fe2888f314f18cc1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Vertex.htm">Vertex</a>&amp; cpp3ds::VertexArray::operator[] </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a read-write access to a vertex by its index. </p>
<p>This function doesn't check <em>index</em>, it must be in range [0, <a class="el" href="classcpp3ds_1_1VertexArray.htm#ae4fc679056b0b602710f3b0b926a807f" title="Return the vertex count. ">getVertexCount()</a> - 1]. The behaviour is undefined otherwise.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>Index of the vertex to get</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to the index-th vertex</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1VertexArray.htm#ae4fc679056b0b602710f3b0b926a807f" title="Return the vertex count. ">getVertexCount</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a5d3b91e1673ad70c53d91e9fa29b5581"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classcpp3ds_1_1Vertex.htm">Vertex</a>&amp; cpp3ds::VertexArray::operator[] </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a read-only access to a vertex by its index. </p>
<p>This function doesn't check <em>index</em>, it must be in range [0, <a class="el" href="classcpp3ds_1_1VertexArray.htm#ae4fc679056b0b602710f3b0b926a807f" title="Return the vertex count. ">getVertexCount()</a> - 1]. The behaviour is undefined otherwise.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>Index of the vertex to get</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Const reference to the index-th vertex</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1VertexArray.htm#ae4fc679056b0b602710f3b0b926a807f" title="Return the vertex count. ">getVertexCount</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a65c9e115acd9e7b6177240b58be075f5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::VertexArray::resize </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>vertexCount</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Resize the vertex array. </p>
<p>If <em>vertexCount</em> is greater than the current size, the previous vertices are kept and new (default-constructed) vertices are added. If <em>vertexCount</em> is less than the current size, existing vertices are removed from the array.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vertexCount</td><td>New size of the array (number of vertices) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afcab4be8498587e4f529155331fb8ad6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::VertexArray::setPrimitiveType </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__graphics.htm#ga387343a4508f0646a1948d7121df3b65">PrimitiveType</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the type of primitives to draw. </p>
<p>This function defines how the vertices must be interpreted when it's time to draw them: </p><ul>
<li>As points </li>
<li>As lines </li>
<li>As triangles </li>
<li>As quads The default primitive type is cpp3ds::Points.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">type</td><td>Type of primitive </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="VertexArray_8hpp_source.htm">VertexArray.hpp</a></li>
</ul>
</div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
