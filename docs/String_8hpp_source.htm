<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_0b93ed46ee854382aab85c778b89946e.htm">include</a></li><li class="navelem"><a class="el" href="dir_18d409fe281a3b15bd325ab753ead42a.htm">cpp3ds</a></li><li class="navelem"><a class="el" href="dir_c5c778fd8c9c629bd120f7f9ff00b45a.htm">System</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">String.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SFML - Simple and Fast Multimedia Library</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// Copyright (C) 2007-2014 Laurent Gomila (laurent.gom@gmail.com)</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// Permission is granted to anyone to use this software for any purpose,</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">// subject to the following restrictions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">// 1. The origin of this software must not be misrepresented;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//    you must not claim that you wrote the original software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//    If you use this software in a product, an acknowledgment</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//    in the product documentation would be appreciated but is not required.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">// 2. Altered source versions must be plainly marked as such,</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//    and must not be misrepresented as being the original software.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#ifndef CPP3DS_STRING_HPP</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#define CPP3DS_STRING_HPP</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">// Headers</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"></span><span class="preprocessor">#include &lt;cpp3ds/System/Utf.hpp&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;locale&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacecpp3ds.htm">cpp3ds</a></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classcpp3ds_1_1String.htm">   42</a></span>&#160;<span class="keyword">class </span><a class="code" href="classcpp3ds_1_1String.htm">String</a></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">public</span> :</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="comment">// Types</span></div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classcpp3ds_1_1String.htm#a97077442b6cb268ad78bc33fb5bf85a6">   49</a></span>&#160;<span class="comment"></span>    <span class="keyword">typedef</span> std::basic_string&lt;Uint32&gt;::iterator       <a class="code" href="classcpp3ds_1_1String.htm#a97077442b6cb268ad78bc33fb5bf85a6">Iterator</a>;      </div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classcpp3ds_1_1String.htm#adda981aca4af2ad88c029bdde8f8a2be">   50</a></span>&#160;    <span class="keyword">typedef</span> std::basic_string&lt;Uint32&gt;::const_iterator <a class="code" href="classcpp3ds_1_1String.htm#adda981aca4af2ad88c029bdde8f8a2be">ConstIterator</a>; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="comment">// Static member data</span></div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classcpp3ds_1_1String.htm#a5a81b7a64d2665c2f20050d59e8864bc">   55</a></span>&#160;<span class="comment"></span>    <span class="keyword">static</span> <span class="keyword">const</span> std::size_t <a class="code" href="classcpp3ds_1_1String.htm#a5a81b7a64d2665c2f20050d59e8864bc">InvalidPos</a>; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="classcpp3ds_1_1String.htm#ab5045eda77656dc38c602edbc18adbba">String</a>();</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="classcpp3ds_1_1String.htm#ab5045eda77656dc38c602edbc18adbba">String</a>(<span class="keywordtype">char</span> ansiChar, <span class="keyword">const</span> std::locale&amp; locale = std::locale());</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="classcpp3ds_1_1String.htm#ab5045eda77656dc38c602edbc18adbba">String</a>(<span class="keywordtype">wchar_t</span> wideChar);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="classcpp3ds_1_1String.htm#ab5045eda77656dc38c602edbc18adbba">String</a>(Uint32 utf32Char);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="classcpp3ds_1_1String.htm#ab5045eda77656dc38c602edbc18adbba">String</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* ansiString, <span class="keyword">const</span> std::locale&amp; locale = std::locale());</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="classcpp3ds_1_1String.htm#ab5045eda77656dc38c602edbc18adbba">String</a>(<span class="keyword">const</span> std::string&amp; ansiString, <span class="keyword">const</span> std::locale&amp; locale = std::locale());</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="classcpp3ds_1_1String.htm#ab5045eda77656dc38c602edbc18adbba">String</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* wideString);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="classcpp3ds_1_1String.htm#ab5045eda77656dc38c602edbc18adbba">String</a>(<span class="keyword">const</span> std::wstring&amp; wideString);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="classcpp3ds_1_1String.htm#ab5045eda77656dc38c602edbc18adbba">String</a>(<span class="keyword">const</span> Uint32* utf32String);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="classcpp3ds_1_1String.htm#ab5045eda77656dc38c602edbc18adbba">String</a>(<span class="keyword">const</span> std::basic_string&lt;Uint32&gt;&amp; utf32String);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="classcpp3ds_1_1String.htm#ab5045eda77656dc38c602edbc18adbba">String</a>(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; copy);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">static</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a> <a class="code" href="classcpp3ds_1_1String.htm#a0124bcaf5e50b628c3a2455fb2977c88">fromUtf8</a>(T <a class="code" href="classcpp3ds_1_1String.htm#ad68c2381784dac35347a6331d38faecc">begin</a>, T <a class="code" href="classcpp3ds_1_1String.htm#a6584439243eabfe53a9418a99b0fa385">end</a>);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">static</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a> <a class="code" href="classcpp3ds_1_1String.htm#a6d437cfe536c90a8b2dc3f3366e7b54b">fromUtf16</a>(T <a class="code" href="classcpp3ds_1_1String.htm#ad68c2381784dac35347a6331d38faecc">begin</a>, T <a class="code" href="classcpp3ds_1_1String.htm#a6584439243eabfe53a9418a99b0fa385">end</a>);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">static</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a> <a class="code" href="classcpp3ds_1_1String.htm#a246a51e6e807820bba432560c1679261">fromUtf32</a>(T <a class="code" href="classcpp3ds_1_1String.htm#ad68c2381784dac35347a6331d38faecc">begin</a>, T <a class="code" href="classcpp3ds_1_1String.htm#a6584439243eabfe53a9418a99b0fa385">end</a>);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">operator</span> std::string() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">operator</span> std::wstring() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    std::string <a class="code" href="classcpp3ds_1_1String.htm#aca186c7701bbcd06ee1cbec495a2aa8a">toAnsiString</a>(<span class="keyword">const</span> std::locale&amp; locale = std::locale()) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    std::wstring <a class="code" href="classcpp3ds_1_1String.htm#abba6a1dd0ac8a205145e9de1253e8335">toWideString</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    std::basic_string&lt;Uint8&gt; <a class="code" href="classcpp3ds_1_1String.htm#a33f7c1d17bee042e4ce83006cd31b77d">toUtf8</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    std::basic_string&lt;Uint16&gt; <a class="code" href="classcpp3ds_1_1String.htm#a1d379baf388f85c1c9de6a8a09c02f17">toUtf16</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    std::basic_string&lt;Uint32&gt; <a class="code" href="classcpp3ds_1_1String.htm#aa221fd261fd0a4d156601f8414848ecd">toUtf32</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; <a class="code" href="classcpp3ds_1_1String.htm#a29686ec7e5bdfa7597ddbf595e68f4ac">operator =</a>(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; right);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; <a class="code" href="classcpp3ds_1_1String.htm#abb398c3ced8ac8bd85ca0fc80f62a007">operator +=</a>(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; right);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    Uint32 <a class="code" href="classcpp3ds_1_1String.htm#a231ed6419bf1c66e6466df6d57bfeb62">operator []</a>(std::size_t index) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    Uint32&amp; <a class="code" href="classcpp3ds_1_1String.htm#a231ed6419bf1c66e6466df6d57bfeb62">operator []</a>(std::size_t index);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classcpp3ds_1_1String.htm#a38d2a70a40b4ba6dc71175179554a3ec">clear</a>();</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    std::size_t <a class="code" href="classcpp3ds_1_1String.htm#a3e6c1bbba394612974a12e3d4477717b">getSize</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classcpp3ds_1_1String.htm#ac067c212f638dbaa7ce838beee6286ef">isEmpty</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classcpp3ds_1_1String.htm#a55bb0a42c42c16d4812a88bad7d5faba">erase</a>(std::size_t position, std::size_t count = 1);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classcpp3ds_1_1String.htm#af5f3abd8c010d7da5463b1368ad870e6">insert</a>(std::size_t position, <span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; str);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    std::size_t <a class="code" href="classcpp3ds_1_1String.htm#a478a73f566b6cf5a960c16648eff641f">find</a>(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; str, std::size_t start = 0) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classcpp3ds_1_1String.htm#a8f9e69e4829dd47377959de82798e65a">replace</a>(std::size_t position, std::size_t length, <span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; replaceWith);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classcpp3ds_1_1String.htm#a8f9e69e4829dd47377959de82798e65a">replace</a>(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; searchFor, <span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; replaceWith);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <a class="code" href="classcpp3ds_1_1String.htm">String</a> <a class="code" href="classcpp3ds_1_1String.htm#af7652aba9ae1dd06519f9587358eb4b6">substring</a>(std::size_t position, std::size_t length = InvalidPos) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keyword">const</span> Uint32* <a class="code" href="classcpp3ds_1_1String.htm#a92a3d3605b95562ac554787656873b3d">getData</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    Iterator <a class="code" href="classcpp3ds_1_1String.htm#ad68c2381784dac35347a6331d38faecc">begin</a>();</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    ConstIterator <a class="code" href="classcpp3ds_1_1String.htm#ad68c2381784dac35347a6331d38faecc">begin</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    Iterator <a class="code" href="classcpp3ds_1_1String.htm#a6584439243eabfe53a9418a99b0fa385">end</a>();</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    ConstIterator <a class="code" href="classcpp3ds_1_1String.htm#a6584439243eabfe53a9418a99b0fa385">end</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="keyword">private</span> :</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keyword">friend</span> <span class="keywordtype">bool</span> operator ==(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; right);</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keyword">friend</span> <span class="keywordtype">bool</span> operator &lt;(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; right);</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="comment">// Member data</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment"></span>    std::basic_string&lt;Uint32&gt; m_string; </div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;};</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="keywordtype">bool</span> operator ==(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; right);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="keywordtype">bool</span> operator !=(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; right);</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="keywordtype">bool</span> operator &lt;(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; right);</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="keywordtype">bool</span> operator &gt;(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; right);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="keywordtype">bool</span> operator &lt;=(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; right);</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="keywordtype">bool</span> operator &gt;=(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; right);</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<a class="code" href="classcpp3ds_1_1String.htm">String</a> operator +(<span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classcpp3ds_1_1String.htm">String</a>&amp; right);</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="preprocessor">#include &lt;cpp3ds/System/String.inl&gt;</span></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;} <span class="comment">// namespace cpp3ds</span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a231ed6419bf1c66e6466df6d57bfeb62"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a231ed6419bf1c66e6466df6d57bfeb62">cpp3ds::String::operator[]</a></div><div class="ttdeci">Uint32 operator[](std::size_t index) const </div><div class="ttdoc">Overload of [] operator to access a character by its position. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a6584439243eabfe53a9418a99b0fa385"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a6584439243eabfe53a9418a99b0fa385">cpp3ds::String::end</a></div><div class="ttdeci">Iterator end()</div><div class="ttdoc">Return an iterator to the beginning of the string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_ab5045eda77656dc38c602edbc18adbba"><div class="ttname"><a href="classcpp3ds_1_1String.htm#ab5045eda77656dc38c602edbc18adbba">cpp3ds::String::String</a></div><div class="ttdeci">String()</div><div class="ttdoc">Default constructor. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a97077442b6cb268ad78bc33fb5bf85a6"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a97077442b6cb268ad78bc33fb5bf85a6">cpp3ds::String::Iterator</a></div><div class="ttdeci">std::basic_string&lt; Uint32 &gt;::iterator Iterator</div><div class="ttdoc">Iterator type. </div><div class="ttdef"><b>Definition:</b> <a href="String_8hpp_source.htm#l00049">String.hpp:49</a></div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_ac067c212f638dbaa7ce838beee6286ef"><div class="ttname"><a href="classcpp3ds_1_1String.htm#ac067c212f638dbaa7ce838beee6286ef">cpp3ds::String::isEmpty</a></div><div class="ttdeci">bool isEmpty() const </div><div class="ttdoc">Check whether the string is empty or not. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a0124bcaf5e50b628c3a2455fb2977c88"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a0124bcaf5e50b628c3a2455fb2977c88">cpp3ds::String::fromUtf8</a></div><div class="ttdeci">static String fromUtf8(T begin, T end)</div><div class="ttdoc">Create a new cpp3ds::String from a UTF-8 encoded string. </div></div>
<div class="ttc" id="namespacecpp3ds_htm"><div class="ttname"><a href="namespacecpp3ds.htm">cpp3ds</a></div><div class="ttdef"><b>Definition:</b> <a href="AlResource_8hpp_source.htm#l00033">AlResource.hpp:33</a></div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a38d2a70a40b4ba6dc71175179554a3ec"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a38d2a70a40b4ba6dc71175179554a3ec">cpp3ds::String::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdoc">Clear the string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm"><div class="ttname"><a href="classcpp3ds_1_1String.htm">cpp3ds::String</a></div><div class="ttdoc">Utility string class that automatically handles conversions between types and encodings. </div><div class="ttdef"><b>Definition:</b> <a href="String_8hpp_source.htm#l00042">String.hpp:42</a></div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a92a3d3605b95562ac554787656873b3d"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a92a3d3605b95562ac554787656873b3d">cpp3ds::String::getData</a></div><div class="ttdeci">const Uint32 * getData() const </div><div class="ttdoc">Get a pointer to the C-style array of characters. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_ad68c2381784dac35347a6331d38faecc"><div class="ttname"><a href="classcpp3ds_1_1String.htm#ad68c2381784dac35347a6331d38faecc">cpp3ds::String::begin</a></div><div class="ttdeci">Iterator begin()</div><div class="ttdoc">Return an iterator to the beginning of the string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a8f9e69e4829dd47377959de82798e65a"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a8f9e69e4829dd47377959de82798e65a">cpp3ds::String::replace</a></div><div class="ttdeci">void replace(std::size_t position, std::size_t length, const String &amp;replaceWith)</div><div class="ttdoc">Replace a substring with another string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_abb398c3ced8ac8bd85ca0fc80f62a007"><div class="ttname"><a href="classcpp3ds_1_1String.htm#abb398c3ced8ac8bd85ca0fc80f62a007">cpp3ds::String::operator+=</a></div><div class="ttdeci">String &amp; operator+=(const String &amp;right)</div><div class="ttdoc">Overload of += operator to append an UTF-32 string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a3e6c1bbba394612974a12e3d4477717b"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a3e6c1bbba394612974a12e3d4477717b">cpp3ds::String::getSize</a></div><div class="ttdeci">std::size_t getSize() const </div><div class="ttdoc">Get the size of the string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a6d437cfe536c90a8b2dc3f3366e7b54b"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a6d437cfe536c90a8b2dc3f3366e7b54b">cpp3ds::String::fromUtf16</a></div><div class="ttdeci">static String fromUtf16(T begin, T end)</div><div class="ttdoc">Create a new cpp3ds::String from a UTF-16 encoded string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_aca186c7701bbcd06ee1cbec495a2aa8a"><div class="ttname"><a href="classcpp3ds_1_1String.htm#aca186c7701bbcd06ee1cbec495a2aa8a">cpp3ds::String::toAnsiString</a></div><div class="ttdeci">std::string toAnsiString(const std::locale &amp;locale=std::locale()) const </div><div class="ttdoc">Convert the unicode string to an ANSI string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_af5f3abd8c010d7da5463b1368ad870e6"><div class="ttname"><a href="classcpp3ds_1_1String.htm#af5f3abd8c010d7da5463b1368ad870e6">cpp3ds::String::insert</a></div><div class="ttdeci">void insert(std::size_t position, const String &amp;str)</div><div class="ttdoc">Insert one or more characters into the string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a5a81b7a64d2665c2f20050d59e8864bc"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a5a81b7a64d2665c2f20050d59e8864bc">cpp3ds::String::InvalidPos</a></div><div class="ttdeci">static const std::size_t InvalidPos</div><div class="ttdoc">Represents an invalid position in the string. </div><div class="ttdef"><b>Definition:</b> <a href="String_8hpp_source.htm#l00055">String.hpp:55</a></div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a478a73f566b6cf5a960c16648eff641f"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a478a73f566b6cf5a960c16648eff641f">cpp3ds::String::find</a></div><div class="ttdeci">std::size_t find(const String &amp;str, std::size_t start=0) const </div><div class="ttdoc">Find a sequence of one or more characters in the string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a246a51e6e807820bba432560c1679261"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a246a51e6e807820bba432560c1679261">cpp3ds::String::fromUtf32</a></div><div class="ttdeci">static String fromUtf32(T begin, T end)</div><div class="ttdoc">Create a new cpp3ds::String from a UTF-32 encoded string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_af7652aba9ae1dd06519f9587358eb4b6"><div class="ttname"><a href="classcpp3ds_1_1String.htm#af7652aba9ae1dd06519f9587358eb4b6">cpp3ds::String::substring</a></div><div class="ttdeci">String substring(std::size_t position, std::size_t length=InvalidPos) const </div><div class="ttdoc">Return a part of the string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_aa221fd261fd0a4d156601f8414848ecd"><div class="ttname"><a href="classcpp3ds_1_1String.htm#aa221fd261fd0a4d156601f8414848ecd">cpp3ds::String::toUtf32</a></div><div class="ttdeci">std::basic_string&lt; Uint32 &gt; toUtf32() const </div><div class="ttdoc">Convert the unicode string to a UTF-32 string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_adda981aca4af2ad88c029bdde8f8a2be"><div class="ttname"><a href="classcpp3ds_1_1String.htm#adda981aca4af2ad88c029bdde8f8a2be">cpp3ds::String::ConstIterator</a></div><div class="ttdeci">std::basic_string&lt; Uint32 &gt;::const_iterator ConstIterator</div><div class="ttdoc">Constant iterator type. </div><div class="ttdef"><b>Definition:</b> <a href="String_8hpp_source.htm#l00050">String.hpp:50</a></div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a55bb0a42c42c16d4812a88bad7d5faba"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a55bb0a42c42c16d4812a88bad7d5faba">cpp3ds::String::erase</a></div><div class="ttdeci">void erase(std::size_t position, std::size_t count=1)</div><div class="ttdoc">Erase one or more characters from the string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_abba6a1dd0ac8a205145e9de1253e8335"><div class="ttname"><a href="classcpp3ds_1_1String.htm#abba6a1dd0ac8a205145e9de1253e8335">cpp3ds::String::toWideString</a></div><div class="ttdeci">std::wstring toWideString() const </div><div class="ttdoc">Convert the unicode string to a wide string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a1d379baf388f85c1c9de6a8a09c02f17"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a1d379baf388f85c1c9de6a8a09c02f17">cpp3ds::String::toUtf16</a></div><div class="ttdeci">std::basic_string&lt; Uint16 &gt; toUtf16() const </div><div class="ttdoc">Convert the unicode string to a UTF-16 string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a33f7c1d17bee042e4ce83006cd31b77d"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a33f7c1d17bee042e4ce83006cd31b77d">cpp3ds::String::toUtf8</a></div><div class="ttdeci">std::basic_string&lt; Uint8 &gt; toUtf8() const </div><div class="ttdoc">Convert the unicode string to a UTF-8 string. </div></div>
<div class="ttc" id="classcpp3ds_1_1String_htm_a29686ec7e5bdfa7597ddbf595e68f4ac"><div class="ttname"><a href="classcpp3ds_1_1String.htm#a29686ec7e5bdfa7597ddbf595e68f4ac">cpp3ds::String::operator=</a></div><div class="ttdeci">String &amp; operator=(const String &amp;right)</div><div class="ttdoc">Overload of assignment operator. </div></div>
</div><!-- fragment --></div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
