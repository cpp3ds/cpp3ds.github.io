<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>cpp3ds</b></li><li class="navelem"><a class="el" href="classcpp3ds_1_1Window.htm">Window</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="classcpp3ds_1_1Window-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cpp3ds::Window Class Reference<div class="ingroups"><a class="el" href="group__window.htm">Window module</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classcpp3ds_1_1Window.htm" title="Window that serves as a target for OpenGL rendering. ">Window</a> that serves as a target for OpenGL rendering.  
 <a href="classcpp3ds_1_1Window.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Window_2Window_8hpp_source.htm">Window.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for cpp3ds::Window:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classcpp3ds_1_1Window.png" usemap="#cpp3ds::Window_map" alt=""/>
  <map id="cpp3ds::Window_map" name="cpp3ds::Window_map">
<area href="classcpp3ds_1_1RenderTarget.htm" title="Base class for all render targets (window, texture, ...) " alt="cpp3ds::RenderTarget" shape="rect" coords="0,56,136,80"/>
<area href="classcpp3ds_1_1GlResource.htm" title="Base class for classes that require an OpenGL context. " alt="cpp3ds::GlResource" shape="rect" coords="146,56,282,80"/>
<area href="classcpp3ds_1_1NonCopyable.htm" title="Utility class that makes any derived class non-copyable. " alt="cpp3ds::NonCopyable" shape="rect" coords="0,0,136,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aadb663fc6a42ad556264b93e618f1b3c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#aadb663fc6a42ad556264b93e618f1b3c">Window</a> ()</td></tr>
<tr class="memdesc:aadb663fc6a42ad556264b93e618f1b3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#aadb663fc6a42ad556264b93e618f1b3c">More...</a><br /></td></tr>
<tr class="separator:aadb663fc6a42ad556264b93e618f1b3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab87d05bc2879506c86bfb17da985614d"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#ab87d05bc2879506c86bfb17da985614d">~Window</a> ()</td></tr>
<tr class="memdesc:ab87d05bc2879506c86bfb17da985614d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#ab87d05bc2879506c86bfb17da985614d">More...</a><br /></td></tr>
<tr class="separator:ab87d05bc2879506c86bfb17da985614d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a999220d29d8b13b6abfb94ba92660093"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#a999220d29d8b13b6abfb94ba92660093">create</a> (const <a class="el" href="structcpp3ds_1_1ContextSettings.htm">ContextSettings</a> &amp;settings=<a class="el" href="structcpp3ds_1_1ContextSettings.htm">ContextSettings</a>())</td></tr>
<tr class="memdesc:a999220d29d8b13b6abfb94ba92660093"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create (or recreate) the window.  <a href="#a999220d29d8b13b6abfb94ba92660093">More...</a><br /></td></tr>
<tr class="separator:a999220d29d8b13b6abfb94ba92660093"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58e801118537edf34faa9c8df8330eec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#a58e801118537edf34faa9c8df8330eec">close</a> ()</td></tr>
<tr class="memdesc:a58e801118537edf34faa9c8df8330eec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Close the window and destroy all the attached resources.  <a href="#a58e801118537edf34faa9c8df8330eec">More...</a><br /></td></tr>
<tr class="separator:a58e801118537edf34faa9c8df8330eec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f638ae7855c6bad225bacc58860e3dd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#a4f638ae7855c6bad225bacc58860e3dd">isOpen</a> () const </td></tr>
<tr class="memdesc:a4f638ae7855c6bad225bacc58860e3dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell whether or not the window is open.  <a href="#a4f638ae7855c6bad225bacc58860e3dd">More...</a><br /></td></tr>
<tr class="separator:a4f638ae7855c6bad225bacc58860e3dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cdc14ee682c5caa0be1112fec71f17c"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structcpp3ds_1_1ContextSettings.htm">ContextSettings</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#a7cdc14ee682c5caa0be1112fec71f17c">getSettings</a> () const </td></tr>
<tr class="memdesc:a7cdc14ee682c5caa0be1112fec71f17c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the settings of the OpenGL context of the window.  <a href="#a7cdc14ee682c5caa0be1112fec71f17c">More...</a><br /></td></tr>
<tr class="separator:a7cdc14ee682c5caa0be1112fec71f17c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2296089d5fb9368c34dff6d6631b5d5a"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2u</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#a2296089d5fb9368c34dff6d6631b5d5a">getSize</a> () const </td></tr>
<tr class="memdesc:a2296089d5fb9368c34dff6d6631b5d5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size of the rendering region of the window.  <a href="#a2296089d5fb9368c34dff6d6631b5d5a">More...</a><br /></td></tr>
<tr class="separator:a2296089d5fb9368c34dff6d6631b5d5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fa76a63bd33d9069e398b74e5046742"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#a6fa76a63bd33d9069e398b74e5046742">setVerticalSyncEnabled</a> (bool enabled)</td></tr>
<tr class="memdesc:a6fa76a63bd33d9069e398b74e5046742"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable or disable vertical synchronization.  <a href="#a6fa76a63bd33d9069e398b74e5046742">More...</a><br /></td></tr>
<tr class="separator:a6fa76a63bd33d9069e398b74e5046742"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab43a09693e55ffc0eaf50829edb350ba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#ab43a09693e55ffc0eaf50829edb350ba">setFramerateLimit</a> (unsigned int limit)</td></tr>
<tr class="memdesc:ab43a09693e55ffc0eaf50829edb350ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Limit the framerate to a maximum fixed frequency.  <a href="#ab43a09693e55ffc0eaf50829edb350ba">More...</a><br /></td></tr>
<tr class="separator:ab43a09693e55ffc0eaf50829edb350ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a317b0f433ee1321a4ee23dfcaea38300"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#a317b0f433ee1321a4ee23dfcaea38300">setActive</a> (bool active=true) const </td></tr>
<tr class="memdesc:a317b0f433ee1321a4ee23dfcaea38300"><td class="mdescLeft">&#160;</td><td class="mdescRight">Activate or deactivate the window as the current target for OpenGL rendering.  <a href="#a317b0f433ee1321a4ee23dfcaea38300">More...</a><br /></td></tr>
<tr class="separator:a317b0f433ee1321a4ee23dfcaea38300"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01fbd134f2398937b5e9c9c02ba0480c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#a01fbd134f2398937b5e9c9c02ba0480c">display</a> ()</td></tr>
<tr class="memdesc:a01fbd134f2398937b5e9c9c02ba0480c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Display on screen what has been rendered to the window so far.  <a href="#a01fbd134f2398937b5e9c9c02ba0480c">More...</a><br /></td></tr>
<tr class="separator:a01fbd134f2398937b5e9c9c02ba0480c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4d37c14de4a8fd568b33f7ade251c79"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Image.htm">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#ad4d37c14de4a8fd568b33f7ade251c79">capture</a> () const </td></tr>
<tr class="memdesc:ad4d37c14de4a8fd568b33f7ade251c79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy the current contents of the window to an image.  <a href="#ad4d37c14de4a8fd568b33f7ade251c79">More...</a><br /></td></tr>
<tr class="separator:ad4d37c14de4a8fd568b33f7ade251c79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a600b4a42e3fefab9541de3dbace0abb5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1RenderTarget.htm#a600b4a42e3fefab9541de3dbace0abb5">clear</a> (const <a class="el" href="classcpp3ds_1_1Color.htm">Color</a> &amp;color=<a class="el" href="classcpp3ds_1_1Color.htm">Color</a>(0, 0, 0, 255))</td></tr>
<tr class="memdesc:a600b4a42e3fefab9541de3dbace0abb5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the entire target with a single color.  <a href="#a600b4a42e3fefab9541de3dbace0abb5">More...</a><br /></td></tr>
<tr class="separator:a600b4a42e3fefab9541de3dbace0abb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bff7d4a2436923f6479a88b7fa41f9a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1RenderTarget.htm#a5bff7d4a2436923f6479a88b7fa41f9a">setView</a> (const <a class="el" href="classcpp3ds_1_1View.htm">View</a> &amp;view)</td></tr>
<tr class="memdesc:a5bff7d4a2436923f6479a88b7fa41f9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the current active view.  <a href="#a5bff7d4a2436923f6479a88b7fa41f9a">More...</a><br /></td></tr>
<tr class="separator:a5bff7d4a2436923f6479a88b7fa41f9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13701786ddaff4085274b909a47977b4"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classcpp3ds_1_1View.htm">View</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1RenderTarget.htm#a13701786ddaff4085274b909a47977b4">getView</a> () const </td></tr>
<tr class="memdesc:a13701786ddaff4085274b909a47977b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the view currently in use in the render target.  <a href="#a13701786ddaff4085274b909a47977b4">More...</a><br /></td></tr>
<tr class="separator:a13701786ddaff4085274b909a47977b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33cda9c67c7b2024e613fbf9f93f9217"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classcpp3ds_1_1View.htm">View</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1RenderTarget.htm#a33cda9c67c7b2024e613fbf9f93f9217">getDefaultView</a> () const </td></tr>
<tr class="memdesc:a33cda9c67c7b2024e613fbf9f93f9217"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the default view of the render target.  <a href="#a33cda9c67c7b2024e613fbf9f93f9217">More...</a><br /></td></tr>
<tr class="separator:a33cda9c67c7b2024e613fbf9f93f9217"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2247b4beb5f974c27b25dd2fb6d6d22"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Rect.htm">IntRect</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1RenderTarget.htm#ad2247b4beb5f974c27b25dd2fb6d6d22">getViewport</a> (const <a class="el" href="classcpp3ds_1_1View.htm">View</a> &amp;view) const </td></tr>
<tr class="memdesc:ad2247b4beb5f974c27b25dd2fb6d6d22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the viewport of a view, applied to this render target.  <a href="#ad2247b4beb5f974c27b25dd2fb6d6d22">More...</a><br /></td></tr>
<tr class="separator:ad2247b4beb5f974c27b25dd2fb6d6d22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3d9d693536c86a0ec50d7339225d0a6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1RenderTarget.htm#ab3d9d693536c86a0ec50d7339225d0a6">mapPixelToCoords</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2i</a> &amp;point) const </td></tr>
<tr class="memdesc:ab3d9d693536c86a0ec50d7339225d0a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a point from target coordinates to world coordinates, using the current view.  <a href="#ab3d9d693536c86a0ec50d7339225d0a6">More...</a><br /></td></tr>
<tr class="separator:ab3d9d693536c86a0ec50d7339225d0a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75675b32ba8fcf1a8ab82fffbdfdad79"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1RenderTarget.htm#a75675b32ba8fcf1a8ab82fffbdfdad79">mapPixelToCoords</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2i</a> &amp;point, const <a class="el" href="classcpp3ds_1_1View.htm">View</a> &amp;view) const </td></tr>
<tr class="memdesc:a75675b32ba8fcf1a8ab82fffbdfdad79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a point from target coordinates to world coordinates.  <a href="#a75675b32ba8fcf1a8ab82fffbdfdad79">More...</a><br /></td></tr>
<tr class="separator:a75675b32ba8fcf1a8ab82fffbdfdad79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae48105c264968176516ffa19b170a378"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2i</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1RenderTarget.htm#ae48105c264968176516ffa19b170a378">mapCoordsToPixel</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;point) const </td></tr>
<tr class="memdesc:ae48105c264968176516ffa19b170a378"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a point from world coordinates to target coordinates, using the current view.  <a href="#ae48105c264968176516ffa19b170a378">More...</a><br /></td></tr>
<tr class="separator:ae48105c264968176516ffa19b170a378"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85a40736de098848b3ec1bb77ae50fa5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2i</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1RenderTarget.htm#a85a40736de098848b3ec1bb77ae50fa5">mapCoordsToPixel</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;point, const <a class="el" href="classcpp3ds_1_1View.htm">View</a> &amp;view) const </td></tr>
<tr class="memdesc:a85a40736de098848b3ec1bb77ae50fa5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a point from world coordinates to target coordinates.  <a href="#a85a40736de098848b3ec1bb77ae50fa5">More...</a><br /></td></tr>
<tr class="separator:a85a40736de098848b3ec1bb77ae50fa5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2e8c33cc27a93be57b42526e71cd22a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1RenderTarget.htm#aa2e8c33cc27a93be57b42526e71cd22a">draw</a> (const <a class="el" href="classcpp3ds_1_1Drawable.htm">Drawable</a> &amp;drawable, const <a class="el" href="classcpp3ds_1_1RenderStates.htm">RenderStates</a> &amp;states=<a class="el" href="classcpp3ds_1_1RenderStates.htm#abf4de75522cf4deee9ef9bf145104c5e">RenderStates::Default</a>)</td></tr>
<tr class="memdesc:aa2e8c33cc27a93be57b42526e71cd22a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Draw a drawable object to the render-target.  <a href="#aa2e8c33cc27a93be57b42526e71cd22a">More...</a><br /></td></tr>
<tr class="separator:aa2e8c33cc27a93be57b42526e71cd22a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55fd6e8013d820bf87484fddf51ed835"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1RenderTarget.htm#a55fd6e8013d820bf87484fddf51ed835">draw</a> (const <a class="el" href="classcpp3ds_1_1Vertex.htm">Vertex</a> *vertices, unsigned int vertexCount, <a class="el" href="group__graphics.htm#ga387343a4508f0646a1948d7121df3b65">PrimitiveType</a> type, const <a class="el" href="classcpp3ds_1_1RenderStates.htm">RenderStates</a> &amp;states=<a class="el" href="classcpp3ds_1_1RenderStates.htm#abf4de75522cf4deee9ef9bf145104c5e">RenderStates::Default</a>)</td></tr>
<tr class="memdesc:a55fd6e8013d820bf87484fddf51ed835"><td class="mdescLeft">&#160;</td><td class="mdescRight">Draw primitives defined by an array of vertices.  <a href="#a55fd6e8013d820bf87484fddf51ed835">More...</a><br /></td></tr>
<tr class="separator:a55fd6e8013d820bf87484fddf51ed835"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afce6a8f6fcf06cf3c4907ca6965633e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1RenderTarget.htm#afce6a8f6fcf06cf3c4907ca6965633e4">pushGLStates</a> ()</td></tr>
<tr class="memdesc:afce6a8f6fcf06cf3c4907ca6965633e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Save the current OpenGL render states and matrices.  <a href="#afce6a8f6fcf06cf3c4907ca6965633e4">More...</a><br /></td></tr>
<tr class="separator:afce6a8f6fcf06cf3c4907ca6965633e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c454cc6929f6fc669c9e2fcfe3e0db9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1RenderTarget.htm#a6c454cc6929f6fc669c9e2fcfe3e0db9">popGLStates</a> ()</td></tr>
<tr class="memdesc:a6c454cc6929f6fc669c9e2fcfe3e0db9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Restore the previously saved OpenGL render states and matrices.  <a href="#a6c454cc6929f6fc669c9e2fcfe3e0db9">More...</a><br /></td></tr>
<tr class="separator:a6c454cc6929f6fc669c9e2fcfe3e0db9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af15d8a9394848836bbbfd954ed64daad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1RenderTarget.htm#af15d8a9394848836bbbfd954ed64daad">resetGLStates</a> ()</td></tr>
<tr class="memdesc:af15d8a9394848836bbbfd954ed64daad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset the internal OpenGL states so that the target is ready for drawing.  <a href="#af15d8a9394848836bbbfd954ed64daad">More...</a><br /></td></tr>
<tr class="separator:af15d8a9394848836bbbfd954ed64daad"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ac0d0215760ad1b3495a52551b41d0ac7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#ac0d0215760ad1b3495a52551b41d0ac7">initialize</a> ()</td></tr>
<tr class="memdesc:ac0d0215760ad1b3495a52551b41d0ac7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform some common internal initializations.  <a href="#ac0d0215760ad1b3495a52551b41d0ac7">More...</a><br /></td></tr>
<tr class="separator:ac0d0215760ad1b3495a52551b41d0ac7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a6640223338c473c7d08eef8e226a3ee4"><td class="memItemLeft" align="right" valign="top">priv::GlContext *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#a6640223338c473c7d08eef8e226a3ee4">m_context</a></td></tr>
<tr class="memdesc:a6640223338c473c7d08eef8e226a3ee4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Platform-specific implementation of the OpenGL context.  <a href="#a6640223338c473c7d08eef8e226a3ee4">More...</a><br /></td></tr>
<tr class="separator:a6640223338c473c7d08eef8e226a3ee4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4efe9fa070773bc9940a45769589d3ac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Clock.htm">Clock</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#a4efe9fa070773bc9940a45769589d3ac">m_clock</a></td></tr>
<tr class="memdesc:a4efe9fa070773bc9940a45769589d3ac"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classcpp3ds_1_1Clock.htm" title="Utility class that measures the elapsed time. ">Clock</a> for measuring the elapsed time between frames.  <a href="#a4efe9fa070773bc9940a45769589d3ac">More...</a><br /></td></tr>
<tr class="separator:a4efe9fa070773bc9940a45769589d3ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae62f29b886698b20e3a6dac60d0063fd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#ae62f29b886698b20e3a6dac60d0063fd">m_frameTimeLimit</a></td></tr>
<tr class="memdesc:ae62f29b886698b20e3a6dac60d0063fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Current framerate limit.  <a href="#ae62f29b886698b20e3a6dac60d0063fd">More...</a><br /></td></tr>
<tr class="separator:ae62f29b886698b20e3a6dac60d0063fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acedeaec0d5899172e777b36d565e2870"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2u</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Window.htm#acedeaec0d5899172e777b36d565e2870">m_size</a></td></tr>
<tr class="memdesc:acedeaec0d5899172e777b36d565e2870"><td class="mdescLeft">&#160;</td><td class="mdescRight">Current size of the window.  <a href="#acedeaec0d5899172e777b36d565e2870">More...</a><br /></td></tr>
<tr class="separator:acedeaec0d5899172e777b36d565e2870"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr class="memitem:a098d744115737ae3cf2d21153fcd6283"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1GlResource.htm#a098d744115737ae3cf2d21153fcd6283">ensureGlContext</a> ()</td></tr>
<tr class="memdesc:a098d744115737ae3cf2d21153fcd6283"><td class="mdescLeft">&#160;</td><td class="mdescRight">Make sure that a valid OpenGL context exists in the current thread.  <a href="#a098d744115737ae3cf2d21153fcd6283">More...</a><br /></td></tr>
<tr class="separator:a098d744115737ae3cf2d21153fcd6283"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classcpp3ds_1_1Window.htm" title="Window that serves as a target for OpenGL rendering. ">Window</a> that serves as a target for OpenGL rendering. </p>
<p><a class="el" href="classcpp3ds_1_1Window.htm" title="Window that serves as a target for OpenGL rendering. ">cpp3ds::Window</a> is the main class of the <a class="el" href="classcpp3ds_1_1Window.htm" title="Window that serves as a target for OpenGL rendering. ">Window</a> module.</p>
<p>It defines an OS window that is able to receive an OpenGL rendering.</p>
<p>A <a class="el" href="classcpp3ds_1_1Window.htm" title="Window that serves as a target for OpenGL rendering. ">cpp3ds::Window</a> can create its own new window, or be embedded into an already existing control using the create(handle) function. This can be useful for embedding an OpenGL rendering area into a view which is part of a bigger GUI with existing windows, controls, etc. It can also serve as embedding an OpenGL rendering area into a window created by another (probably richer) GUI library like Qt or wxWidgets.</p>
<p>The <a class="el" href="classcpp3ds_1_1Window.htm" title="Window that serves as a target for OpenGL rendering. ">cpp3ds::Window</a> class provides a simple interface for manipulating the window: move, resize, show/hide, control mouse cursor, etc. It also provides event handling through its pollEvent() and waitEvent() functions.</p>
<p>Note that OpenGL experts can pass their own parameters (antialiasing level, bits for the depth and stencil buffers, etc.) to the OpenGL context attached to the window, with the <a class="el" href="structcpp3ds_1_1ContextSettings.htm" title="Structure defining the settings of the OpenGL context attached to a window. ">cpp3ds::ContextSettings</a> structure which is passed as an optional argument when creating the window.</p>
<p>Usage example: </p><div class="fragment"><div class="line"><span class="comment">// Declare and create a new window</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1Window.htm">cpp3ds::Window</a> window(cpp3ds::VideoMode(800, 600), <span class="stringliteral">&quot;SFML window&quot;</span>);</div>
<div class="line"></div>
<div class="line"><span class="comment">// Limit the framerate to 60 frames per second (this step is optional)</span></div>
<div class="line">window.setFramerateLimit(60);</div>
<div class="line"></div>
<div class="line"><span class="comment">// The main loop - ends as soon as the window is closed</span></div>
<div class="line"><span class="keywordflow">while</span> (window.isOpen())</div>
<div class="line">{</div>
<div class="line">   <span class="comment">// Event processing</span></div>
<div class="line">   <a class="code" href="classcpp3ds_1_1Event.htm">cpp3ds::Event</a> event;</div>
<div class="line">   <span class="keywordflow">while</span> (window.pollEvent(event))</div>
<div class="line">   {</div>
<div class="line">       <span class="comment">// Request for closing the window</span></div>
<div class="line">       <span class="keywordflow">if</span> (event.<a class="code" href="classcpp3ds_1_1Event.htm#a222c5ba2981de1e7dfe3eceacad4edb6">type</a> == cpp3ds::Event::Closed)</div>
<div class="line">           window.close();</div>
<div class="line">   }</div>
<div class="line"></div>
<div class="line">   <span class="comment">// Activate the window for OpenGL rendering</span></div>
<div class="line">   window.setActive();</div>
<div class="line"></div>
<div class="line">   <span class="comment">// OpenGL drawing commands go here...</span></div>
<div class="line"></div>
<div class="line">   <span class="comment">// End the current frame and display its contents on screen</span></div>
<div class="line">   window.display();</div>
<div class="line">}</div>
</div><!-- fragment --> 
<p>Definition at line <a class="el" href="Window_2Window_8hpp_source.htm#l00047">47</a> of file <a class="el" href="Window_2Window_8hpp_source.htm">Window/Window.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="aadb663fc6a42ad556264b93e618f1b3c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::Window::Window </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>
<p>This constructor doesn't actually create the window, use the other constructors or call <a class="el" href="classcpp3ds_1_1Window.htm#a999220d29d8b13b6abfb94ba92660093" title="Create (or recreate) the window. ">create()</a> to do so. </p>

</div>
</div>
<a class="anchor" id="ab87d05bc2879506c86bfb17da985614d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual cpp3ds::Window::~Window </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>
<p>Closes the window and frees all the resources attached to it. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ad4d37c14de4a8fd568b33f7ade251c79"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Image.htm">Image</a> cpp3ds::Window::capture </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy the current contents of the window to an image. </p>
<p>This is a slow operation, whose main purpose is to make screenshots of the application. If you want to update an image with the contents of the window and then use it for drawing, you should rather use a sf::Texture and its update(Window&amp;) function. You can also draw things directly to a texture with the sf::RenderTexture class.</p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classcpp3ds_1_1Image.htm" title="Class for loading, manipulating and saving images. ">Image</a> containing the captured contents </dd></dl>

</div>
</div>
<a class="anchor" id="a600b4a42e3fefab9541de3dbace0abb5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::RenderTarget::clear </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>color</em> = <code><a class="el" href="classcpp3ds_1_1Color.htm">Color</a>(0,&#160;0,&#160;0,&#160;255)</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear the entire target with a single color. </p>
<p>This function is usually called once every frame, to clear the previous contents of the target.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">color</td><td>Fill color to use to clear the render target </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a58e801118537edf34faa9c8df8330eec"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Window::close </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Close the window and destroy all the attached resources. </p>
<p>After calling this function, the sf::Window instance remains valid and you can call <a class="el" href="classcpp3ds_1_1Window.htm#a999220d29d8b13b6abfb94ba92660093" title="Create (or recreate) the window. ">create()</a> to recreate the window. All other functions such as pollEvent() or <a class="el" href="classcpp3ds_1_1Window.htm#a01fbd134f2398937b5e9c9c02ba0480c" title="Display on screen what has been rendered to the window so far. ">display()</a> will still work (i.e. you don't have to test <a class="el" href="classcpp3ds_1_1Window.htm#a4f638ae7855c6bad225bacc58860e3dd" title="Tell whether or not the window is open. ">isOpen()</a> every time), and will have no effect on closed windows. </p>

</div>
</div>
<a class="anchor" id="a999220d29d8b13b6abfb94ba92660093"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Window::create </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structcpp3ds_1_1ContextSettings.htm">ContextSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em> = <code><a class="el" href="structcpp3ds_1_1ContextSettings.htm">ContextSettings</a>()</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create (or recreate) the window. </p>
<p>If the window was already created, it closes it first.</p>
<p>The parameter is an optional structure specifying advanced OpenGL context settings such as antialiasing, depth-buffer bits, etc.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">settings</td><td>Additional settings for the underlying OpenGL context </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a01fbd134f2398937b5e9c9c02ba0480c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Window::display </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Display on screen what has been rendered to the window so far. </p>
<p>This function is typically called after all OpenGL rendering has been done for the current frame, in order to show it on screen. </p>

</div>
</div>
<a class="anchor" id="aa2e8c33cc27a93be57b42526e71cd22a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::RenderTarget::draw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Drawable.htm">Drawable</a> &amp;&#160;</td>
          <td class="paramname"><em>drawable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1RenderStates.htm">RenderStates</a> &amp;&#160;</td>
          <td class="paramname"><em>states</em> = <code><a class="el" href="classcpp3ds_1_1RenderStates.htm#abf4de75522cf4deee9ef9bf145104c5e">RenderStates::Default</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Draw a drawable object to the render-target. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">drawable</td><td>Object to draw </td></tr>
    <tr><td class="paramname">states</td><td>Render states to use for drawing </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a55fd6e8013d820bf87484fddf51ed835"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::RenderTarget::draw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vertex.htm">Vertex</a> *&#160;</td>
          <td class="paramname"><em>vertices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>vertexCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__graphics.htm#ga387343a4508f0646a1948d7121df3b65">PrimitiveType</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1RenderStates.htm">RenderStates</a> &amp;&#160;</td>
          <td class="paramname"><em>states</em> = <code><a class="el" href="classcpp3ds_1_1RenderStates.htm#abf4de75522cf4deee9ef9bf145104c5e">RenderStates::Default</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Draw primitives defined by an array of vertices. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vertices</td><td>Pointer to the vertices </td></tr>
    <tr><td class="paramname">vertexCount</td><td>Number of vertices in the array </td></tr>
    <tr><td class="paramname">type</td><td>Type of primitives to draw </td></tr>
    <tr><td class="paramname">states</td><td>Render states to use for drawing </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a33cda9c67c7b2024e613fbf9f93f9217"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classcpp3ds_1_1View.htm">View</a>&amp; cpp3ds::RenderTarget::getDefaultView </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the default view of the render target. </p>
<p>The default view has the initial size of the render target, and never changes after the target has been created.</p>
<dl class="section return"><dt>Returns</dt><dd>The default view of the render target</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1RenderTarget.htm#a5bff7d4a2436923f6479a88b7fa41f9a" title="Change the current active view. ">setView</a>, <a class="el" href="classcpp3ds_1_1RenderTarget.htm#a13701786ddaff4085274b909a47977b4" title="Get the view currently in use in the render target. ">getView</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a7cdc14ee682c5caa0be1112fec71f17c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structcpp3ds_1_1ContextSettings.htm">ContextSettings</a>&amp; cpp3ds::Window::getSettings </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the settings of the OpenGL context of the window. </p>
<p>Note that these settings may be different from what was passed to the constructor or the <a class="el" href="classcpp3ds_1_1Window.htm#a999220d29d8b13b6abfb94ba92660093" title="Create (or recreate) the window. ">create()</a> function, if one or more settings were not supported. In this case, SFML chose the closest match.</p>
<dl class="section return"><dt>Returns</dt><dd>Structure containing the OpenGL context settings </dd></dl>

</div>
</div>
<a class="anchor" id="a2296089d5fb9368c34dff6d6631b5d5a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2u</a> cpp3ds::Window::getSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the size of the rendering region of the window. </p>
<p>The size doesn't include the titlebar and borders of the window.</p>
<dl class="section return"><dt>Returns</dt><dd>Size in pixels</dd></dl>
<dl class="section see"><dt>See also</dt><dd>setSize </dd></dl>

<p>Implements <a class="el" href="classcpp3ds_1_1RenderTarget.htm#af02b04b50f860d273779b617e01e99ef">cpp3ds::RenderTarget</a>.</p>

</div>
</div>
<a class="anchor" id="a13701786ddaff4085274b909a47977b4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classcpp3ds_1_1View.htm">View</a>&amp; cpp3ds::RenderTarget::getView </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the view currently in use in the render target. </p>
<dl class="section return"><dt>Returns</dt><dd>The view object that is currently used</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1RenderTarget.htm#a5bff7d4a2436923f6479a88b7fa41f9a" title="Change the current active view. ">setView</a>, <a class="el" href="classcpp3ds_1_1RenderTarget.htm#a33cda9c67c7b2024e613fbf9f93f9217" title="Get the default view of the render target. ">getDefaultView</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad2247b4beb5f974c27b25dd2fb6d6d22"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Rect.htm">IntRect</a> cpp3ds::RenderTarget::getViewport </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1View.htm">View</a> &amp;&#160;</td>
          <td class="paramname"><em>view</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the viewport of a view, applied to this render target. </p>
<p>The viewport is defined in the view as a ratio, this function simply applies this ratio to the current dimensions of the render target to calculate the pixels rectangle that the viewport actually covers in the target.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">view</td><td>The view for which we want to compute the viewport</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Viewport rectangle, expressed in pixels </dd></dl>

</div>
</div>
<a class="anchor" id="ac0d0215760ad1b3495a52551b41d0ac7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Window::initialize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Perform some common internal initializations. </p>

</div>
</div>
<a class="anchor" id="a4f638ae7855c6bad225bacc58860e3dd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::Window::isOpen </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tell whether or not the window is open. </p>
<p>This function returns whether or not the window exists. Note that a hidden window (setVisible(false)) is open (therefore this function would return true).</p>
<dl class="section return"><dt>Returns</dt><dd>True if the window is open, false if it has been closed </dd></dl>

</div>
</div>
<a class="anchor" id="ae48105c264968176516ffa19b170a378"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2i</a> cpp3ds::RenderTarget::mapCoordsToPixel </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>point</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert a point from world coordinates to target coordinates, using the current view. </p>
<p>This function is an overload of the mapCoordsToPixel function that implicitely uses the current view. It is equivalent to: </p><div class="fragment"><div class="line">target.<a class="code" href="classcpp3ds_1_1RenderTarget.htm#ae48105c264968176516ffa19b170a378">mapCoordsToPixel</a>(point, target.<a class="code" href="classcpp3ds_1_1RenderTarget.htm#a13701786ddaff4085274b909a47977b4">getView</a>());</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">point</td><td>Point to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The converted point, in target coordinates (pixels)</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1RenderTarget.htm#ab3d9d693536c86a0ec50d7339225d0a6" title="Convert a point from target coordinates to world coordinates, using the current view. ">mapPixelToCoords</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a85a40736de098848b3ec1bb77ae50fa5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2i</a> cpp3ds::RenderTarget::mapCoordsToPixel </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>point</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1View.htm">View</a> &amp;&#160;</td>
          <td class="paramname"><em>view</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert a point from world coordinates to target coordinates. </p>
<p>This function finds the pixel of the render-target that matches the given 2D point. In other words, it goes through the same process as the graphics card, to compute the final position of a rendered point.</p>
<p>Initially, both coordinate systems (world units and target pixels) match perfectly. But if you define a custom view or resize your render-target, this assertion is not true anymore, ie. a point located at (150, 75) in your 2D world may map to the pixel (10, 50) of your render-target &ndash; if the view is translated by (140, 25).</p>
<p>This version uses a custom view for calculations, see the other overload of the function if you want to use the current view of the render-target.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">point</td><td>Point to convert </td></tr>
    <tr><td class="paramname">view</td><td>The view to use for converting the point</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The converted point, in target coordinates (pixels)</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1RenderTarget.htm#ab3d9d693536c86a0ec50d7339225d0a6" title="Convert a point from target coordinates to world coordinates, using the current view. ">mapPixelToCoords</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab3d9d693536c86a0ec50d7339225d0a6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> cpp3ds::RenderTarget::mapPixelToCoords </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2i</a> &amp;&#160;</td>
          <td class="paramname"><em>point</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert a point from target coordinates to world coordinates, using the current view. </p>
<p>This function is an overload of the mapPixelToCoords function that implicitely uses the current view. It is equivalent to: </p><div class="fragment"><div class="line">target.<a class="code" href="classcpp3ds_1_1RenderTarget.htm#ab3d9d693536c86a0ec50d7339225d0a6">mapPixelToCoords</a>(point, target.<a class="code" href="classcpp3ds_1_1RenderTarget.htm#a13701786ddaff4085274b909a47977b4">getView</a>());</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">point</td><td>Pixel to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The converted point, in "world" coordinates</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1RenderTarget.htm#ae48105c264968176516ffa19b170a378" title="Convert a point from world coordinates to target coordinates, using the current view. ">mapCoordsToPixel</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a75675b32ba8fcf1a8ab82fffbdfdad79"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2f</a> cpp3ds::RenderTarget::mapPixelToCoords </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2i</a> &amp;&#160;</td>
          <td class="paramname"><em>point</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1View.htm">View</a> &amp;&#160;</td>
          <td class="paramname"><em>view</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert a point from target coordinates to world coordinates. </p>
<p>This function finds the 2D position that matches the given pixel of the render-target. In other words, it does the inverse of what the graphics card does, to find the initial position of a rendered pixel.</p>
<p>Initially, both coordinate systems (world units and target pixels) match perfectly. But if you define a custom view or resize your render-target, this assertion is not true anymore, ie. a point located at (10, 50) in your render-target may map to the point (150, 75) in your 2D world &ndash; if the view is translated by (140, 25).</p>
<p>For render-windows, this function is typically used to find which point (or object) is located below the mouse cursor.</p>
<p>This version uses a custom view for calculations, see the other overload of the function if you want to use the current view of the render-target.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">point</td><td>Pixel to convert </td></tr>
    <tr><td class="paramname">view</td><td>The view to use for converting the point</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The converted point, in "world" units</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1RenderTarget.htm#ae48105c264968176516ffa19b170a378" title="Convert a point from world coordinates to target coordinates, using the current view. ">mapCoordsToPixel</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a6c454cc6929f6fc669c9e2fcfe3e0db9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::RenderTarget::popGLStates </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Restore the previously saved OpenGL render states and matrices. </p>
<p>See the description of pushGLStates to get a detailed description of these functions.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1RenderTarget.htm#afce6a8f6fcf06cf3c4907ca6965633e4" title="Save the current OpenGL render states and matrices. ">pushGLStates</a> </dd></dl>

</div>
</div>
<a class="anchor" id="afce6a8f6fcf06cf3c4907ca6965633e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::RenderTarget::pushGLStates </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Save the current OpenGL render states and matrices. </p>
<p>This function can be used when you mix SFML drawing and direct OpenGL rendering. Combined with PopGLStates, it ensures that: </p><ul>
<li>SFML's internal states are not messed up by your OpenGL code </li>
<li>your OpenGL states are not modified by a call to a SFML function</li>
</ul>
<p>More specifically, it must be used around code that calls Draw functions. Example: </p><div class="fragment"><div class="line"><span class="comment">// OpenGL code here...</span></div>
<div class="line">window.pushGLStates();</div>
<div class="line">window.draw(...);</div>
<div class="line">window.draw(...);</div>
<div class="line">window.popGLStates();</div>
<div class="line"><span class="comment">// OpenGL code here...</span></div>
</div><!-- fragment --><p>Note that this function is quite expensive: it saves all the possible OpenGL states and matrices, even the ones you don't care about. Therefore it should be used wisely. It is provided for convenience, but the best results will be achieved if you handle OpenGL states yourself (because you know which states have really changed, and need to be saved and restored). Take a look at the ResetGLStates function if you do so.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1RenderTarget.htm#a6c454cc6929f6fc669c9e2fcfe3e0db9" title="Restore the previously saved OpenGL render states and matrices. ">popGLStates</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af15d8a9394848836bbbfd954ed64daad"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::RenderTarget::resetGLStates </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reset the internal OpenGL states so that the target is ready for drawing. </p>
<p>This function can be used when you mix SFML drawing and direct OpenGL rendering, if you choose not to use pushGLStates/popGLStates. It makes sure that all OpenGL states needed by SFML are set, so that subsequent <a class="el" href="classcpp3ds_1_1RenderTarget.htm#aa2e8c33cc27a93be57b42526e71cd22a" title="Draw a drawable object to the render-target. ">draw()</a> calls will work as expected.</p>
<p>Example: </p><div class="fragment"><div class="line"><span class="comment">// OpenGL code here...</span></div>
<div class="line">glPushAttrib(...);</div>
<div class="line">window.resetGLStates();</div>
<div class="line">window.draw(...);</div>
<div class="line">window.draw(...);</div>
<div class="line">glPopAttrib(...);</div>
<div class="line"><span class="comment">// OpenGL code here...</span></div>
</div><!-- fragment --> 
</div>
</div>
<a class="anchor" id="a317b0f433ee1321a4ee23dfcaea38300"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::Window::setActive </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>active</em> = <code>true</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Activate or deactivate the window as the current target for OpenGL rendering. </p>
<p>A window is active only on the current thread, if you want to make it active on another thread you have to deactivate it on the previous thread first if it was active. Only one window can be active on a thread at a time, thus the window previously active (if any) automatically gets deactivated.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">active</td><td>True to activate, false to deactivate</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if operation was successful, false otherwise </dd></dl>

</div>
</div>
<a class="anchor" id="ab43a09693e55ffc0eaf50829edb350ba"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Window::setFramerateLimit </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>limit</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Limit the framerate to a maximum fixed frequency. </p>
<p>If a limit is set, the window will use a small delay after each call to <a class="el" href="classcpp3ds_1_1Window.htm#a01fbd134f2398937b5e9c9c02ba0480c" title="Display on screen what has been rendered to the window so far. ">display()</a> to ensure that the current frame lasted long enough to match the framerate limit. SFML will try to match the given limit as much as it can, but since it internally uses cpp3ds::sleep, whose precision depends on the underlying OS, the results may be a little unprecise as well (for example, you can get 65 FPS when requesting 60).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">limit</td><td>Framerate limit, in frames per seconds (use 0 to disable limit) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6fa76a63bd33d9069e398b74e5046742"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::Window::setVerticalSyncEnabled </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enabled</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable or disable vertical synchronization. </p>
<p>Activating vertical synchronization will limit the number of frames displayed to the refresh rate of the monitor. This can avoid some visual artifacts, and limit the framerate to a good value (but not constant across different computers).</p>
<p>Vertical synchronization is disabled by default.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">enabled</td><td>True to enable v-sync, false to deactivate it </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5bff7d4a2436923f6479a88b7fa41f9a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::RenderTarget::setView </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1View.htm">View</a> &amp;&#160;</td>
          <td class="paramname"><em>view</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Change the current active view. </p>
<p>The view is like a 2D camera, it controls which part of the 2D scene is visible, and how it is viewed in the render-target. The new view will affect everything that is drawn, until another view is set. The render target keeps its own copy of the view object, so it is not necessary to keep the original one alive after calling this function. To restore the original view of the target, you can pass the result of <a class="el" href="classcpp3ds_1_1RenderTarget.htm#a33cda9c67c7b2024e613fbf9f93f9217" title="Get the default view of the render target. ">getDefaultView()</a> to this function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">view</td><td>New view to use</td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1RenderTarget.htm#a13701786ddaff4085274b909a47977b4" title="Get the view currently in use in the render target. ">getView</a>, <a class="el" href="classcpp3ds_1_1RenderTarget.htm#a33cda9c67c7b2024e613fbf9f93f9217" title="Get the default view of the render target. ">getDefaultView</a> </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a4efe9fa070773bc9940a45769589d3ac"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Clock.htm">Clock</a> cpp3ds::Window::m_clock</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="classcpp3ds_1_1Clock.htm" title="Utility class that measures the elapsed time. ">Clock</a> for measuring the elapsed time between frames. </p>

<p>Definition at line <a class="el" href="Window_2Window_8hpp_source.htm#l00231">231</a> of file <a class="el" href="Window_2Window_8hpp_source.htm">Window/Window.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a6640223338c473c7d08eef8e226a3ee4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">priv::GlContext* cpp3ds::Window::m_context</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Platform-specific implementation of the OpenGL context. </p>

<p>Definition at line <a class="el" href="Window_2Window_8hpp_source.htm#l00230">230</a> of file <a class="el" href="Window_2Window_8hpp_source.htm">Window/Window.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="ae62f29b886698b20e3a6dac60d0063fd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Time.htm">Time</a> cpp3ds::Window::m_frameTimeLimit</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Current framerate limit. </p>

<p>Definition at line <a class="el" href="Window_2Window_8hpp_source.htm#l00232">232</a> of file <a class="el" href="Window_2Window_8hpp_source.htm">Window/Window.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="acedeaec0d5899172e777b36d565e2870"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2u</a> cpp3ds::Window::m_size</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Current size of the window. </p>

<p>Definition at line <a class="el" href="Window_2Window_8hpp_source.htm#l00233">233</a> of file <a class="el" href="Window_2Window_8hpp_source.htm">Window/Window.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Window_2Window_8hpp_source.htm">Window/Window.hpp</a></li>
</ul>
</div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
