<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>cpp3ds</b></li><li class="navelem"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm">Utf&lt; 32 &gt;</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classcpp3ds_1_1Utf_3_0132_01_4-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cpp3ds::Utf&lt; 32 &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Specialization of the <a class="el" href="classcpp3ds_1_1Utf.htm" title="Utility class providing generic functions for UTF conversions. ">Utf</a> template for UTF-32.  
 <a href="classcpp3ds_1_1Utf_3_0132_01_4.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Utf_8hpp_source.htm">Utf.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ab283b8e4140ff8d64541832be195cc60"><td class="memTemplParams" colspan="2">template&lt;typename In &gt; </td></tr>
<tr class="memitem:ab283b8e4140ff8d64541832be195cc60"><td class="memTemplItemLeft" align="right" valign="top">static In&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#ab283b8e4140ff8d64541832be195cc60">decode</a> (In begin, In end, Uint32 &amp;output, Uint32 replacement=0)</td></tr>
<tr class="memdesc:ab283b8e4140ff8d64541832be195cc60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decode a single UTF-32 character.  <a href="#ab283b8e4140ff8d64541832be195cc60">More...</a><br /></td></tr>
<tr class="separator:ab283b8e4140ff8d64541832be195cc60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b08f329d50f21afdc04e87e4a9ea02c"><td class="memTemplParams" colspan="2">template&lt;typename Out &gt; </td></tr>
<tr class="memitem:a8b08f329d50f21afdc04e87e4a9ea02c"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#a8b08f329d50f21afdc04e87e4a9ea02c">encode</a> (Uint32 input, Out output, Uint32 replacement=0)</td></tr>
<tr class="memdesc:a8b08f329d50f21afdc04e87e4a9ea02c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encode a single UTF-32 character.  <a href="#a8b08f329d50f21afdc04e87e4a9ea02c">More...</a><br /></td></tr>
<tr class="separator:a8b08f329d50f21afdc04e87e4a9ea02c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06106438822a7c5fd7eb26d1004587f8"><td class="memTemplParams" colspan="2">template&lt;typename In &gt; </td></tr>
<tr class="memitem:a06106438822a7c5fd7eb26d1004587f8"><td class="memTemplItemLeft" align="right" valign="top">static In&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#a06106438822a7c5fd7eb26d1004587f8">next</a> (In begin, In end)</td></tr>
<tr class="memdesc:a06106438822a7c5fd7eb26d1004587f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Advance to the next UTF-32 character.  <a href="#a06106438822a7c5fd7eb26d1004587f8">More...</a><br /></td></tr>
<tr class="separator:a06106438822a7c5fd7eb26d1004587f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e7be9b0e98588d6ef5e1c1447df54ae"><td class="memTemplParams" colspan="2">template&lt;typename In &gt; </td></tr>
<tr class="memitem:a9e7be9b0e98588d6ef5e1c1447df54ae"><td class="memTemplItemLeft" align="right" valign="top">static std::size_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#a9e7be9b0e98588d6ef5e1c1447df54ae">count</a> (In begin, In end)</td></tr>
<tr class="memdesc:a9e7be9b0e98588d6ef5e1c1447df54ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Count the number of characters of a UTF-32 sequence.  <a href="#a9e7be9b0e98588d6ef5e1c1447df54ae">More...</a><br /></td></tr>
<tr class="separator:a9e7be9b0e98588d6ef5e1c1447df54ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7549d4a519f6f116305c302a52dba71"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:ac7549d4a519f6f116305c302a52dba71"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#ac7549d4a519f6f116305c302a52dba71">fromAnsi</a> (In begin, In end, Out output, const std::locale &amp;locale=std::locale())</td></tr>
<tr class="memdesc:ac7549d4a519f6f116305c302a52dba71"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an ANSI characters range to UTF-32.  <a href="#ac7549d4a519f6f116305c302a52dba71">More...</a><br /></td></tr>
<tr class="separator:ac7549d4a519f6f116305c302a52dba71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b786e6ce083ba9c796b742d2507f270"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:a9b786e6ce083ba9c796b742d2507f270"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#a9b786e6ce083ba9c796b742d2507f270">fromWide</a> (In begin, In end, Out output)</td></tr>
<tr class="memdesc:a9b786e6ce083ba9c796b742d2507f270"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a wide characters range to UTF-32.  <a href="#a9b786e6ce083ba9c796b742d2507f270">More...</a><br /></td></tr>
<tr class="separator:a9b786e6ce083ba9c796b742d2507f270"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61150bc16a9309fafd45783a3f86d815"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:a61150bc16a9309fafd45783a3f86d815"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#a61150bc16a9309fafd45783a3f86d815">fromLatin1</a> (In begin, In end, Out output)</td></tr>
<tr class="memdesc:a61150bc16a9309fafd45783a3f86d815"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a latin-1 (ISO-5589-1) characters range to UTF-32.  <a href="#a61150bc16a9309fafd45783a3f86d815">More...</a><br /></td></tr>
<tr class="separator:a61150bc16a9309fafd45783a3f86d815"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a591a0f3b92cf02594ed8f9e7bec4dfba"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:a591a0f3b92cf02594ed8f9e7bec4dfba"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#a591a0f3b92cf02594ed8f9e7bec4dfba">toAnsi</a> (In begin, In end, Out output, char replacement=0, const std::locale &amp;locale=std::locale())</td></tr>
<tr class="memdesc:a591a0f3b92cf02594ed8f9e7bec4dfba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an UTF-32 characters range to ANSI characters.  <a href="#a591a0f3b92cf02594ed8f9e7bec4dfba">More...</a><br /></td></tr>
<tr class="separator:a591a0f3b92cf02594ed8f9e7bec4dfba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae29a0d8e8eec9a75f13f21b89b54aa2"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:aae29a0d8e8eec9a75f13f21b89b54aa2"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#aae29a0d8e8eec9a75f13f21b89b54aa2">toWide</a> (In begin, In end, Out output, wchar_t replacement=0)</td></tr>
<tr class="memdesc:aae29a0d8e8eec9a75f13f21b89b54aa2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an UTF-32 characters range to wide characters.  <a href="#aae29a0d8e8eec9a75f13f21b89b54aa2">More...</a><br /></td></tr>
<tr class="separator:aae29a0d8e8eec9a75f13f21b89b54aa2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea6ccd13c695ca1c8ab2c5a5d34dfcac"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:aea6ccd13c695ca1c8ab2c5a5d34dfcac"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#aea6ccd13c695ca1c8ab2c5a5d34dfcac">toLatin1</a> (In begin, In end, Out output, char replacement=0)</td></tr>
<tr class="memdesc:aea6ccd13c695ca1c8ab2c5a5d34dfcac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an UTF-16 characters range to latin-1 (ISO-5589-1) characters.  <a href="#aea6ccd13c695ca1c8ab2c5a5d34dfcac">More...</a><br /></td></tr>
<tr class="separator:aea6ccd13c695ca1c8ab2c5a5d34dfcac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d87ed6b5b0809bb2bd3d2ec9a912b48"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:a1d87ed6b5b0809bb2bd3d2ec9a912b48"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#a1d87ed6b5b0809bb2bd3d2ec9a912b48">toUtf8</a> (In begin, In end, Out output)</td></tr>
<tr class="memdesc:a1d87ed6b5b0809bb2bd3d2ec9a912b48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a UTF-32 characters range to UTF-8.  <a href="#a1d87ed6b5b0809bb2bd3d2ec9a912b48">More...</a><br /></td></tr>
<tr class="separator:a1d87ed6b5b0809bb2bd3d2ec9a912b48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93588235d188296dfe3b4a783099c7c2"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:a93588235d188296dfe3b4a783099c7c2"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#a93588235d188296dfe3b4a783099c7c2">toUtf16</a> (In begin, In end, Out output)</td></tr>
<tr class="memdesc:a93588235d188296dfe3b4a783099c7c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a UTF-32 characters range to UTF-16.  <a href="#a93588235d188296dfe3b4a783099c7c2">More...</a><br /></td></tr>
<tr class="separator:a93588235d188296dfe3b4a783099c7c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7ac3a0f63308e78ccaf847b3f372ffb"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:ab7ac3a0f63308e78ccaf847b3f372ffb"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#ab7ac3a0f63308e78ccaf847b3f372ffb">toUtf32</a> (In begin, In end, Out output)</td></tr>
<tr class="memdesc:ab7ac3a0f63308e78ccaf847b3f372ffb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a UTF-32 characters range to UTF-32.  <a href="#ab7ac3a0f63308e78ccaf847b3f372ffb">More...</a><br /></td></tr>
<tr class="separator:ab7ac3a0f63308e78ccaf847b3f372ffb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28cc106b728f5c6944d307ffec37094a"><td class="memTemplParams" colspan="2">template&lt;typename In &gt; </td></tr>
<tr class="memitem:a28cc106b728f5c6944d307ffec37094a"><td class="memTemplItemLeft" align="right" valign="top">static Uint32&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#a28cc106b728f5c6944d307ffec37094a">decodeAnsi</a> (In input, const std::locale &amp;locale=std::locale())</td></tr>
<tr class="memdesc:a28cc106b728f5c6944d307ffec37094a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decode a single ANSI character to UTF-32.  <a href="#a28cc106b728f5c6944d307ffec37094a">More...</a><br /></td></tr>
<tr class="separator:a28cc106b728f5c6944d307ffec37094a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a821cac7de653f4e0d7b544b8eebe903a"><td class="memTemplParams" colspan="2">template&lt;typename In &gt; </td></tr>
<tr class="memitem:a821cac7de653f4e0d7b544b8eebe903a"><td class="memTemplItemLeft" align="right" valign="top">static Uint32&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#a821cac7de653f4e0d7b544b8eebe903a">decodeWide</a> (In input)</td></tr>
<tr class="memdesc:a821cac7de653f4e0d7b544b8eebe903a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decode a single wide character to UTF-32.  <a href="#a821cac7de653f4e0d7b544b8eebe903a">More...</a><br /></td></tr>
<tr class="separator:a821cac7de653f4e0d7b544b8eebe903a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f3b4b6490d3ef950aa8c316b15254a5"><td class="memTemplParams" colspan="2">template&lt;typename Out &gt; </td></tr>
<tr class="memitem:a5f3b4b6490d3ef950aa8c316b15254a5"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#a5f3b4b6490d3ef950aa8c316b15254a5">encodeAnsi</a> (Uint32 codepoint, Out output, char replacement=0, const std::locale &amp;locale=std::locale())</td></tr>
<tr class="memdesc:a5f3b4b6490d3ef950aa8c316b15254a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encode a single UTF-32 character to ANSI.  <a href="#a5f3b4b6490d3ef950aa8c316b15254a5">More...</a><br /></td></tr>
<tr class="separator:a5f3b4b6490d3ef950aa8c316b15254a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ea4603e2913c7ff32f722b5a45b0b25"><td class="memTemplParams" colspan="2">template&lt;typename Out &gt; </td></tr>
<tr class="memitem:a4ea4603e2913c7ff32f722b5a45b0b25"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Utf_3_0132_01_4.htm#a4ea4603e2913c7ff32f722b5a45b0b25">encodeWide</a> (Uint32 codepoint, Out output, wchar_t replacement=0)</td></tr>
<tr class="memdesc:a4ea4603e2913c7ff32f722b5a45b0b25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encode a single UTF-32 character to wide.  <a href="#a4ea4603e2913c7ff32f722b5a45b0b25">More...</a><br /></td></tr>
<tr class="separator:a4ea4603e2913c7ff32f722b5a45b0b25"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;&gt;<br />
class cpp3ds::Utf&lt; 32 &gt;</h3>

<p>Specialization of the <a class="el" href="classcpp3ds_1_1Utf.htm" title="Utility class providing generic functions for UTF conversions. ">Utf</a> template for UTF-32. </p>

<p>Definition at line <a class="el" href="Utf_8hpp_source.htm#l00462">462</a> of file <a class="el" href="Utf_8hpp_source.htm">Utf.hpp</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a9e7be9b0e98588d6ef5e1c1447df54ae"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::size_t <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::count </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Count the number of characters of a UTF-32 sequence. </p>
<p>This function is trivial for UTF-32, which can store every character in a single storage element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">end</td><td>Iterator pointing to the end of the input sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator pointing to one past the last read element of the input sequence </dd></dl>

</div>
</div>
<a class="anchor" id="ab283b8e4140ff8d64541832be195cc60"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static In <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::decode </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint32 &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint32&#160;</td>
          <td class="paramname"><em>replacement</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Decode a single UTF-32 character. </p>
<p>Decoding a character means finding its unique 32-bits code (called the codepoint) in the Unicode standard. For UTF-32, the character value is the same as the codepoint.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">end</td><td>Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">output</td><td>Codepoint of the decoded UTF-32 character </td></tr>
    <tr><td class="paramname">replacement</td><td>Replacement character to use in case the UTF-8 sequence is invalid</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator pointing to one past the last read element of the input sequence </dd></dl>

</div>
</div>
<a class="anchor" id="a28cc106b728f5c6944d307ffec37094a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Uint32 <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::decodeAnsi </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::locale &amp;&#160;</td>
          <td class="paramname"><em>locale</em> = <code>std::locale()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Decode a single ANSI character to UTF-32. </p>
<p>This function does not exist in other specializations of cpp3ds::Utf&lt;&gt;, it is defined for convenience (it is used by several other conversion functions).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input</td><td>Input ANSI character </td></tr>
    <tr><td class="paramname">locale</td><td>Locale to use for conversion</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Converted character </dd></dl>

</div>
</div>
<a class="anchor" id="a821cac7de653f4e0d7b544b8eebe903a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Uint32 <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::decodeWide </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Decode a single wide character to UTF-32. </p>
<p>This function does not exist in other specializations of cpp3ds::Utf&lt;&gt;, it is defined for convenience (it is used by several other conversion functions).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input</td><td>Input wide character</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Converted character </dd></dl>

</div>
</div>
<a class="anchor" id="a8b08f329d50f21afdc04e87e4a9ea02c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::encode </td>
          <td>(</td>
          <td class="paramtype">Uint32&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint32&#160;</td>
          <td class="paramname"><em>replacement</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Encode a single UTF-32 character. </p>
<p>Encoding a character means converting a unique 32-bits code (called the codepoint) in the target encoding, UTF-32. For UTF-32, the codepoint is the same as the character value.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">input</td><td>Codepoint to encode as UTF-32 </td></tr>
    <tr><td class="paramname">output</td><td>Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">replacement</td><td>Replacement for characters not convertible to UTF-32 (use 0 to skip them)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="a5f3b4b6490d3ef950aa8c316b15254a5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::encodeAnsi </td>
          <td>(</td>
          <td class="paramtype">Uint32&#160;</td>
          <td class="paramname"><em>codepoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>replacement</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::locale &amp;&#160;</td>
          <td class="paramname"><em>locale</em> = <code>std::locale()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Encode a single UTF-32 character to ANSI. </p>
<p>This function does not exist in other specializations of cpp3ds::Utf&lt;&gt;, it is defined for convenience (it is used by several other conversion functions).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">codepoint</td><td>Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">output</td><td>Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">replacement</td><td>Replacement if the input character is not convertible to ANSI (use 0 to skip it) </td></tr>
    <tr><td class="paramname">locale</td><td>Locale to use for conversion</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="a4ea4603e2913c7ff32f722b5a45b0b25"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::encodeWide </td>
          <td>(</td>
          <td class="paramtype">Uint32&#160;</td>
          <td class="paramname"><em>codepoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">wchar_t&#160;</td>
          <td class="paramname"><em>replacement</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Encode a single UTF-32 character to wide. </p>
<p>This function does not exist in other specializations of cpp3ds::Utf&lt;&gt;, it is defined for convenience (it is used by several other conversion functions).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">codepoint</td><td>Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">output</td><td>Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">replacement</td><td>Replacement if the input character is not convertible to wide (use 0 to skip it)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="ac7549d4a519f6f116305c302a52dba71"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::fromAnsi </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::locale &amp;&#160;</td>
          <td class="paramname"><em>locale</em> = <code>std::locale()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert an ANSI characters range to UTF-32. </p>
<p>The current global locale will be used by default, unless you pass a custom one in the <em>locale</em> parameter.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">end</td><td>Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">output</td><td>Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">locale</td><td>Locale to use for conversion</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="a61150bc16a9309fafd45783a3f86d815"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::fromLatin1 </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>output</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert a latin-1 (ISO-5589-1) characters range to UTF-32. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">end</td><td>Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">output</td><td>Iterator pointing to the beginning of the output sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="a9b786e6ce083ba9c796b742d2507f270"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::fromWide </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>output</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert a wide characters range to UTF-32. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">end</td><td>Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">output</td><td>Iterator pointing to the beginning of the output sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="a06106438822a7c5fd7eb26d1004587f8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static In <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::next </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Advance to the next UTF-32 character. </p>
<p>This function is trivial for UTF-32, which can store every character in a single storage element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">end</td><td>Iterator pointing to the end of the input sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator pointing to one past the last read element of the input sequence </dd></dl>

</div>
</div>
<a class="anchor" id="a591a0f3b92cf02594ed8f9e7bec4dfba"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::toAnsi </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>replacement</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::locale &amp;&#160;</td>
          <td class="paramname"><em>locale</em> = <code>std::locale()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert an UTF-32 characters range to ANSI characters. </p>
<p>The current global locale will be used by default, unless you pass a custom one in the <em>locale</em> parameter.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">end</td><td>Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">output</td><td>Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">replacement</td><td>Replacement for characters not convertible to ANSI (use 0 to skip them) </td></tr>
    <tr><td class="paramname">locale</td><td>Locale to use for conversion</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="aea6ccd13c695ca1c8ab2c5a5d34dfcac"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::toLatin1 </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>replacement</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert an UTF-16 characters range to latin-1 (ISO-5589-1) characters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">end</td><td>Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">output</td><td>Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">replacement</td><td>Replacement for characters not convertible to wide (use 0 to skip them)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="a93588235d188296dfe3b4a783099c7c2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::toUtf16 </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>output</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert a UTF-32 characters range to UTF-16. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">end</td><td>Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">output</td><td>Iterator pointing to the beginning of the output sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="ab7ac3a0f63308e78ccaf847b3f372ffb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::toUtf32 </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>output</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert a UTF-32 characters range to UTF-32. </p>
<p>This functions does nothing more than a direct copy; it is defined only to provide the same interface as other specializations of the cpp3ds::Utf&lt;&gt; template, and allow generic code to be written on top of it.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">end</td><td>Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">output</td><td>Iterator pointing to the beginning of the output sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="a1d87ed6b5b0809bb2bd3d2ec9a912b48"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::toUtf8 </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>output</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert a UTF-32 characters range to UTF-8. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">end</td><td>Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">output</td><td>Iterator pointing to the beginning of the output sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="aae29a0d8e8eec9a75f13f21b89b54aa2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out <a class="el" href="classcpp3ds_1_1Utf.htm">cpp3ds::Utf</a>&lt; 32 &gt;::toWide </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">wchar_t&#160;</td>
          <td class="paramname"><em>replacement</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert an UTF-32 characters range to wide characters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">end</td><td>Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">output</td><td>Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">replacement</td><td>Replacement for characters not convertible to wide (use 0 to skip them)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Utf_8hpp_source.htm">Utf.hpp</a></li>
</ul>
</div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
