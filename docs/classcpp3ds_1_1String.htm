<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>cpp3ds</b></li><li class="navelem"><a class="el" href="classcpp3ds_1_1String.htm">String</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="#related">Related Functions</a> &#124;
<a href="classcpp3ds_1_1String-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cpp3ds::String Class Reference<div class="ingroups"><a class="el" href="group__system.htm">System module</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Utility string class that automatically handles conversions between types and encodings.  
 <a href="classcpp3ds_1_1String.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="String_8hpp_source.htm">String.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a97077442b6cb268ad78bc33fb5bf85a6"><td class="memItemLeft" align="right" valign="top">typedef std::basic_string&lt; Uint32 &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a97077442b6cb268ad78bc33fb5bf85a6">Iterator</a></td></tr>
<tr class="memdesc:a97077442b6cb268ad78bc33fb5bf85a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator type.  <a href="#a97077442b6cb268ad78bc33fb5bf85a6">More...</a><br /></td></tr>
<tr class="separator:a97077442b6cb268ad78bc33fb5bf85a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adda981aca4af2ad88c029bdde8f8a2be"><td class="memItemLeft" align="right" valign="top">typedef std::basic_string&lt; Uint32 &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#adda981aca4af2ad88c029bdde8f8a2be">ConstIterator</a></td></tr>
<tr class="memdesc:adda981aca4af2ad88c029bdde8f8a2be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant iterator type.  <a href="#adda981aca4af2ad88c029bdde8f8a2be">More...</a><br /></td></tr>
<tr class="separator:adda981aca4af2ad88c029bdde8f8a2be"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ab5045eda77656dc38c602edbc18adbba"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#ab5045eda77656dc38c602edbc18adbba">String</a> ()</td></tr>
<tr class="memdesc:ab5045eda77656dc38c602edbc18adbba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#ab5045eda77656dc38c602edbc18adbba">More...</a><br /></td></tr>
<tr class="separator:ab5045eda77656dc38c602edbc18adbba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace2a3794abea897947503b064cd8b216"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#ace2a3794abea897947503b064cd8b216">String</a> (char ansiChar, const std::locale &amp;locale=std::locale())</td></tr>
<tr class="memdesc:ace2a3794abea897947503b064cd8b216"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from a single ANSI character and a locale.  <a href="#ace2a3794abea897947503b064cd8b216">More...</a><br /></td></tr>
<tr class="separator:ace2a3794abea897947503b064cd8b216"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22404f775e1d63bde8c0963d8b4d4a31"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a22404f775e1d63bde8c0963d8b4d4a31">String</a> (wchar_t wideChar)</td></tr>
<tr class="memdesc:a22404f775e1d63bde8c0963d8b4d4a31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from single wide character.  <a href="#a22404f775e1d63bde8c0963d8b4d4a31">More...</a><br /></td></tr>
<tr class="separator:a22404f775e1d63bde8c0963d8b4d4a31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ab5201a3d431d69e88a980e522cc92d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a2ab5201a3d431d69e88a980e522cc92d">String</a> (Uint32 utf32Char)</td></tr>
<tr class="memdesc:a2ab5201a3d431d69e88a980e522cc92d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from single UTF-32 character.  <a href="#a2ab5201a3d431d69e88a980e522cc92d">More...</a><br /></td></tr>
<tr class="separator:a2ab5201a3d431d69e88a980e522cc92d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f48b15c3405658bdc2544a2250964ce"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a2f48b15c3405658bdc2544a2250964ce">String</a> (const char *ansiString, const std::locale &amp;locale=std::locale())</td></tr>
<tr class="memdesc:a2f48b15c3405658bdc2544a2250964ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from a null-terminated C-style ANSI string and a locale.  <a href="#a2f48b15c3405658bdc2544a2250964ce">More...</a><br /></td></tr>
<tr class="separator:a2f48b15c3405658bdc2544a2250964ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6de4044e4dcc79d8d9414da072cf8f72"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a6de4044e4dcc79d8d9414da072cf8f72">String</a> (const std::string &amp;ansiString, const std::locale &amp;locale=std::locale())</td></tr>
<tr class="memdesc:a6de4044e4dcc79d8d9414da072cf8f72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from an ANSI string and a locale.  <a href="#a6de4044e4dcc79d8d9414da072cf8f72">More...</a><br /></td></tr>
<tr class="separator:a6de4044e4dcc79d8d9414da072cf8f72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad60424267d86a5b0636620a90de9d40c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#ad60424267d86a5b0636620a90de9d40c">String</a> (const wchar_t *wideString)</td></tr>
<tr class="memdesc:ad60424267d86a5b0636620a90de9d40c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from null-terminated C-style wide string.  <a href="#ad60424267d86a5b0636620a90de9d40c">More...</a><br /></td></tr>
<tr class="separator:ad60424267d86a5b0636620a90de9d40c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a330892e7225cd6a432ea72e3e59bae0a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a330892e7225cd6a432ea72e3e59bae0a">String</a> (const std::wstring &amp;wideString)</td></tr>
<tr class="memdesc:a330892e7225cd6a432ea72e3e59bae0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from a wide string.  <a href="#a330892e7225cd6a432ea72e3e59bae0a">More...</a><br /></td></tr>
<tr class="separator:a330892e7225cd6a432ea72e3e59bae0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ad9c7a2d37b6092f0c1a6bc0b0b6c45"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a6ad9c7a2d37b6092f0c1a6bc0b0b6c45">String</a> (const Uint32 *utf32String)</td></tr>
<tr class="memdesc:a6ad9c7a2d37b6092f0c1a6bc0b0b6c45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from a null-terminated C-style UTF-32 string.  <a href="#a6ad9c7a2d37b6092f0c1a6bc0b0b6c45">More...</a><br /></td></tr>
<tr class="separator:a6ad9c7a2d37b6092f0c1a6bc0b0b6c45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab61abe670968a90471c6609eb6d824e3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#ab61abe670968a90471c6609eb6d824e3">String</a> (const std::basic_string&lt; Uint32 &gt; &amp;utf32String)</td></tr>
<tr class="memdesc:ab61abe670968a90471c6609eb6d824e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from an UTF-32 string.  <a href="#ab61abe670968a90471c6609eb6d824e3">More...</a><br /></td></tr>
<tr class="separator:ab61abe670968a90471c6609eb6d824e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb3e504744e0a7878cc1b9f3e82991e8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#acb3e504744e0a7878cc1b9f3e82991e8">String</a> (const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;copy)</td></tr>
<tr class="memdesc:acb3e504744e0a7878cc1b9f3e82991e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <a href="#acb3e504744e0a7878cc1b9f3e82991e8">More...</a><br /></td></tr>
<tr class="separator:acb3e504744e0a7878cc1b9f3e82991e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3830705d5b07d2fb2ceb99935c0032c0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a3830705d5b07d2fb2ceb99935c0032c0">operator std::string</a> () const </td></tr>
<tr class="memdesc:a3830705d5b07d2fb2ceb99935c0032c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implicit cast operator to std::string (ANSI string)  <a href="#a3830705d5b07d2fb2ceb99935c0032c0">More...</a><br /></td></tr>
<tr class="separator:a3830705d5b07d2fb2ceb99935c0032c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec7aefe6d7d42f01732005121bdedc79"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#aec7aefe6d7d42f01732005121bdedc79">operator std::wstring</a> () const </td></tr>
<tr class="memdesc:aec7aefe6d7d42f01732005121bdedc79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implicit cast operator to std::wstring (wide string)  <a href="#aec7aefe6d7d42f01732005121bdedc79">More...</a><br /></td></tr>
<tr class="separator:aec7aefe6d7d42f01732005121bdedc79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca186c7701bbcd06ee1cbec495a2aa8a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#aca186c7701bbcd06ee1cbec495a2aa8a">toAnsiString</a> (const std::locale &amp;locale=std::locale()) const </td></tr>
<tr class="memdesc:aca186c7701bbcd06ee1cbec495a2aa8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the unicode string to an ANSI string.  <a href="#aca186c7701bbcd06ee1cbec495a2aa8a">More...</a><br /></td></tr>
<tr class="separator:aca186c7701bbcd06ee1cbec495a2aa8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abba6a1dd0ac8a205145e9de1253e8335"><td class="memItemLeft" align="right" valign="top">std::wstring&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#abba6a1dd0ac8a205145e9de1253e8335">toWideString</a> () const </td></tr>
<tr class="memdesc:abba6a1dd0ac8a205145e9de1253e8335"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the unicode string to a wide string.  <a href="#abba6a1dd0ac8a205145e9de1253e8335">More...</a><br /></td></tr>
<tr class="separator:abba6a1dd0ac8a205145e9de1253e8335"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33f7c1d17bee042e4ce83006cd31b77d"><td class="memItemLeft" align="right" valign="top">std::basic_string&lt; Uint8 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a33f7c1d17bee042e4ce83006cd31b77d">toUtf8</a> () const </td></tr>
<tr class="memdesc:a33f7c1d17bee042e4ce83006cd31b77d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the unicode string to a UTF-8 string.  <a href="#a33f7c1d17bee042e4ce83006cd31b77d">More...</a><br /></td></tr>
<tr class="separator:a33f7c1d17bee042e4ce83006cd31b77d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d379baf388f85c1c9de6a8a09c02f17"><td class="memItemLeft" align="right" valign="top">std::basic_string&lt; Uint16 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a1d379baf388f85c1c9de6a8a09c02f17">toUtf16</a> () const </td></tr>
<tr class="memdesc:a1d379baf388f85c1c9de6a8a09c02f17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the unicode string to a UTF-16 string.  <a href="#a1d379baf388f85c1c9de6a8a09c02f17">More...</a><br /></td></tr>
<tr class="separator:a1d379baf388f85c1c9de6a8a09c02f17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa221fd261fd0a4d156601f8414848ecd"><td class="memItemLeft" align="right" valign="top">std::basic_string&lt; Uint32 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#aa221fd261fd0a4d156601f8414848ecd">toUtf32</a> () const </td></tr>
<tr class="memdesc:aa221fd261fd0a4d156601f8414848ecd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the unicode string to a UTF-32 string.  <a href="#aa221fd261fd0a4d156601f8414848ecd">More...</a><br /></td></tr>
<tr class="separator:aa221fd261fd0a4d156601f8414848ecd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29686ec7e5bdfa7597ddbf595e68f4ac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a29686ec7e5bdfa7597ddbf595e68f4ac">operator=</a> (const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;right)</td></tr>
<tr class="memdesc:a29686ec7e5bdfa7597ddbf595e68f4ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of assignment operator.  <a href="#a29686ec7e5bdfa7597ddbf595e68f4ac">More...</a><br /></td></tr>
<tr class="separator:a29686ec7e5bdfa7597ddbf595e68f4ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb398c3ced8ac8bd85ca0fc80f62a007"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#abb398c3ced8ac8bd85ca0fc80f62a007">operator+=</a> (const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;right)</td></tr>
<tr class="memdesc:abb398c3ced8ac8bd85ca0fc80f62a007"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of += operator to append an UTF-32 string.  <a href="#abb398c3ced8ac8bd85ca0fc80f62a007">More...</a><br /></td></tr>
<tr class="separator:abb398c3ced8ac8bd85ca0fc80f62a007"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a231ed6419bf1c66e6466df6d57bfeb62"><td class="memItemLeft" align="right" valign="top">Uint32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a231ed6419bf1c66e6466df6d57bfeb62">operator[]</a> (std::size_t index) const </td></tr>
<tr class="memdesc:a231ed6419bf1c66e6466df6d57bfeb62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of [] operator to access a character by its position.  <a href="#a231ed6419bf1c66e6466df6d57bfeb62">More...</a><br /></td></tr>
<tr class="separator:a231ed6419bf1c66e6466df6d57bfeb62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a179a8bd904d5877c3d12f35cc6d7a1bb"><td class="memItemLeft" align="right" valign="top">Uint32 &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a179a8bd904d5877c3d12f35cc6d7a1bb">operator[]</a> (std::size_t index)</td></tr>
<tr class="memdesc:a179a8bd904d5877c3d12f35cc6d7a1bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of [] operator to access a character by its position.  <a href="#a179a8bd904d5877c3d12f35cc6d7a1bb">More...</a><br /></td></tr>
<tr class="separator:a179a8bd904d5877c3d12f35cc6d7a1bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38d2a70a40b4ba6dc71175179554a3ec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a38d2a70a40b4ba6dc71175179554a3ec">clear</a> ()</td></tr>
<tr class="memdesc:a38d2a70a40b4ba6dc71175179554a3ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the string.  <a href="#a38d2a70a40b4ba6dc71175179554a3ec">More...</a><br /></td></tr>
<tr class="separator:a38d2a70a40b4ba6dc71175179554a3ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e6c1bbba394612974a12e3d4477717b"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a3e6c1bbba394612974a12e3d4477717b">getSize</a> () const </td></tr>
<tr class="memdesc:a3e6c1bbba394612974a12e3d4477717b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size of the string.  <a href="#a3e6c1bbba394612974a12e3d4477717b">More...</a><br /></td></tr>
<tr class="separator:a3e6c1bbba394612974a12e3d4477717b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac067c212f638dbaa7ce838beee6286ef"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#ac067c212f638dbaa7ce838beee6286ef">isEmpty</a> () const </td></tr>
<tr class="memdesc:ac067c212f638dbaa7ce838beee6286ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether the string is empty or not.  <a href="#ac067c212f638dbaa7ce838beee6286ef">More...</a><br /></td></tr>
<tr class="separator:ac067c212f638dbaa7ce838beee6286ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55bb0a42c42c16d4812a88bad7d5faba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a55bb0a42c42c16d4812a88bad7d5faba">erase</a> (std::size_t position, std::size_t count=1)</td></tr>
<tr class="memdesc:a55bb0a42c42c16d4812a88bad7d5faba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erase one or more characters from the string.  <a href="#a55bb0a42c42c16d4812a88bad7d5faba">More...</a><br /></td></tr>
<tr class="separator:a55bb0a42c42c16d4812a88bad7d5faba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5f3abd8c010d7da5463b1368ad870e6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#af5f3abd8c010d7da5463b1368ad870e6">insert</a> (std::size_t position, const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;str)</td></tr>
<tr class="memdesc:af5f3abd8c010d7da5463b1368ad870e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert one or more characters into the string.  <a href="#af5f3abd8c010d7da5463b1368ad870e6">More...</a><br /></td></tr>
<tr class="separator:af5f3abd8c010d7da5463b1368ad870e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a478a73f566b6cf5a960c16648eff641f"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a478a73f566b6cf5a960c16648eff641f">find</a> (const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;str, std::size_t start=0) const </td></tr>
<tr class="memdesc:a478a73f566b6cf5a960c16648eff641f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find a sequence of one or more characters in the string.  <a href="#a478a73f566b6cf5a960c16648eff641f">More...</a><br /></td></tr>
<tr class="separator:a478a73f566b6cf5a960c16648eff641f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f9e69e4829dd47377959de82798e65a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a8f9e69e4829dd47377959de82798e65a">replace</a> (std::size_t position, std::size_t length, const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;replaceWith)</td></tr>
<tr class="memdesc:a8f9e69e4829dd47377959de82798e65a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace a substring with another string.  <a href="#a8f9e69e4829dd47377959de82798e65a">More...</a><br /></td></tr>
<tr class="separator:a8f9e69e4829dd47377959de82798e65a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc60acb36b146cf0c696b06f51a542c6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#acc60acb36b146cf0c696b06f51a542c6">replace</a> (const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;searchFor, const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;replaceWith)</td></tr>
<tr class="memdesc:acc60acb36b146cf0c696b06f51a542c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace all occurrences of a substring with a replacement string.  <a href="#acc60acb36b146cf0c696b06f51a542c6">More...</a><br /></td></tr>
<tr class="separator:acc60acb36b146cf0c696b06f51a542c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7652aba9ae1dd06519f9587358eb4b6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1String.htm">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#af7652aba9ae1dd06519f9587358eb4b6">substring</a> (std::size_t position, std::size_t length=<a class="el" href="classcpp3ds_1_1String.htm#a5a81b7a64d2665c2f20050d59e8864bc">InvalidPos</a>) const </td></tr>
<tr class="memdesc:af7652aba9ae1dd06519f9587358eb4b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a part of the string.  <a href="#af7652aba9ae1dd06519f9587358eb4b6">More...</a><br /></td></tr>
<tr class="separator:af7652aba9ae1dd06519f9587358eb4b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92a3d3605b95562ac554787656873b3d"><td class="memItemLeft" align="right" valign="top">const Uint32 *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a92a3d3605b95562ac554787656873b3d">getData</a> () const </td></tr>
<tr class="memdesc:a92a3d3605b95562ac554787656873b3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a pointer to the C-style array of characters.  <a href="#a92a3d3605b95562ac554787656873b3d">More...</a><br /></td></tr>
<tr class="separator:a92a3d3605b95562ac554787656873b3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad68c2381784dac35347a6331d38faecc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1String.htm#a97077442b6cb268ad78bc33fb5bf85a6">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#ad68c2381784dac35347a6331d38faecc">begin</a> ()</td></tr>
<tr class="memdesc:ad68c2381784dac35347a6331d38faecc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an iterator to the beginning of the string.  <a href="#ad68c2381784dac35347a6331d38faecc">More...</a><br /></td></tr>
<tr class="separator:ad68c2381784dac35347a6331d38faecc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2240f3d3925c05858b41e193afb41bac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1String.htm#adda981aca4af2ad88c029bdde8f8a2be">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a2240f3d3925c05858b41e193afb41bac">begin</a> () const </td></tr>
<tr class="memdesc:a2240f3d3925c05858b41e193afb41bac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an iterator to the beginning of the string.  <a href="#a2240f3d3925c05858b41e193afb41bac">More...</a><br /></td></tr>
<tr class="separator:a2240f3d3925c05858b41e193afb41bac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6584439243eabfe53a9418a99b0fa385"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1String.htm#a97077442b6cb268ad78bc33fb5bf85a6">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a6584439243eabfe53a9418a99b0fa385">end</a> ()</td></tr>
<tr class="memdesc:a6584439243eabfe53a9418a99b0fa385"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an iterator to the beginning of the string.  <a href="#a6584439243eabfe53a9418a99b0fa385">More...</a><br /></td></tr>
<tr class="separator:a6584439243eabfe53a9418a99b0fa385"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaad4fec856630d591f7f6bf33840737"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1String.htm#adda981aca4af2ad88c029bdde8f8a2be">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#aaaad4fec856630d591f7f6bf33840737">end</a> () const </td></tr>
<tr class="memdesc:aaaad4fec856630d591f7f6bf33840737"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an iterator to the beginning of the string.  <a href="#aaaad4fec856630d591f7f6bf33840737">More...</a><br /></td></tr>
<tr class="separator:aaaad4fec856630d591f7f6bf33840737"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a0124bcaf5e50b628c3a2455fb2977c88"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0124bcaf5e50b628c3a2455fb2977c88"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="classcpp3ds_1_1String.htm">String</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a0124bcaf5e50b628c3a2455fb2977c88">fromUtf8</a> (T <a class="el" href="classcpp3ds_1_1String.htm#ad68c2381784dac35347a6331d38faecc">begin</a>, T <a class="el" href="classcpp3ds_1_1String.htm#a6584439243eabfe53a9418a99b0fa385">end</a>)</td></tr>
<tr class="memdesc:a0124bcaf5e50b628c3a2455fb2977c88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new <a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">cpp3ds::String</a> from a UTF-8 encoded string.  <a href="#a0124bcaf5e50b628c3a2455fb2977c88">More...</a><br /></td></tr>
<tr class="separator:a0124bcaf5e50b628c3a2455fb2977c88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d437cfe536c90a8b2dc3f3366e7b54b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6d437cfe536c90a8b2dc3f3366e7b54b"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="classcpp3ds_1_1String.htm">String</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a6d437cfe536c90a8b2dc3f3366e7b54b">fromUtf16</a> (T <a class="el" href="classcpp3ds_1_1String.htm#ad68c2381784dac35347a6331d38faecc">begin</a>, T <a class="el" href="classcpp3ds_1_1String.htm#a6584439243eabfe53a9418a99b0fa385">end</a>)</td></tr>
<tr class="memdesc:a6d437cfe536c90a8b2dc3f3366e7b54b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new <a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">cpp3ds::String</a> from a UTF-16 encoded string.  <a href="#a6d437cfe536c90a8b2dc3f3366e7b54b">More...</a><br /></td></tr>
<tr class="separator:a6d437cfe536c90a8b2dc3f3366e7b54b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a246a51e6e807820bba432560c1679261"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a246a51e6e807820bba432560c1679261"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="classcpp3ds_1_1String.htm">String</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a246a51e6e807820bba432560c1679261">fromUtf32</a> (T <a class="el" href="classcpp3ds_1_1String.htm#ad68c2381784dac35347a6331d38faecc">begin</a>, T <a class="el" href="classcpp3ds_1_1String.htm#a6584439243eabfe53a9418a99b0fa385">end</a>)</td></tr>
<tr class="memdesc:a246a51e6e807820bba432560c1679261"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new <a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">cpp3ds::String</a> from a UTF-32 encoded string.  <a href="#a246a51e6e807820bba432560c1679261">More...</a><br /></td></tr>
<tr class="separator:a246a51e6e807820bba432560c1679261"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a5a81b7a64d2665c2f20050d59e8864bc"><td class="memItemLeft" align="right" valign="top">static const std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a5a81b7a64d2665c2f20050d59e8864bc">InvalidPos</a></td></tr>
<tr class="memdesc:a5a81b7a64d2665c2f20050d59e8864bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents an invalid position in the string.  <a href="#a5a81b7a64d2665c2f20050d59e8864bc">More...</a><br /></td></tr>
<tr class="separator:a5a81b7a64d2665c2f20050d59e8864bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a483931724196c580552b68751fb4d837"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a483931724196c580552b68751fb4d837"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;left, const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;right)</td></tr>
<tr class="separator:a483931724196c580552b68751fb4d837"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5158a142e0966685ec7fb4e147b24ef0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5158a142e0966685ec7fb4e147b24ef0"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;</b> (const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;left, const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;right)</td></tr>
<tr class="separator:a5158a142e0966685ec7fb4e147b24ef0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="related"></a>
Related Functions</h2></td></tr>
<tr><td class="ititle" colspan="2"><p>(Note that these are not member functions.) </p>
</td></tr>
<tr class="memitem:a483931724196c580552b68751fb4d837"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a483931724196c580552b68751fb4d837">operator==</a> (const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;left, const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;right)</td></tr>
<tr class="memdesc:a483931724196c580552b68751fb4d837"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of == operator to compare two UTF-32 strings.  <a href="#a483931724196c580552b68751fb4d837">More...</a><br /></td></tr>
<tr class="separator:a483931724196c580552b68751fb4d837"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bfb9217788a9978499b8d5696bb0ef2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a3bfb9217788a9978499b8d5696bb0ef2">operator!=</a> (const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;left, const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;right)</td></tr>
<tr class="memdesc:a3bfb9217788a9978499b8d5696bb0ef2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of != operator to compare two UTF-32 strings.  <a href="#a3bfb9217788a9978499b8d5696bb0ef2">More...</a><br /></td></tr>
<tr class="separator:a3bfb9217788a9978499b8d5696bb0ef2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5158a142e0966685ec7fb4e147b24ef0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a5158a142e0966685ec7fb4e147b24ef0">operator&lt;</a> (const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;left, const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;right)</td></tr>
<tr class="memdesc:a5158a142e0966685ec7fb4e147b24ef0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of &lt; operator to compare two UTF-32 strings.  <a href="#a5158a142e0966685ec7fb4e147b24ef0">More...</a><br /></td></tr>
<tr class="separator:a5158a142e0966685ec7fb4e147b24ef0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac96278a8cbe282632b11f0c8c007df0c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#ac96278a8cbe282632b11f0c8c007df0c">operator&gt;</a> (const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;left, const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;right)</td></tr>
<tr class="memdesc:ac96278a8cbe282632b11f0c8c007df0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of &gt; operator to compare two UTF-32 strings.  <a href="#ac96278a8cbe282632b11f0c8c007df0c">More...</a><br /></td></tr>
<tr class="separator:ac96278a8cbe282632b11f0c8c007df0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1c1bb5dcf02aad3b2c0a1bf74a11cc9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#ac1c1bb5dcf02aad3b2c0a1bf74a11cc9">operator&lt;=</a> (const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;left, const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;right)</td></tr>
<tr class="memdesc:ac1c1bb5dcf02aad3b2c0a1bf74a11cc9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of &lt;= operator to compare two UTF-32 strings.  <a href="#ac1c1bb5dcf02aad3b2c0a1bf74a11cc9">More...</a><br /></td></tr>
<tr class="separator:ac1c1bb5dcf02aad3b2c0a1bf74a11cc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a112689eec28e0ca9489e8c4ec6a34493"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#a112689eec28e0ca9489e8c4ec6a34493">operator&gt;=</a> (const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;left, const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;right)</td></tr>
<tr class="memdesc:a112689eec28e0ca9489e8c4ec6a34493"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of &gt;= operator to compare two UTF-32 strings.  <a href="#a112689eec28e0ca9489e8c4ec6a34493">More...</a><br /></td></tr>
<tr class="separator:a112689eec28e0ca9489e8c4ec6a34493"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af140f992b7698cf1448677c2c8e11bf1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcpp3ds_1_1String.htm">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1String.htm#af140f992b7698cf1448677c2c8e11bf1">operator+</a> (const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;left, const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;right)</td></tr>
<tr class="memdesc:af140f992b7698cf1448677c2c8e11bf1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary + operator to concatenate two strings.  <a href="#af140f992b7698cf1448677c2c8e11bf1">More...</a><br /></td></tr>
<tr class="separator:af140f992b7698cf1448677c2c8e11bf1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Utility string class that automatically handles conversions between types and encodings. </p>
<p><a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">cpp3ds::String</a> is a utility string class defined mainly for convenience.</p>
<p>It is a Unicode string (implemented using UTF-32), thus it can store any character in the world (european, chinese, arabic, hebrew, etc.).</p>
<p>It automatically handles conversions from/to ANSI and wide strings, so that you can work with standard string classes and still be compatible with functions taking a <a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">cpp3ds::String</a>.</p>
<div class="fragment"><div class="line"><a class="code" href="classcpp3ds_1_1String.htm">cpp3ds::String</a> s;</div>
<div class="line"></div>
<div class="line">std::string s1 = s;  <span class="comment">// automatically converted to ANSI string</span></div>
<div class="line">std::wstring s2 = s; <span class="comment">// automatically converted to wide string</span></div>
<div class="line">s = <span class="stringliteral">&quot;hello&quot;</span>;         <span class="comment">// automatically converted from ANSI string</span></div>
<div class="line">s = L<span class="stringliteral">&quot;hello&quot;</span>;        <span class="comment">// automatically converted from wide string</span></div>
<div class="line">s += <span class="charliteral">&#39;a&#39;</span>;            <span class="comment">// automatically converted from ANSI string</span></div>
<div class="line">s += L<span class="charliteral">&#39;a&#39;</span>;           <span class="comment">// automatically converted from wide string</span></div>
</div><!-- fragment --><p>Conversions involving ANSI strings use the default user locale. However it is possible to use a custom locale if necessary: </p><div class="fragment"><div class="line">std::locale locale;</div>
<div class="line"><a class="code" href="classcpp3ds_1_1String.htm">cpp3ds::String</a> s;</div>
<div class="line">...</div>
<div class="line">std::string s1 = s.<a class="code" href="classcpp3ds_1_1String.htm#aca186c7701bbcd06ee1cbec495a2aa8a">toAnsiString</a>(locale);</div>
<div class="line">s = <a class="code" href="classcpp3ds_1_1String.htm">cpp3ds::String</a>(<span class="stringliteral">&quot;hello&quot;</span>, locale);</div>
</div><!-- fragment --><p><a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">cpp3ds::String</a> defines the most important functions of the standard std::string class: removing, random access, iterating, appending, comparing, etc. However it is a simple class provided for convenience, and you may have to consider using a more optimized class if your program requires complex string handling. The automatic conversion functions will then take care of converting your string to <a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">cpp3ds::String</a> whenever SFML requires it.</p>
<p>Please note that SFML also defines a low-level, generic interface for Unicode handling, see the <a class="el" href="classcpp3ds_1_1Utf.htm" title="Utility class providing generic functions for UTF conversions. ">cpp3ds::Utf</a> classes. </p>

<p>Definition at line <a class="el" href="String_8hpp_source.htm#l00042">42</a> of file <a class="el" href="String_8hpp_source.htm">String.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="adda981aca4af2ad88c029bdde8f8a2be"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::basic_string&lt;Uint32&gt;::const_iterator <a class="el" href="classcpp3ds_1_1String.htm#adda981aca4af2ad88c029bdde8f8a2be">cpp3ds::String::ConstIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constant iterator type. </p>

<p>Definition at line <a class="el" href="String_8hpp_source.htm#l00050">50</a> of file <a class="el" href="String_8hpp_source.htm">String.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a97077442b6cb268ad78bc33fb5bf85a6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::basic_string&lt;Uint32&gt;::iterator <a class="el" href="classcpp3ds_1_1String.htm#a97077442b6cb268ad78bc33fb5bf85a6">cpp3ds::String::Iterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Iterator type. </p>

<p>Definition at line <a class="el" href="String_8hpp_source.htm#l00049">49</a> of file <a class="el" href="String_8hpp_source.htm">String.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ab5045eda77656dc38c602edbc18adbba"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::String::String </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>
<p>This constructor creates an empty string. </p>

</div>
</div>
<a class="anchor" id="ace2a3794abea897947503b064cd8b216"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::String::String </td>
          <td>(</td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>ansiChar</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::locale &amp;&#160;</td>
          <td class="paramname"><em>locale</em> = <code>std::locale()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct from a single ANSI character and a locale. </p>
<p>The source character is converted to UTF-32 according to the given locale.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ansiChar</td><td>ANSI character to convert </td></tr>
    <tr><td class="paramname">locale</td><td>Locale to use for conversion </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a22404f775e1d63bde8c0963d8b4d4a31"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::String::String </td>
          <td>(</td>
          <td class="paramtype">wchar_t&#160;</td>
          <td class="paramname"><em>wideChar</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct from single wide character. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">wideChar</td><td>Wide character to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2ab5201a3d431d69e88a980e522cc92d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::String::String </td>
          <td>(</td>
          <td class="paramtype">Uint32&#160;</td>
          <td class="paramname"><em>utf32Char</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct from single UTF-32 character. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">utf32Char</td><td>UTF-32 character to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2f48b15c3405658bdc2544a2250964ce"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::String::String </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ansiString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::locale &amp;&#160;</td>
          <td class="paramname"><em>locale</em> = <code>std::locale()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct from a null-terminated C-style ANSI string and a locale. </p>
<p>The source string is converted to UTF-32 according to the given locale.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ansiString</td><td>ANSI string to convert </td></tr>
    <tr><td class="paramname">locale</td><td>Locale to use for conversion </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6de4044e4dcc79d8d9414da072cf8f72"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::String::String </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>ansiString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::locale &amp;&#160;</td>
          <td class="paramname"><em>locale</em> = <code>std::locale()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct from an ANSI string and a locale. </p>
<p>The source string is converted to UTF-32 according to the given locale.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ansiString</td><td>ANSI string to convert </td></tr>
    <tr><td class="paramname">locale</td><td>Locale to use for conversion </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad60424267d86a5b0636620a90de9d40c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::String::String </td>
          <td>(</td>
          <td class="paramtype">const wchar_t *&#160;</td>
          <td class="paramname"><em>wideString</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct from null-terminated C-style wide string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">wideString</td><td>Wide string to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a330892e7225cd6a432ea72e3e59bae0a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::String::String </td>
          <td>(</td>
          <td class="paramtype">const std::wstring &amp;&#160;</td>
          <td class="paramname"><em>wideString</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct from a wide string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">wideString</td><td>Wide string to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6ad9c7a2d37b6092f0c1a6bc0b0b6c45"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::String::String </td>
          <td>(</td>
          <td class="paramtype">const Uint32 *&#160;</td>
          <td class="paramname"><em>utf32String</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct from a null-terminated C-style UTF-32 string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">utf32String</td><td>UTF-32 string to assign </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab61abe670968a90471c6609eb6d824e3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::String::String </td>
          <td>(</td>
          <td class="paramtype">const std::basic_string&lt; Uint32 &gt; &amp;&#160;</td>
          <td class="paramname"><em>utf32String</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct from an UTF-32 string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">utf32String</td><td>UTF-32 string to assign </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="acb3e504744e0a7878cc1b9f3e82991e8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::String::String </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>copy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">copy</td><td>Instance to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ad68c2381784dac35347a6331d38faecc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1String.htm#a97077442b6cb268ad78bc33fb5bf85a6">Iterator</a> cpp3ds::String::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an iterator to the beginning of the string. </p>
<dl class="section return"><dt>Returns</dt><dd>Read-write iterator to the beginning of the string characters</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#a6584439243eabfe53a9418a99b0fa385" title="Return an iterator to the beginning of the string. ">end</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a2240f3d3925c05858b41e193afb41bac"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1String.htm#adda981aca4af2ad88c029bdde8f8a2be">ConstIterator</a> cpp3ds::String::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an iterator to the beginning of the string. </p>
<dl class="section return"><dt>Returns</dt><dd>Read-only iterator to the beginning of the string characters</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#a6584439243eabfe53a9418a99b0fa385" title="Return an iterator to the beginning of the string. ">end</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a38d2a70a40b4ba6dc71175179554a3ec"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::String::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Clear the string. </p>
<p>This function removes all the characters from the string.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#ac067c212f638dbaa7ce838beee6286ef" title="Check whether the string is empty or not. ">isEmpty</a>, <a class="el" href="classcpp3ds_1_1String.htm#a55bb0a42c42c16d4812a88bad7d5faba" title="Erase one or more characters from the string. ">erase</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a6584439243eabfe53a9418a99b0fa385"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1String.htm#a97077442b6cb268ad78bc33fb5bf85a6">Iterator</a> cpp3ds::String::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an iterator to the beginning of the string. </p>
<p>The end iterator refers to 1 position past the last character; thus it represents an invalid character and should never be accessed.</p>
<dl class="section return"><dt>Returns</dt><dd>Read-write iterator to the end of the string characters</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#ad68c2381784dac35347a6331d38faecc" title="Return an iterator to the beginning of the string. ">begin</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aaaad4fec856630d591f7f6bf33840737"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1String.htm#adda981aca4af2ad88c029bdde8f8a2be">ConstIterator</a> cpp3ds::String::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return an iterator to the beginning of the string. </p>
<p>The end iterator refers to 1 position past the last character; thus it represents an invalid character and should never be accessed.</p>
<dl class="section return"><dt>Returns</dt><dd>Read-only iterator to the end of the string characters</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#ad68c2381784dac35347a6331d38faecc" title="Return an iterator to the beginning of the string. ">begin</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a55bb0a42c42c16d4812a88bad7d5faba"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::String::erase </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Erase one or more characters from the string. </p>
<p>This function removes a sequence of <em>count</em> characters starting from <em>position</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>Position of the first character to erase </td></tr>
    <tr><td class="paramname">count</td><td>Number of characters to erase </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a478a73f566b6cf5a960c16648eff641f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t cpp3ds::String::find </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>start</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find a sequence of one or more characters in the string. </p>
<p>This function searches for the characters of <em>str</em> into the string, starting from <em>start</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>Characters to find </td></tr>
    <tr><td class="paramname">start</td><td>Where to begin searching</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Position of <em>str</em> in the string, or <a class="el" href="classcpp3ds_1_1String.htm#a5a81b7a64d2665c2f20050d59e8864bc" title="Represents an invalid position in the string. ">String::InvalidPos</a> if not found </dd></dl>

</div>
</div>
<a class="anchor" id="a6d437cfe536c90a8b2dc3f3366e7b54b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classcpp3ds_1_1String.htm">String</a> cpp3ds::String::fromUtf16 </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a new <a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">cpp3ds::String</a> from a UTF-16 encoded string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Forward iterator to the begining of the UTF-16 sequence </td></tr>
    <tr><td class="paramname">end</td><td>Forward iterator to the end of the UTF-16 sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">cpp3ds::String</a> containing the source string</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#a0124bcaf5e50b628c3a2455fb2977c88" title="Create a new cpp3ds::String from a UTF-8 encoded string. ">fromUtf8</a>, <a class="el" href="classcpp3ds_1_1String.htm#a246a51e6e807820bba432560c1679261" title="Create a new cpp3ds::String from a UTF-32 encoded string. ">fromUtf32</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a246a51e6e807820bba432560c1679261"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classcpp3ds_1_1String.htm">String</a> cpp3ds::String::fromUtf32 </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a new <a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">cpp3ds::String</a> from a UTF-32 encoded string. </p>
<p>This function is provided for consistency, it is equivalent to using the constructors that takes a const cpp3ds::Uint32* or a std::basic_string&lt;cpp3ds::Uint32&gt;.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Forward iterator to the begining of the UTF-32 sequence </td></tr>
    <tr><td class="paramname">end</td><td>Forward iterator to the end of the UTF-32 sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">cpp3ds::String</a> containing the source string</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#a0124bcaf5e50b628c3a2455fb2977c88" title="Create a new cpp3ds::String from a UTF-8 encoded string. ">fromUtf8</a>, <a class="el" href="classcpp3ds_1_1String.htm#a6d437cfe536c90a8b2dc3f3366e7b54b" title="Create a new cpp3ds::String from a UTF-16 encoded string. ">fromUtf16</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0124bcaf5e50b628c3a2455fb2977c88"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classcpp3ds_1_1String.htm">String</a> cpp3ds::String::fromUtf8 </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a new <a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">cpp3ds::String</a> from a UTF-8 encoded string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>Forward iterator to the begining of the UTF-8 sequence </td></tr>
    <tr><td class="paramname">end</td><td>Forward iterator to the end of the UTF-8 sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">cpp3ds::String</a> containing the source string</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#a6d437cfe536c90a8b2dc3f3366e7b54b" title="Create a new cpp3ds::String from a UTF-16 encoded string. ">fromUtf16</a>, <a class="el" href="classcpp3ds_1_1String.htm#a246a51e6e807820bba432560c1679261" title="Create a new cpp3ds::String from a UTF-32 encoded string. ">fromUtf32</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a92a3d3605b95562ac554787656873b3d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const Uint32* cpp3ds::String::getData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a pointer to the C-style array of characters. </p>
<p>This functions provides a read-only access to a null-terminated C-style representation of the string. The returned pointer is temporary and is meant only for immediate use, thus it is not recommended to store it.</p>
<dl class="section return"><dt>Returns</dt><dd>Read-only pointer to the array of characters </dd></dl>

</div>
</div>
<a class="anchor" id="a3e6c1bbba394612974a12e3d4477717b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t cpp3ds::String::getSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the size of the string. </p>
<dl class="section return"><dt>Returns</dt><dd>Number of characters in the string</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#ac067c212f638dbaa7ce838beee6286ef" title="Check whether the string is empty or not. ">isEmpty</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af5f3abd8c010d7da5463b1368ad870e6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::String::insert </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Insert one or more characters into the string. </p>
<p>This function inserts the characters of <em>str</em> into the string, starting from <em>position</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>Position of insertion </td></tr>
    <tr><td class="paramname">str</td><td>Characters to insert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac067c212f638dbaa7ce838beee6286ef"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool cpp3ds::String::isEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check whether the string is empty or not. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the string is empty (i.e. contains no character)</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#a38d2a70a40b4ba6dc71175179554a3ec" title="Clear the string. ">clear</a>, <a class="el" href="classcpp3ds_1_1String.htm#a3e6c1bbba394612974a12e3d4477717b" title="Get the size of the string. ">getSize</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a3830705d5b07d2fb2ceb99935c0032c0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::String::operator std::string </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Implicit cast operator to std::string (ANSI string) </p>
<p>The current global locale is used for conversion. If you want to explicitely specify a locale, see toAnsiString. Characters that do not fit in the target encoding are discarded from the returned string. This operator is defined for convenience, and is equivalent to calling <a class="el" href="classcpp3ds_1_1String.htm#aca186c7701bbcd06ee1cbec495a2aa8a" title="Convert the unicode string to an ANSI string. ">toAnsiString()</a>.</p>
<dl class="section return"><dt>Returns</dt><dd>Converted ANSI string</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#aca186c7701bbcd06ee1cbec495a2aa8a" title="Convert the unicode string to an ANSI string. ">toAnsiString</a>, operator std::wstring </dd></dl>

</div>
</div>
<a class="anchor" id="aec7aefe6d7d42f01732005121bdedc79"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cpp3ds::String::operator std::wstring </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Implicit cast operator to std::wstring (wide string) </p>
<p>Characters that do not fit in the target encoding are discarded from the returned string. This operator is defined for convenience, and is equivalent to calling <a class="el" href="classcpp3ds_1_1String.htm#abba6a1dd0ac8a205145e9de1253e8335" title="Convert the unicode string to a wide string. ">toWideString()</a>.</p>
<dl class="section return"><dt>Returns</dt><dd>Converted wide string</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#abba6a1dd0ac8a205145e9de1253e8335" title="Convert the unicode string to a wide string. ">toWideString</a>, operator std::string </dd></dl>

</div>
</div>
<a class="anchor" id="abb398c3ced8ac8bd85ca0fc80f62a007"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1String.htm">String</a>&amp; cpp3ds::String::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Overload of += operator to append an UTF-32 string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">right</td><td><a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">String</a> to append</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to self </dd></dl>

</div>
</div>
<a class="anchor" id="a29686ec7e5bdfa7597ddbf595e68f4ac"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1String.htm">String</a>&amp; cpp3ds::String::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Overload of assignment operator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">right</td><td>Instance to assign</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to self </dd></dl>

</div>
</div>
<a class="anchor" id="a231ed6419bf1c66e6466df6d57bfeb62"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Uint32 cpp3ds::String::operator[] </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Overload of [] operator to access a character by its position. </p>
<p>This function provides read-only access to characters. Note: this function doesn't throw if <em>index</em> is out of range.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>Index of the character to get</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Character at position <em>index</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a179a8bd904d5877c3d12f35cc6d7a1bb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Uint32&amp; cpp3ds::String::operator[] </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Overload of [] operator to access a character by its position. </p>
<p>This function provides read and write access to characters. Note: this function doesn't throw if <em>index</em> is out of range.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>Index of the character to get</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to the character at position <em>index</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a8f9e69e4829dd47377959de82798e65a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::String::replace </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>replaceWith</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replace a substring with another string. </p>
<p>This function replaces the substring that starts at index <em>position</em> and spans <em>length</em> characters with the string <em>replaceWith</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>Index of the first character to be replaced </td></tr>
    <tr><td class="paramname">length</td><td>Number of characters to replace. You can pass InvalidPos to replace all characters until the end of the string. </td></tr>
    <tr><td class="paramname">replaceWith</td><td><a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">String</a> that replaces the given substring. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="acc60acb36b146cf0c696b06f51a542c6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp3ds::String::replace </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>searchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>replaceWith</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replace all occurrences of a substring with a replacement string. </p>
<p>This function replaces all occurences of <em>searchFor</em> in this string with the string <em>replaceWith</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">searchFor</td><td>The value being searched for </td></tr>
    <tr><td class="paramname">replaceWith</td><td>The value that replaces found <em>searchFor</em> values </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af7652aba9ae1dd06519f9587358eb4b6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1String.htm">String</a> cpp3ds::String::substring </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>length</em> = <code><a class="el" href="classcpp3ds_1_1String.htm#a5a81b7a64d2665c2f20050d59e8864bc">InvalidPos</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a part of the string. </p>
<p>This function returns the substring that starts at index <em>position</em> and spans <em>length</em> characters.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>Index of the first character </td></tr>
    <tr><td class="paramname">length</td><td>Number of characters to include in the substring (if the string is shorter, as many characters as possible are included). <a class="el" href="classcpp3ds_1_1String.htm#a5a81b7a64d2665c2f20050d59e8864bc">InvalidPos</a> can be used to include all characters until the end of the string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classcpp3ds_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings. ">String</a> object containing a substring of this object </dd></dl>

</div>
</div>
<a class="anchor" id="aca186c7701bbcd06ee1cbec495a2aa8a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string cpp3ds::String::toAnsiString </td>
          <td>(</td>
          <td class="paramtype">const std::locale &amp;&#160;</td>
          <td class="paramname"><em>locale</em> = <code>std::locale()</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert the unicode string to an ANSI string. </p>
<p>The UTF-32 string is converted to an ANSI string in the encoding defined by <em>locale</em>. Characters that do not fit in the target encoding are discarded from the returned string.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">locale</td><td>Locale to use for conversion</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Converted ANSI string</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#abba6a1dd0ac8a205145e9de1253e8335" title="Convert the unicode string to a wide string. ">toWideString</a>, operator std::string </dd></dl>

</div>
</div>
<a class="anchor" id="a1d379baf388f85c1c9de6a8a09c02f17"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::basic_string&lt;Uint16&gt; cpp3ds::String::toUtf16 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert the unicode string to a UTF-16 string. </p>
<dl class="section return"><dt>Returns</dt><dd>Converted UTF-16 string</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#a33f7c1d17bee042e4ce83006cd31b77d" title="Convert the unicode string to a UTF-8 string. ">toUtf8</a>, <a class="el" href="classcpp3ds_1_1String.htm#aa221fd261fd0a4d156601f8414848ecd" title="Convert the unicode string to a UTF-32 string. ">toUtf32</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aa221fd261fd0a4d156601f8414848ecd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::basic_string&lt;Uint32&gt; cpp3ds::String::toUtf32 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert the unicode string to a UTF-32 string. </p>
<p>This function doesn't perform any conversion, since the string is already stored as UTF-32 internally.</p>
<dl class="section return"><dt>Returns</dt><dd>Converted UTF-32 string</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#a33f7c1d17bee042e4ce83006cd31b77d" title="Convert the unicode string to a UTF-8 string. ">toUtf8</a>, <a class="el" href="classcpp3ds_1_1String.htm#a1d379baf388f85c1c9de6a8a09c02f17" title="Convert the unicode string to a UTF-16 string. ">toUtf16</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a33f7c1d17bee042e4ce83006cd31b77d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::basic_string&lt;Uint8&gt; cpp3ds::String::toUtf8 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert the unicode string to a UTF-8 string. </p>
<dl class="section return"><dt>Returns</dt><dd>Converted UTF-8 string</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#a1d379baf388f85c1c9de6a8a09c02f17" title="Convert the unicode string to a UTF-16 string. ">toUtf16</a>, <a class="el" href="classcpp3ds_1_1String.htm#aa221fd261fd0a4d156601f8414848ecd" title="Convert the unicode string to a UTF-32 string. ">toUtf32</a> </dd></dl>

</div>
</div>
<a class="anchor" id="abba6a1dd0ac8a205145e9de1253e8335"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::wstring cpp3ds::String::toWideString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert the unicode string to a wide string. </p>
<p>Characters that do not fit in the target encoding are discarded from the returned string.</p>
<dl class="section return"><dt>Returns</dt><dd>Converted wide string</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1String.htm#aca186c7701bbcd06ee1cbec495a2aa8a" title="Convert the unicode string to an ANSI string. ">toAnsiString</a>, operator std::wstring </dd></dl>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a class="anchor" id="a3bfb9217788a9978499b8d5696bb0ef2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of != operator to compare two UTF-32 strings. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a string) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a string)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if both strings are different </dd></dl>

</div>
</div>
<a class="anchor" id="af140f992b7698cf1448677c2c8e11bf1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1String.htm">String</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of binary + operator to concatenate two strings. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a string) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a string)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Concatenated string </dd></dl>

</div>
</div>
<a class="anchor" id="a5158a142e0966685ec7fb4e147b24ef0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of &lt; operator to compare two UTF-32 strings. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a string) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a string)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if <em>left</em> is alphabetically lesser than <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="ac1c1bb5dcf02aad3b2c0a1bf74a11cc9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of &lt;= operator to compare two UTF-32 strings. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a string) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a string)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if <em>left</em> is alphabetically lesser or equal than <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a483931724196c580552b68751fb4d837"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of == operator to compare two UTF-32 strings. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a string) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a string)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if both strings are equal </dd></dl>

</div>
</div>
<a class="anchor" id="ac96278a8cbe282632b11f0c8c007df0c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of &gt; operator to compare two UTF-32 strings. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a string) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a string)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if <em>left</em> is alphabetically greater than <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a112689eec28e0ca9489e8c4ec6a34493"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator&gt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of &gt;= operator to compare two UTF-32 strings. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a string) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a string)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if <em>left</em> is alphabetically greater or equal than <em>right</em> </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a5a81b7a64d2665c2f20050d59e8864bc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::size_t cpp3ds::String::InvalidPos</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Represents an invalid position in the string. </p>

<p>Definition at line <a class="el" href="String_8hpp_source.htm#l00055">55</a> of file <a class="el" href="String_8hpp_source.htm">String.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="String_8hpp_source.htm">String.hpp</a></li>
</ul>
</div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
