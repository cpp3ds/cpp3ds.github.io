<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>cpp3ds</b></li><li class="navelem"><a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#related">Related Functions</a> &#124;
<a href="classcpp3ds_1_1Rect-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cpp3ds::Rect&lt; T &gt; Class Template Reference<div class="ingroups"><a class="el" href="group__graphics.htm">Graphics module</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Utility class for manipulating 2D axis aligned rectangles.  
 <a href="classcpp3ds_1_1Rect.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Rect_8hpp_source.htm">Rect.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae2e77ac74845159069d17be348394f2f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Rect.htm#ae2e77ac74845159069d17be348394f2f">Rect</a> ()</td></tr>
<tr class="memdesc:ae2e77ac74845159069d17be348394f2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#ae2e77ac74845159069d17be348394f2f">More...</a><br /></td></tr>
<tr class="separator:ae2e77ac74845159069d17be348394f2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af69548c006bb9d57d57bc8915195c884"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Rect.htm#af69548c006bb9d57d57bc8915195c884">Rect</a> (T rectLeft, T rectTop, T rectWidth, T rectHeight)</td></tr>
<tr class="memdesc:af69548c006bb9d57d57bc8915195c884"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the rectangle from its coordinates.  <a href="#af69548c006bb9d57d57bc8915195c884">More...</a><br /></td></tr>
<tr class="separator:af69548c006bb9d57d57bc8915195c884"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ddfc020cbfe7d39950cca138f80fe86"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Rect.htm#a2ddfc020cbfe7d39950cca138f80fe86">Rect</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;position, const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;size)</td></tr>
<tr class="memdesc:a2ddfc020cbfe7d39950cca138f80fe86"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the rectangle from position and size.  <a href="#a2ddfc020cbfe7d39950cca138f80fe86">More...</a><br /></td></tr>
<tr class="separator:a2ddfc020cbfe7d39950cca138f80fe86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a718e78c808a7fc0d3e2b0b15ab130e87"><td class="memTemplParams" colspan="2">template&lt;typename U &gt; </td></tr>
<tr class="memitem:a718e78c808a7fc0d3e2b0b15ab130e87"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Rect.htm#a718e78c808a7fc0d3e2b0b15ab130e87">Rect</a> (const <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; U &gt; &amp;rectangle)</td></tr>
<tr class="memdesc:a718e78c808a7fc0d3e2b0b15ab130e87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the rectangle from another type of rectangle.  <a href="#a718e78c808a7fc0d3e2b0b15ab130e87">More...</a><br /></td></tr>
<tr class="separator:a718e78c808a7fc0d3e2b0b15ab130e87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1c7d2433bc87fdb2326991d1c73999e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Rect.htm#af1c7d2433bc87fdb2326991d1c73999e">contains</a> (T x, T y) const </td></tr>
<tr class="memdesc:af1c7d2433bc87fdb2326991d1c73999e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a point is inside the rectangle's area.  <a href="#af1c7d2433bc87fdb2326991d1c73999e">More...</a><br /></td></tr>
<tr class="separator:af1c7d2433bc87fdb2326991d1c73999e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a092bc3798df232ba8fc5a09dd24c8c83"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Rect.htm#a092bc3798df232ba8fc5a09dd24c8c83">contains</a> (const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;point) const </td></tr>
<tr class="memdesc:a092bc3798df232ba8fc5a09dd24c8c83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a point is inside the rectangle's area.  <a href="#a092bc3798df232ba8fc5a09dd24c8c83">More...</a><br /></td></tr>
<tr class="separator:a092bc3798df232ba8fc5a09dd24c8c83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a050ba477255cfe2e31cc10e1ecb426"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Rect.htm#a6a050ba477255cfe2e31cc10e1ecb426">intersects</a> (const <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;rectangle) const </td></tr>
<tr class="memdesc:a6a050ba477255cfe2e31cc10e1ecb426"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check the intersection between two rectangles.  <a href="#a6a050ba477255cfe2e31cc10e1ecb426">More...</a><br /></td></tr>
<tr class="separator:a6a050ba477255cfe2e31cc10e1ecb426"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d78f4e46f7a72cda4db144371540053"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Rect.htm#a6d78f4e46f7a72cda4db144371540053">intersects</a> (const <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;rectangle, <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;intersection) const </td></tr>
<tr class="memdesc:a6d78f4e46f7a72cda4db144371540053"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check the intersection between two rectangles.  <a href="#a6d78f4e46f7a72cda4db144371540053">More...</a><br /></td></tr>
<tr class="separator:a6d78f4e46f7a72cda4db144371540053"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a5f0ac18628c08982bdfd16589536ce1e"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Rect.htm#a5f0ac18628c08982bdfd16589536ce1e">left</a></td></tr>
<tr class="memdesc:a5f0ac18628c08982bdfd16589536ce1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Left coordinate of the rectangle.  <a href="#a5f0ac18628c08982bdfd16589536ce1e">More...</a><br /></td></tr>
<tr class="separator:a5f0ac18628c08982bdfd16589536ce1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d2eb8240339ddc4f1f8f087a757c64a"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Rect.htm#a1d2eb8240339ddc4f1f8f087a757c64a">top</a></td></tr>
<tr class="memdesc:a1d2eb8240339ddc4f1f8f087a757c64a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Top coordinate of the rectangle.  <a href="#a1d2eb8240339ddc4f1f8f087a757c64a">More...</a><br /></td></tr>
<tr class="separator:a1d2eb8240339ddc4f1f8f087a757c64a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaa03fda9ca3af1d68bb3e033c992ebe"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Rect.htm#aaaa03fda9ca3af1d68bb3e033c992ebe">width</a></td></tr>
<tr class="memdesc:aaaa03fda9ca3af1d68bb3e033c992ebe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Width of the rectangle.  <a href="#aaaa03fda9ca3af1d68bb3e033c992ebe">More...</a><br /></td></tr>
<tr class="separator:aaaa03fda9ca3af1d68bb3e033c992ebe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c2edc12e46a95616a41992c29355b3b"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Rect.htm#a8c2edc12e46a95616a41992c29355b3b">height</a></td></tr>
<tr class="memdesc:a8c2edc12e46a95616a41992c29355b3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Height of the rectangle.  <a href="#a8c2edc12e46a95616a41992c29355b3b">More...</a><br /></td></tr>
<tr class="separator:a8c2edc12e46a95616a41992c29355b3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="related"></a>
Related Functions</h2></td></tr>
<tr><td class="ititle" colspan="2"><p>(Note that these are not member functions.) </p>
</td></tr>
<tr class="memitem:ab3488b5dbd0e587c4d7cb80605affc46"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab3488b5dbd0e587c4d7cb80605affc46"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Rect.htm#ab3488b5dbd0e587c4d7cb80605affc46">operator==</a> (const <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;<a class="el" href="classcpp3ds_1_1Rect.htm#a5f0ac18628c08982bdfd16589536ce1e">left</a>, const <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;right)</td></tr>
<tr class="memdesc:ab3488b5dbd0e587c4d7cb80605affc46"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator ==.  <a href="#ab3488b5dbd0e587c4d7cb80605affc46">More...</a><br /></td></tr>
<tr class="separator:ab3488b5dbd0e587c4d7cb80605affc46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03fc4c105687b7d0f07b6b4ed4b45581"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a03fc4c105687b7d0f07b6b4ed4b45581"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classcpp3ds_1_1Rect.htm#a03fc4c105687b7d0f07b6b4ed4b45581">operator!=</a> (const <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;<a class="el" href="classcpp3ds_1_1Rect.htm#a5f0ac18628c08982bdfd16589536ce1e">left</a>, const <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;right)</td></tr>
<tr class="memdesc:a03fc4c105687b7d0f07b6b4ed4b45581"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator !=.  <a href="#a03fc4c105687b7d0f07b6b4ed4b45581">More...</a><br /></td></tr>
<tr class="separator:a03fc4c105687b7d0f07b6b4ed4b45581"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br />
class cpp3ds::Rect&lt; T &gt;</h3>

<p>Utility class for manipulating 2D axis aligned rectangles. </p>
<p>A rectangle is defined by its top-left corner and its size.</p>
<p>It is a very simple class defined for convenience, so its member variables (left, top, width and height) are public and can be accessed directly, just like the vector classes (<a class="el" href="classcpp3ds_1_1Vector2.htm" title="Utility template class for manipulating 2-dimensional vectors. ">Vector2</a> and <a class="el" href="classcpp3ds_1_1Vector3.htm" title="Utility template class for manipulating 3-dimensional vectors. ">Vector3</a>).</p>
<p>To keep things simple, <a class="el" href="classcpp3ds_1_1Rect.htm" title="Utility class for manipulating 2D axis aligned rectangles. ">cpp3ds::Rect</a> doesn't define functions to emulate the properties that are not directly members (such as right, bottom, center, etc.), it rather only provides intersection functions.</p>
<p><a class="el" href="classcpp3ds_1_1Rect.htm" title="Utility class for manipulating 2D axis aligned rectangles. ">cpp3ds::Rect</a> uses the usual rules for its boundaries: </p><ul>
<li>The left and top edges are included in the rectangle's area </li>
<li>The right (left + width) and bottom (top + height) edges are excluded from the rectangle's area</li>
</ul>
<p>This means that cpp3ds::IntRect(0, 0, 1, 1) and cpp3ds::IntRect(1, 1, 1, 1) don't intersect.</p>
<p><a class="el" href="classcpp3ds_1_1Rect.htm" title="Utility class for manipulating 2D axis aligned rectangles. ">cpp3ds::Rect</a> is a template and may be used with any numeric type, but for simplicity the instanciations used by SFML are typedefed: </p><ul>
<li>cpp3ds::Rect&lt;int&gt; is cpp3ds::IntRect </li>
<li>cpp3ds::Rect&lt;float&gt; is cpp3ds::FloatRect</li>
</ul>
<p>So that you don't have to care about the template syntax.</p>
<p>Usage example: </p><div class="fragment"><div class="line"><span class="comment">// Define a rectangle, located at (0, 0) with a size of 20x5</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1Rect.htm">cpp3ds::IntRect</a> r1(0, 0, 20, 5);</div>
<div class="line"></div>
<div class="line"><span class="comment">// Define another rectangle, located at (4, 2) with a size of 18x10</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2i</a> position(4, 2);</div>
<div class="line"><a class="code" href="classcpp3ds_1_1Vector2.htm">cpp3ds::Vector2i</a> size(18, 10);</div>
<div class="line"><a class="code" href="classcpp3ds_1_1Rect.htm">cpp3ds::IntRect</a> r2(position, size);</div>
<div class="line"></div>
<div class="line"><span class="comment">// Test intersections with the point (3, 1)</span></div>
<div class="line"><span class="keywordtype">bool</span> b1 = r1.contains(3, 1); <span class="comment">// true</span></div>
<div class="line"><span class="keywordtype">bool</span> b2 = r2.contains(3, 1); <span class="comment">// false</span></div>
<div class="line"></div>
<div class="line"><span class="comment">// Test the intersection between r1 and r2</span></div>
<div class="line"><a class="code" href="classcpp3ds_1_1Rect.htm">cpp3ds::IntRect</a> result;</div>
<div class="line"><span class="keywordtype">bool</span> b3 = r1.<a class="code" href="classcpp3ds_1_1Rect.htm#a6a050ba477255cfe2e31cc10e1ecb426">intersects</a>(r2, result); <span class="comment">// true</span></div>
<div class="line"><span class="comment">// result == (4, 2, 16, 3)</span></div>
</div><!-- fragment --> 
<p>Definition at line <a class="el" href="Rect_8hpp_source.htm#l00042">42</a> of file <a class="el" href="Rect_8hpp_source.htm">Rect.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ae2e77ac74845159069d17be348394f2f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Rect.htm">cpp3ds::Rect</a>&lt; T &gt;::<a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>
<p>Creates an empty rectangle (it is equivalent to calling Rect(0, 0, 0, 0)). </p>

</div>
</div>
<a class="anchor" id="af69548c006bb9d57d57bc8915195c884"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Rect.htm">cpp3ds::Rect</a>&lt; T &gt;::<a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a> </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>rectLeft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>rectTop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>rectWidth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>rectHeight</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct the rectangle from its coordinates. </p>
<p>Be careful, the last two parameters are the width and height, not the right and bottom coordinates!</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rectLeft</td><td>Left coordinate of the rectangle </td></tr>
    <tr><td class="paramname">rectTop</td><td>Top coordinate of the rectangle </td></tr>
    <tr><td class="paramname">rectWidth</td><td>Width of the rectangle </td></tr>
    <tr><td class="paramname">rectHeight</td><td>Height of the rectangle </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2ddfc020cbfe7d39950cca138f80fe86"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Rect.htm">cpp3ds::Rect</a>&lt; T &gt;::<a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct the rectangle from position and size. </p>
<p>Be careful, the last parameter is the size, not the bottom-right corner!</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>Position of the top-left corner of the rectangle </td></tr>
    <tr><td class="paramname">size</td><td>Size of the rectangle </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a718e78c808a7fc0d3e2b0b15ab130e87"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcpp3ds_1_1Rect.htm">cpp3ds::Rect</a>&lt; T &gt;::<a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>rectangle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Construct the rectangle from another type of rectangle. </p>
<p>This constructor doesn't replace the copy constructor, it's called only when U != T. A call to this constructor will fail to compile if U is not convertible to T.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rectangle</td><td>Rectangle to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="af1c7d2433bc87fdb2326991d1c73999e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classcpp3ds_1_1Rect.htm">cpp3ds::Rect</a>&lt; T &gt;::contains </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if a point is inside the rectangle's area. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>X coordinate of the point to test </td></tr>
    <tr><td class="paramname">y</td><td>Y coordinate of the point to test</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the point is inside, false otherwise</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Rect.htm#a6a050ba477255cfe2e31cc10e1ecb426" title="Check the intersection between two rectangles. ">intersects</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a092bc3798df232ba8fc5a09dd24c8c83"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classcpp3ds_1_1Rect.htm">cpp3ds::Rect</a>&lt; T &gt;::contains </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>point</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if a point is inside the rectangle's area. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">point</td><td>Point to test</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the point is inside, false otherwise</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Rect.htm#a6a050ba477255cfe2e31cc10e1ecb426" title="Check the intersection between two rectangles. ">intersects</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a6a050ba477255cfe2e31cc10e1ecb426"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classcpp3ds_1_1Rect.htm">cpp3ds::Rect</a>&lt; T &gt;::intersects </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>rectangle</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check the intersection between two rectangles. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rectangle</td><td>Rectangle to test</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if rectangles overlap, false otherwise</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Rect.htm#af1c7d2433bc87fdb2326991d1c73999e" title="Check if a point is inside the rectangle&#39;s area. ">contains</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a6d78f4e46f7a72cda4db144371540053"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classcpp3ds_1_1Rect.htm">cpp3ds::Rect</a>&lt; T &gt;::intersects </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>rectangle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>intersection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check the intersection between two rectangles. </p>
<p>This overload returns the overlapped rectangle in the <em>intersection</em> parameter.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rectangle</td><td>Rectangle to test </td></tr>
    <tr><td class="paramname">intersection</td><td>Rectangle to be filled with the intersection</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if rectangles overlap, false otherwise</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1Rect.htm#af1c7d2433bc87fdb2326991d1c73999e" title="Check if a point is inside the rectangle&#39;s area. ">contains</a> </dd></dl>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a class="anchor" id="a03fc4c105687b7d0f07b6b4ed4b45581"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of binary operator !=. </p>
<p>This operator compares strict difference between two rectangles.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a rectangle) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a rectangle)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if <em>left</em> is not equal to <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="ab3488b5dbd0e587c4d7cb80605affc46"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcpp3ds_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">related</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of binary operator ==. </p>
<p>This operator compares strict equality between two rectangles.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a rectangle) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a rectangle)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if <em>left</em> is equal to <em>right</em> </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a8c2edc12e46a95616a41992c29355b3b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classcpp3ds_1_1Rect.htm">cpp3ds::Rect</a>&lt; T &gt;::height</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Height of the rectangle. </p>

<p>Definition at line <a class="el" href="Rect_8hpp_source.htm#l00154">154</a> of file <a class="el" href="Rect_8hpp_source.htm">Rect.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a5f0ac18628c08982bdfd16589536ce1e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classcpp3ds_1_1Rect.htm">cpp3ds::Rect</a>&lt; T &gt;::left</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Left coordinate of the rectangle. </p>

<p>Definition at line <a class="el" href="Rect_8hpp_source.htm#l00151">151</a> of file <a class="el" href="Rect_8hpp_source.htm">Rect.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a1d2eb8240339ddc4f1f8f087a757c64a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classcpp3ds_1_1Rect.htm">cpp3ds::Rect</a>&lt; T &gt;::top</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Top coordinate of the rectangle. </p>

<p>Definition at line <a class="el" href="Rect_8hpp_source.htm#l00152">152</a> of file <a class="el" href="Rect_8hpp_source.htm">Rect.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="aaaa03fda9ca3af1d68bb3e033c992ebe"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classcpp3ds_1_1Rect.htm">cpp3ds::Rect</a>&lt; T &gt;::width</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Width of the rectangle. </p>

<p>Definition at line <a class="el" href="Rect_8hpp_source.htm#l00153">153</a> of file <a class="el" href="Rect_8hpp_source.htm">Rect.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Rect_8hpp_source.htm">Rect.hpp</a></li>
</ul>
</div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
