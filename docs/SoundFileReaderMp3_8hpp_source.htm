<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_0b93ed46ee854382aab85c778b89946e.htm">include</a></li><li class="navelem"><a class="el" href="dir_18d409fe281a3b15bd325ab753ead42a.htm">cpp3ds</a></li><li class="navelem"><a class="el" href="dir_f11191753e0b9218936d11d72560cde3.htm">Audio</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">SoundFileReaderMp3.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;cpp3ds/Audio/SoundFileReader.hpp&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;mpg123.h&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacecpp3ds.htm">cpp3ds</a></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;{</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">namespace </span>priv</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;{</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">class </span>SoundFileReaderMp3 : <span class="keyword">public</span> SoundFileReader</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    SoundFileReaderMp3();</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    ~SoundFileReaderMp3();</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="comment">// \brief Check if this reader can handle a file given by an input stream</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="comment">// \param stream Source stream to check</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="comment">// \return True if the file is supported by this reader</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> check(InputStream&amp; stream);</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="comment">// \brief Open a sound file for reading</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="comment">// \param stream Source stream to read from</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="comment">// \param info   Structure to fill with the properties of the loaded sound</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="comment">// \return True if the file was successfully opened</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classcpp3ds_1_1SoundFileReader.htm#a4ac14f109a497bb72cd6f8324f611ab8">open</a>(InputStream&amp; stream, SoundFileReader::Info&amp; info) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="comment">// \brief Change the current read position to the given sample offset</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="comment">// If the given offset exceeds to total number of samples,</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="comment">// this function must jump to the end of the file.</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="comment">// \param sampleOffset Index of the sample to jump to, relative to the beginning</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classcpp3ds_1_1SoundFileReader.htm#a9dca75c09bdc6a540e36f4d9bf3b80e8">seek</a>(Uint64 sampleOffset) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="comment">// \brief Read audio samples from the open file</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="comment">// \param samples  Pointer to the sample array to fill</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="comment">// \param maxCount Maximum number of samples to read</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="comment">// \return Number of samples actually read (may be less than \a maxCount)</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    Uint64 <a class="code" href="classcpp3ds_1_1SoundFileReader.htm#ab8f265778f4603e15aeb89cf183106fe">read</a>(Int16* samples, Uint64 maxCount) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="comment">// Encapsulates mp3 output format</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">class </span>OutputFormat {</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordtype">long</span> m_rate = 0;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordtype">int</span> m_channels = 0;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordtype">int</span> m_encoding = 0;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordtype">bool</span> update (mpg123_handle* handle ){</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keywordflow">return</span> mpg123_getformat(handle, &amp;m_rate, &amp;m_channels, &amp;m_encoding) == MPG123_OK;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        }</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        std::string toString()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            std::string result;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">//          result += &quot;format: sample rate in Hz: &quot; + std::to_string(m_rate);</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">//          result += &quot;\nformat: channels: &quot; + std::to_string(m_channels);</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">//          result += &quot;\nformat: encoding: &quot; + std::to_string(m_encoding);</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        }</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    };</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// Easy access to mpg123_frameinfo struct</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">class </span>FrameInfo {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        mpg123_frameinfo  m_info;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> std::size_t m_headerSize = 4;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordtype">bool</span> update (mpg123_handle* handle ){</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">return</span> mpg123_info(handle, &amp;m_info) == MPG123_OK;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        std::size_t getFrameSizeInBytesIncludingHeader()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keywordflow">return</span> m_info.framesize;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        std::size_t getFrameSizeInBytesNoHeader()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">return</span> m_info.framesize - m_headerSize;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        std::size_t getExpectedNumberOfSamples()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">return</span> getFrameSizeInBytesNoHeader() / <span class="keyword">sizeof</span>(short);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        }</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        std::uint32_t getSamplingRateInHz()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">return</span> m_info.rate;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        std::uint32_t getNumberOfChannels()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keywordflow">switch</span> (m_info.mode)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keywordflow">case</span> mpg123_mode::MPG123_M_MONO:</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keywordflow">case</span> mpg123_mode::MPG123_M_STEREO:</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">case</span> mpg123_mode::MPG123_M_JOINT:</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keywordflow">case</span> mpg123_mode::MPG123_M_DUAL:</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    <span class="keywordflow">return</span> 2;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        }</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        std::string toString()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            std::string result;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">//          result += &quot;header: MPEG version: &quot;;</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">//          switch (m_info.version)</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">//          {</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">//              case mpg123_version::MPG123_1_0:</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">//                  result += &quot;1.0&quot;;</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">//                  break;</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">//              case mpg123_version::MPG123_2_0:</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">//                  result += &quot;2.0&quot;;</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">//                  break;</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">//              case mpg123_version::MPG123_2_5:</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">//                  result += &quot;2.5&quot;;</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">//                  break;</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">//              default:</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">//                  result += &quot;unknown version&quot;;</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">//                  break;</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">//          }</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">//          result += &quot;\nheader: MPEG Audio mode: &quot;;</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">//          switch (m_info.mode)  // Only the mono mode has 1 channel, the others have 2 channels.</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">//          {</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">//              case mpg123_mode::MPG123_M_STEREO:</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">//                  result += &quot;Standard Stereo (2 channels)&quot;;</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">//                  break;</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">//              case mpg123_mode::MPG123_M_JOINT:</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">//                  result += &quot;Joint Stereo (2 channels)&quot;;</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">//                  break;</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">//              case mpg123_mode::MPG123_M_DUAL:</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">//                  result += &quot;Dual Channel (2 channels)&quot;;</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">//                  break;</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">//              case mpg123_mode::MPG123_M_MONO:</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">//                  result += &quot;Mono (single channel)&quot;;</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">//                  break;</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">//              default:</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">//                  result += &quot;unknown mode&quot;;</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">//                  break;</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">//          }</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">//      //  enum mpg123_flags       flags</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">//          result += &quot;\nheader: Mode type of variable bitrate (vbr): &quot;;</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">//          switch (m_info.vbr)</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">//          {</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">//              case mpg123_vbr::MPG123_CBR:</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">//                  result += &quot;Constant Bitrate Mode (default)&quot;;</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">//                  break;</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">//              case mpg123_vbr::MPG123_VBR:</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">//                  result += &quot;Variable Bitrate Mode&quot;;</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">//                  break;</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">//              case mpg123_vbr::MPG123_ABR:</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">//                  result += &quot;Average Bitrate Mode&quot;;</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">//                  break;</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">//              default:</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">//                  result += &quot;unknown vbr mode&quot;;</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">//                  break;</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">//          }</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">//          result += &quot;\nheader: MPEG Audio Layer (MP1/MP2/MP3): &quot; + std::to_string(m_info.layer);</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">//          result += &quot;\nheader: Mode extension bit flag: &quot; + std::to_string(m_info.mode_ext);</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">//          result += &quot;\nheader: Emphasis type (?): &quot; + std::to_string(m_info.emphasis);</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">//          result += &quot;\nheader: Target average bitrate: &quot; + std::to_string(m_info.abr_rate);</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">//          result += &quot;\nheader: Bitrate of the frame (kbps): &quot; + std::to_string(m_info.bitrate);</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">//          result += &quot;\nheader: Sampling rate in Hz: &quot; + std::to_string(m_info.rate);</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">//          result += &quot;\nheader: Size of the frame (in bytes, including header): &quot; + std::to_string(m_info.framesize);</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        }</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    };</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="comment">// library objects</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    mpg123_handle*      m_handle;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    InputStream*    m_stream;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    FrameInfo           m_frameInfo;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    OutputFormat        m_outputFormat;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="comment">// buffers</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    std::size_t         m_streambufferSize;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*      m_streambuffer;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="comment">// Creates the handle to the mp3 library</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordtype">bool</span> initializeLibrary();</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="comment">// Used by open() to consume just enough data to retrieve frame info</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">// and output format so we can set parameters in SoundFileReader::Info</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordtype">bool</span> probeFirstFrame(InputStream&amp; stream);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordtype">void</span> fillSfmlInfo(SoundFileReader::Info&amp; info) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="comment">// Called by destructor to close the library and delete the buffers</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordtype">void</span> close();</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;};</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;} <span class="comment">// namespace priv</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;} <span class="comment">// namespace cpp3ds</span></div>
<div class="ttc" id="namespacecpp3ds_htm"><div class="ttname"><a href="namespacecpp3ds.htm">cpp3ds</a></div><div class="ttdef"><b>Definition:</b> <a href="AlResource_8hpp_source.htm#l00033">AlResource.hpp:33</a></div></div>
<div class="ttc" id="classcpp3ds_1_1SoundFileReader_htm_ab8f265778f4603e15aeb89cf183106fe"><div class="ttname"><a href="classcpp3ds_1_1SoundFileReader.htm#ab8f265778f4603e15aeb89cf183106fe">cpp3ds::SoundFileReader::read</a></div><div class="ttdeci">virtual Uint64 read(Int16 *samples, Uint64 maxCount)=0</div><div class="ttdoc">Read audio samples from the open file. </div></div>
<div class="ttc" id="classcpp3ds_1_1SoundFileReader_htm_a4ac14f109a497bb72cd6f8324f611ab8"><div class="ttname"><a href="classcpp3ds_1_1SoundFileReader.htm#a4ac14f109a497bb72cd6f8324f611ab8">cpp3ds::SoundFileReader::open</a></div><div class="ttdeci">virtual bool open(InputStream &amp;stream, Info &amp;info)=0</div><div class="ttdoc">Open a sound file for reading. </div></div>
<div class="ttc" id="classcpp3ds_1_1SoundFileReader_htm_a9dca75c09bdc6a540e36f4d9bf3b80e8"><div class="ttname"><a href="classcpp3ds_1_1SoundFileReader.htm#a9dca75c09bdc6a540e36f4d9bf3b80e8">cpp3ds::SoundFileReader::seek</a></div><div class="ttdeci">virtual void seek(Uint64 sampleOffset)=0</div><div class="ttdoc">Change the current read position to the given sample offset. </div></div>
</div><!-- fragment --></div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
