<!doctype html>
<html class="no-js" lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>cpp3ds &middot; Documentation</title>
		<link rel="stylesheet" href="../css/app.css" />
		<link rel="stylesheet" type="text/css" href="doxygen.css" title="default" media="screen,print" />
		<script src="../bower_components/modernizr/modernizr.js"></script>
	</head>
	<body>
		 <div id="topnav" class="text-center">
				<dl class="sub-nav">
					<dd id="navlogo"><a href="/">
						<img src="../img/logo.svg" />
					</a></dd>
					<dd><a href="/#what">What is it?</a></dd>
					<dd><a href="/#download">Download</a></dd>
					<dd><a href="/#faqs">FAQs</a></dd>
					<dd class="active"><a href="/docs">Docs</a></dd>
				</dl>
			</div>
		<div id="content">
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>cpp3ds</b></li><li class="navelem"><a class="el" href="classcpp3ds_1_1LinearAllocator.htm">LinearAllocator</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classcpp3ds_1_1LinearAllocator-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">cpp3ds::LinearAllocator&lt; T &gt; Class Template Reference<div class="ingroups"><a class="el" href="group__system.htm">System module</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>This allocator class is useful for when you want to use a STL container (e.g.  
 <a href="classcpp3ds_1_1LinearAllocator.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="LinearAllocator_8hpp_source.htm">LinearAllocator.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for cpp3ds::LinearAllocator&lt; T &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classcpp3ds_1_1LinearAllocator.png" usemap="#cpp3ds::LinearAllocator&lt; T &gt;_map" alt=""/>
  <map id="cpp3ds::LinearAllocator&lt; T &gt;_map" name="cpp3ds::LinearAllocator&lt; T &gt;_map">
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcpp3ds_1_1LinearAllocator_1_1rebind.htm">rebind</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:af3067bb64dbbb93f94ecd7ea69bf831e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af3067bb64dbbb93f94ecd7ea69bf831e"></a>
typedef size_t&#160;</td><td class="memItemRight" valign="bottom"><b>size_type</b></td></tr>
<tr class="separator:af3067bb64dbbb93f94ecd7ea69bf831e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a075d130b147adf2601f3e72f2a0d49fb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a075d130b147adf2601f3e72f2a0d49fb"></a>
typedef ptrdiff_t&#160;</td><td class="memItemRight" valign="bottom"><b>difference_type</b></td></tr>
<tr class="separator:a075d130b147adf2601f3e72f2a0d49fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b43f506db730e8ce4800edfbc8b2ceb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7b43f506db730e8ce4800edfbc8b2ceb"></a>
typedef T *&#160;</td><td class="memItemRight" valign="bottom"><b>pointer</b></td></tr>
<tr class="separator:a7b43f506db730e8ce4800edfbc8b2ceb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0e688c95e64a5a3557f7f9cd4513a06"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac0e688c95e64a5a3557f7f9cd4513a06"></a>
typedef const T *&#160;</td><td class="memItemRight" valign="bottom"><b>const_pointer</b></td></tr>
<tr class="separator:ac0e688c95e64a5a3557f7f9cd4513a06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a794fabb7032d6ffa636260070a8c8a50"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a794fabb7032d6ffa636260070a8c8a50"></a>
typedef T &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>reference</b></td></tr>
<tr class="separator:a794fabb7032d6ffa636260070a8c8a50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c2d0f14c62dcfdb124d31b3a2353a68"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4c2d0f14c62dcfdb124d31b3a2353a68"></a>
typedef const T &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>const_reference</b></td></tr>
<tr class="separator:a4c2d0f14c62dcfdb124d31b3a2353a68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f92e6c5c884706203f95ab3c1994b89"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6f92e6c5c884706203f95ab3c1994b89"></a>
typedef T&#160;</td><td class="memItemRight" valign="bottom"><b>value_type</b></td></tr>
<tr class="separator:a6f92e6c5c884706203f95ab3c1994b89"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5a09199c9205aa6579036a23fac0e150"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5a09199c9205aa6579036a23fac0e150"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>LinearAllocator</b> (const <a class="el" href="classcpp3ds_1_1LinearAllocator.htm">LinearAllocator</a> &amp;__a)  throw ()</td></tr>
<tr class="separator:a5a09199c9205aa6579036a23fac0e150"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69d48536177ad5019121d6555e862b43"><td class="memTemplParams" colspan="2"><a class="anchor" id="a69d48536177ad5019121d6555e862b43"></a>
template&lt;typename T1 &gt; </td></tr>
<tr class="memitem:a69d48536177ad5019121d6555e862b43"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><b>LinearAllocator</b> (const <a class="el" href="classcpp3ds_1_1LinearAllocator.htm">LinearAllocator</a>&lt; T1 &gt; &amp;)  throw ()</td></tr>
<tr class="separator:a69d48536177ad5019121d6555e862b43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3eb974fb329dc89fdc3cf5efdd128103"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3eb974fb329dc89fdc3cf5efdd128103"></a>
pointer&#160;</td><td class="memItemRight" valign="bottom"><b>allocate</b> (size_type __n, const void *=0)</td></tr>
<tr class="separator:a3eb974fb329dc89fdc3cf5efdd128103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8898120083206469824b038f052fadbf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8898120083206469824b038f052fadbf"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>deallocate</b> (pointer __p, size_type)</td></tr>
<tr class="separator:a8898120083206469824b038f052fadbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d5295dc58711af4ce6b07daa776a4b8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9d5295dc58711af4ce6b07daa776a4b8"></a>
size_type&#160;</td><td class="memItemRight" valign="bottom"><b>max_size</b> () const </td></tr>
<tr class="separator:a9d5295dc58711af4ce6b07daa776a4b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br />
class cpp3ds::LinearAllocator&lt; T &gt;</h3>

<p>This allocator class is useful for when you want to use a STL container (e.g. </p>
<p>std::vector) that allocates everything using ctrulib's linear memory.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classcpp3ds_1_1VertexArray.htm" title="Define a set of one or more 2D primitives. ">cpp3ds::VertexArray</a> </dd></dl>

<p>Definition at line <a class="el" href="LinearAllocator_8hpp_source.htm#l00013">13</a> of file <a class="el" href="LinearAllocator_8hpp_source.htm">LinearAllocator.hpp</a>.</p>
</div><hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="LinearAllocator_8hpp_source.htm">LinearAllocator.hpp</a></li>
</ul>
</div><!-- contents -->
		</div>
		<div id="footer-container">
			<div id="footer">
				SFML Copyright &copy; Laurent Gomila
			</div>
		</div>
	</body>
</html>
